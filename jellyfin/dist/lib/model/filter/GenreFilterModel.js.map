{"version":3,"file":"GenreFilterModel.js","sourceRoot":"","sources":["../../../../src/lib/model/filter/GenreFilterModel.ts"],"names":[],"mappings":";;;;;AAAA,4EAA6C;AAC7C,6DAAqC;AACrC,+DAAuC;AACvC,+CAA8E;AAS9E,MAAqB,gBAAiB,SAAQ,mBAAS;IAErD,KAAK,CAAC,SAAS,CAAC,MAA+B;QAC7C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACD,MAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,EAAE,QAAQ,IAAI,EAAE,CAAC;QACjE,MAAM,KAAK,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC;YACnC,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAiB,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;YACrE,IAAI,KAAK,EAAE,QAAQ,GAAG,KAAK,CAAC;YAC5B,IAAI,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE;gBACvC,KAAK,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnC,QAAQ,GAAG,IAAI,CAAC;aACjB;iBACI;gBACH,MAAM,iBAAiB,GAAG,CAAE,GAAG,gBAAgB,EAAE,KAAK,CAAC,EAAE,CAAE,CAAC;gBAC5D,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,KAAK;gBACL,QAAQ;aACT,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO;YACL,IAAI,EAAE,wBAAU,CAAC,KAAK;YACtB,KAAK,EAAE,yBAAQ,CAAC,OAAO,CAAC,6BAA6B,CAAC;YACtD,WAAW,EAAE,yBAAQ,CAAC,OAAO,CAAC,mCAAmC,CAAC;YAClE,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,aAAa;YACnB,UAAU,EAAE,IAAI;YAChB,OAAO;SACR,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO;YACL,QAAQ,EAAE,EAAE;SACb,CAAC;IACJ,CAAC;CACF;AA/CD,mCA+CC","sourcesContent":["import jellyfin from '../../JellyfinContext';\nimport BaseModel from '../BaseModel';\nimport GenreModel from '../GenreModel';\nimport FilterModel, { Filter, FilterOption, FilterType } from './FilterModel';\n\nexport interface GenreFilterModelConfig {\n  parentId: string;\n  initialSelection?: {\n    genreIds?: string[]\n  };\n}\n\nexport default class GenreFilterModel extends BaseModel implements FilterModel {\n\n  async getFilter(config?: GenreFilterModelConfig): Promise<Filter> {\n    if (!config) {\n      throw Error('Missing config');\n    }\n    const selectedGenreIds = config.initialSelection?.genreIds || [];\n    const model = new GenreModel(this.connection);\n    const genres = await model.getGenres({\n      parentId: config.parentId\n    });\n    const options = genres.items.reduce<FilterOption[]>((results, genre) => {\n      let value, selected = false;\n      if (selectedGenreIds.includes(genre.id)) {\n        value = selectedGenreIds.join(',');\n        selected = true;\n      }\n      else {\n        const newSelectedValues = [ ...selectedGenreIds, genre.id ];\n        value = newSelectedValues.join(',');\n      }\n\n      results.push({\n        name: genre.name,\n        value,\n        selected\n      });\n\n      return results;\n    }, []);\n\n    return {\n      type: FilterType.Genre,\n      title: jellyfin.getI18n('JELLYFIN_FILTER_GENRE_TITLE'),\n      placeholder: jellyfin.getI18n('JELLYFIN_FILTER_GENRE_PLACEHOLDER'),\n      field: 'genreIds',\n      icon: 'fa fa-music',\n      resettable: true,\n      options\n    };\n  }\n\n  async getDefaultSelection(): Promise<Record<string, any>> {\n    return {\n      genreIds: []\n    };\n  }\n}\n"]}