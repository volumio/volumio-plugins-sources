{"version":3,"file":"FilterFilterModel.js","sourceRoot":"","sources":["../../../../src/lib/model/filter/FilterFilterModel.ts"],"names":[],"mappings":";;;;;AAAA,sEAAuE;AACvE,6CAA4C;AAC5C,4EAA6C;AAC7C,6DAAqC;AACrC,+CAA8E;AAiB9E,MAAM,WAAW,GAAmD;IAClE,CAAC,qBAAU,CAAC,KAAK,CAAC,EAAE;QAClB,EAAE,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,mBAAU,CAAC,UAAU,EAAE;KAChE;IACD,CAAC,qBAAU,CAAC,MAAM,CAAC,EAAE;QACnB,EAAE,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,mBAAU,CAAC,UAAU,EAAE;KAChE;IACD,CAAC,qBAAU,CAAC,WAAW,CAAC,EAAE;QACxB,EAAE,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,mBAAU,CAAC,UAAU,EAAE;KAChE;IACD,CAAC,qBAAU,CAAC,IAAI,CAAC,EAAE;QACjB,EAAE,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,mBAAU,CAAC,UAAU,EAAE;QAC/D,EAAE,OAAO,EAAE,iBAAiB,EAAE,KAAK,EAAE,mBAAU,CAAC,QAAQ,EAAE;QAC1D,EAAE,OAAO,EAAE,mBAAmB,EAAE,KAAK,EAAE,mBAAU,CAAC,UAAU,EAAE;KAC/D;CACF,CAAC;AAEF,MAAqB,iBAAkB,SAAQ,mBAAS;IAEtD,KAAK,CAAC,SAAS,CAAC,MAAgC;QAC9C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACD,MAAM,cAAc,GAAG,MAAM,CAAC,gBAAgB,EAAE,OAAO,IAAI,EAAE,CAAC;QAC9D,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAiB,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACjF,IAAI,KAAK,EAAE,QAAQ,GAAG,KAAK,CAAC;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBACpC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjC,QAAQ,GAAG,IAAI,CAAC;aACjB;iBACI;gBACH,MAAM,iBAAiB,GAAG,CAAE,GAAG,cAAc,EAAE,CAAC,CAAC,KAAK,CAAE,CAAC;gBACzD,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,yBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;gBACjC,KAAK;gBACL,QAAQ;aACT,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO;YACL,IAAI,EAAE,wBAAU,CAAC,MAAM;YACvB,KAAK,EAAE,yBAAQ,CAAC,OAAO,CAAC,8BAA8B,CAAC;YACvD,WAAW,EAAE,yBAAQ,CAAC,OAAO,CAAC,oCAAoC,CAAC;YACnE,KAAK,EAAE,SAAS;YAChB,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,IAAI;YAChB,OAAO;SACR,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO;YACL,OAAO,EAAE,SAAS;SACnB,CAAC;IACJ,CAAC;CACF;AA3CD,oCA2CC","sourcesContent":["import { ItemFilter } from '@jellyfin/sdk/lib/generated-client/models';\nimport { EntityType } from '../../entities';\nimport jellyfin from '../../JellyfinContext';\nimport BaseModel from '../BaseModel';\nimport FilterModel, { Filter, FilterOption, FilterType } from './FilterModel';\n\nexport type FilterFilterItemType = EntityType.Album | EntityType.Artist |\n    EntityType.AlbumArtist | EntityType.Song;\n\nexport interface FilterFilterModelConfig {\n  itemType: FilterFilterItemType;\n  initialSelection?: {\n    filters?: string[]\n  };\n}\n\ninterface FilterSetEntry {\n  i18nKey: string;\n  value: ItemFilter.IsFavorite | ItemFilter.IsPlayed | ItemFilter.IsUnplayed\n}\n\nconst FILTER_SETS: Record<FilterFilterItemType, FilterSetEntry[]> = {\n  [EntityType.Album]: [\n    { i18nKey: 'JELLYFIN_FAVORITES', value: ItemFilter.IsFavorite }\n  ],\n  [EntityType.Artist]: [\n    { i18nKey: 'JELLYFIN_FAVORITES', value: ItemFilter.IsFavorite }\n  ],\n  [EntityType.AlbumArtist]: [\n    { i18nKey: 'JELLYFIN_FAVORITES', value: ItemFilter.IsFavorite }\n  ],\n  [EntityType.Song]: [\n    { i18nKey: 'JELLYFIN_FAVORITES', value: ItemFilter.IsFavorite },\n    { i18nKey: 'JELLYFIN_PLAYED', value: ItemFilter.IsPlayed },\n    { i18nKey: 'JELLYFIN_UNPLAYED', value: ItemFilter.IsUnplayed }\n  ]\n};\n\nexport default class FilterFilterModel extends BaseModel implements FilterModel {\n\n  async getFilter(config?: FilterFilterModelConfig): Promise<Filter> {\n    if (!config) {\n      throw Error('Missing config');\n    }\n    const selectedValues = config.initialSelection?.filters || [];\n    const options = FILTER_SETS[config.itemType].reduce<FilterOption[]>((results, f) => {\n      let value, selected = false;\n      if (selectedValues.includes(f.value)) {\n        value = selectedValues.join(',');\n        selected = true;\n      }\n      else {\n        const newSelectedValues = [ ...selectedValues, f.value ];\n        value = newSelectedValues.join(',');\n      }\n\n      results.push({\n        name: jellyfin.getI18n(f.i18nKey),\n        value,\n        selected\n      });\n\n      return results;\n    }, []);\n\n    return {\n      type: FilterType.Filter,\n      title: jellyfin.getI18n('JELLYFIN_FILTER_FILTER_TITLE'),\n      placeholder: jellyfin.getI18n('JELLYFIN_FILTER_FILTER_PLACEHOLDER'),\n      field: 'filters',\n      icon: 'fa fa-filter',\n      resettable: true,\n      options\n    };\n  }\n\n  async getDefaultSelection(): Promise<Record<string, any>> {\n    return {\n      filters: undefined\n    };\n  }\n}\n"]}