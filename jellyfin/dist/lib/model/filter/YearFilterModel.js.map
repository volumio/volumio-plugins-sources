{"version":3,"file":"YearFilterModel.js","sourceRoot":"","sources":["../../../../src/lib/model/filter/YearFilterModel.ts"],"names":[],"mappings":";;;;;AACA,4EAA6C;AAC7C,6DAA2D;AAC3D,+CAA8E;AAY9E,MAAqB,eAAgB,SAAQ,mBAAS;IAEpD,KAAK,CAAC,SAAS,CAAC,MAA8B;QAC5C,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,KAAK,CAAC,gBAAgB,CAAC,CAAC;SAC/B;QACD,MAAM,aAAa,GAAG,MAAM,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE,CAAC;QAC3D,MAAM,MAAM,GAAqB;YAC/B,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,CAAE,MAAM,CAAC,QAAQ,CAAE;SAC/B,CAAC;QACF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACxD,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,EAAE,MAAM,CAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE;YACzE,IAAI,KAAK,EAAE,QAAQ,GAAG,KAAK,CAAC;YAC5B,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACnC,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChC,QAAQ,GAAG,IAAI,CAAC;aACjB;iBACI;gBACH,MAAM,iBAAiB,GAAG,CAAE,GAAG,aAAa,EAAE,IAAI,CAAE,CAAC;gBACrD,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,OAAO,CAAC,IAAI,CAAC;gBACX,IAAI,EAAE,OAAO;gBACb,KAAK;gBACL,QAAQ;aACT,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO;YACL,IAAI,EAAE,wBAAU,CAAC,IAAI;YACrB,KAAK,EAAE,yBAAQ,CAAC,OAAO,CAAC,4BAA4B,CAAC;YACrD,WAAW,EAAE,yBAAQ,CAAC,OAAO,CAAC,kCAAkC,CAAC;YACjE,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,kBAAkB;YACxB,UAAU,EAAE,IAAI;YAChB,OAAO;SACR,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO;YACL,KAAK,EAAE,SAAS;SACjB,CAAC;IACJ,CAAC;CACF;AAjDD,kCAiDC","sourcesContent":["import { EntityType } from '../../entities';\nimport jellyfin from '../../JellyfinContext';\nimport BaseModel, { GetFiltersParams } from '../BaseModel';\nimport FilterModel, { Filter, FilterOption, FilterType } from './FilterModel';\n\nexport type YearFilterItemType = EntityType.Album | EntityType.Song;\n\nexport interface YearFilterModelConfig {\n  parentId: string;\n  itemType: YearFilterItemType,\n  initialSelection?: {\n    years?: string[]\n  };\n}\n\nexport default class YearFilterModel extends BaseModel implements FilterModel {\n\n  async getFilter(config?: YearFilterModelConfig): Promise<Filter> {\n    if (!config) {\n      throw Error('Missing config');\n    }\n    const selectedYears = config.initialSelection?.years || [];\n    const params: GetFiltersParams = {\n      parentId: config.parentId,\n      itemTypes: [ config.itemType ]\n    };\n    const apiFilters = await this.getFiltersFromApi(params);\n    const options = apiFilters.years?.reduce<FilterOption[]>((results, year) => {\n      let value, selected = false;\n      const yearStr = String(year);\n      if (selectedYears.includes(yearStr)) {\n        value = selectedYears.join(',');\n        selected = true;\n      }\n      else {\n        const newSelectedValues = [ ...selectedYears, year ];\n        value = newSelectedValues.join(',');\n      }\n\n      results.push({\n        name: yearStr,\n        value,\n        selected\n      });\n\n      return results;\n    }, []);\n\n    return {\n      type: FilterType.Year,\n      title: jellyfin.getI18n('JELLYFIN_FILTER_YEAR_TITLE'),\n      placeholder: jellyfin.getI18n('JELLYFIN_FILTER_YEAR_PLACEHOLDER'),\n      field: 'years',\n      icon: 'fa fa-calendar-o',\n      resettable: true,\n      options\n    };\n  }\n\n  async getDefaultSelection(): Promise<Record<string, any>> {\n    return {\n      years: undefined\n    };\n  }\n}\n"]}