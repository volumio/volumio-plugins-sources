{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/model/index.ts"],"names":[],"mappings":";;;;;;AACA,8DAAsC;AACtC,gEAAwC;AAExC,wEAAgD;AAChD,2EAAmD;AACnD,mFAA2D;AAC3D,iFAAyD;AACzD,+EAAuD;AACvD,+EAAuD;AACvD,gEAAwC;AACxC,8DAAsC;AACtC,oEAA4C;AAC5C,4DAAoC;AACpC,oEAA4C;AAE5C,IAAY,SAcX;AAdD,WAAY,SAAS;IACnB,kCAAqB,CAAA;IACrB,4BAAe,CAAA;IACf,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;IACjB,4BAAe,CAAA;IACf,0BAAa,CAAA;IACb,sCAAyB,CAAA;IACzB,8BAAiB,CAAA;IACjB,kCAAqB,CAAA;IACrB,wCAA2B,CAAA;IAC3B,sCAAyB,CAAA;IACzB,0CAA6B,CAAA;IAC7B,sCAAyB,CAAA;AAC3B,CAAC,EAdW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAcpB;AAED,MAAM,mBAAmB,GAAkC;IACzD,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,oBAAU;IAC7B,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,qBAAW;IAC/B,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,oBAAU;IAC7B,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAS;IAC3B,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,yBAAe;IACvC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,qBAAW;IAC/B,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,0BAAgB;IACzC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,yBAAe;IACvC,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,2BAAiB;IAC3C,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,yBAAe;CACxC,CAAC;AAEF,MAAqB,KAAK;IAexB,MAAM,CAAC,WAAW,CAAC,IAAS,EAAE,UAA4B;QACxD,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE;YAC7B,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC;SAClD;QACD,MAAM,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;IACvD,CAAC;CACF;AArBD,wBAqBC","sourcesContent":["import ServerConnection from '../connection/ServerConnection';\nimport AlbumModel from './AlbumModel';\nimport ArtistModel from './ArtistModel';\nimport BaseModel from './BaseModel';\nimport CollectionModel from './CollectionModel';\nimport AZFilterModel from './filter/AZFilterModel';\nimport FilterFilterModel from './filter/FilterFilterModel';\nimport GenreFilterModel from './filter/GenreFilterModel';\nimport SortFilterModel from './filter/SortFilterModel';\nimport YearFilterModel from './filter/YearFilterModel';\nimport FolderModel from './FolderModel';\nimport GenreModel from './GenreModel';\nimport PlaylistModel from './PlaylistModel';\nimport SongModel from './SongModel';\nimport UserViewModel from './UserViewModel';\n\nexport enum ModelType {\n  UserView = 'UserView',\n  Album = 'Album',\n  Playlist = 'Playlist',\n  Artist = 'Artist',\n  Genre = 'Genre',\n  Song = 'Song',\n  Collection = 'Collection',\n  Folder = 'Folder',\n  AZFilter = 'AZFilter',\n  GenreFilter = 'GenreFilter',\n  YearFilter = 'YearFilter',\n  FilterFilter = 'FilterFilter',\n  SortFilter = 'SortFilter'\n}\n\nconst MODEL_TYPE_TO_CLASS: Record<any, typeof BaseModel> = {\n  [ModelType.UserView]: UserViewModel,\n  [ModelType.Album]: AlbumModel,\n  [ModelType.Playlist]: PlaylistModel,\n  [ModelType.Artist]: ArtistModel,\n  [ModelType.Genre]: GenreModel,\n  [ModelType.Song]: SongModel,\n  [ModelType.Collection]: CollectionModel,\n  [ModelType.Folder]: FolderModel,\n  [ModelType.AZFilter]: AZFilterModel,\n  [ModelType.GenreFilter]: GenreFilterModel,\n  [ModelType.YearFilter]: YearFilterModel,\n  [ModelType.FilterFilter]: FilterFilterModel,\n  [ModelType.SortFilter]: SortFilterModel\n};\n\nexport default class Model {\n\n  static getInstance(type: ModelType.SortFilter, connection: ServerConnection): SortFilterModel;\n  static getInstance(type: ModelType.FilterFilter, connection: ServerConnection): FilterFilterModel;\n  static getInstance(type: ModelType.YearFilter, connection: ServerConnection): YearFilterModel;\n  static getInstance(type: ModelType.GenreFilter, connection: ServerConnection): GenreFilterModel;\n  static getInstance(type: ModelType.AZFilter, connection: ServerConnection): AZFilterModel;\n  static getInstance(type: ModelType.Folder, connection: ServerConnection): FolderModel;\n  static getInstance(type: ModelType.Collection, connection: ServerConnection): CollectionModel;\n  static getInstance(type: ModelType.Song, connection: ServerConnection): SongModel;\n  static getInstance(type: ModelType.Genre, connection: ServerConnection): GenreModel;\n  static getInstance(type: ModelType.Artist, connection: ServerConnection): ArtistModel;\n  static getInstance(type: ModelType.Playlist, connection: ServerConnection): PlaylistModel;\n  static getInstance(type: ModelType.Album, connection: ServerConnection): AlbumModel;\n  static getInstance(type: ModelType.UserView, connection: ServerConnection): UserViewModel;\n  static getInstance(type: any, connection: ServerConnection): BaseModel {\n    if (MODEL_TYPE_TO_CLASS[type]) {\n      return new MODEL_TYPE_TO_CLASS[type](connection);\n    }\n    throw Error(`Model not found for type ${ModelType}`);\n  }\n}\n"]}