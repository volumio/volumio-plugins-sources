{"version":3,"file":"CollectionModel.js","sourceRoot":"","sources":["../../../src/lib/model/CollectionModel.ts"],"names":[],"mappings":";;;;;AAAA,0CAAyC;AAMzC,4DAAwE;AACxE,uEAA+C;AAC/C,yEAAiD;AACjD,iFAAyD;AACzD,6EAAqD;AACrD,qEAA6C;AAM7C,MAAqB,eAAgB,SAAQ,mBAAS;IAEpD,cAAc,CAAC,MAAsB;QACnC,MAAM,MAAM,GAAG,IAAI,0BAAgB,EAAE,CAAC;QACtC,MAAM,cAAc,GAAG;YACrB,GAAG,MAAM;YACT,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,mBAAmB;YAC3B,SAAS,EAAE,WAAW;SACvB,CAAC;QACF,OAAO,IAAI,CAAC,eAAe,CAAa,cAAc,EAAE,MAAM,CAAC,CAAC;IAClE,CAAC;IAOD,kBAAkB,CAAC,MAAgC;QACjD,IAAI,MAAM,CAAC;QACX,QAAQ,MAAM,CAAC,QAAQ,EAAE;YACvB,KAAK,qBAAU,CAAC,KAAK;gBACnB,MAAM,GAAG,IAAI,qBAAW,EAAE,CAAC;gBAC3B,MAAM;YAER,KAAK,qBAAU,CAAC,MAAM;gBACpB,MAAM,GAAG,IAAI,sBAAY,CAAC,qBAAU,CAAC,MAAM,CAAC,CAAC;gBAC7C,MAAM;YAER,KAAK,qBAAU,CAAC,QAAQ;gBACtB,MAAM,GAAG,IAAI,wBAAc,EAAE,CAAC;gBAC9B,MAAM;YAER,KAAK,qBAAU,CAAC,IAAI;gBAClB,MAAM,GAAG,IAAI,oBAAU,EAAE,CAAC;gBAC1B,MAAM;YAER;gBACE,MAAM,GAAG,IAAI,CAAC;SACjB;QAED,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAClC;QAED,MAAM,gBAAgB,GAAmB;YACvC,GAAG,MAAM;YACT,SAAS,EAAE,KAAK;YAChB,MAAM,EAAE,EAAE;YACV,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAE,MAAM,CAAC,QAAQ,CAAE;SAC/B,CAAC;QAEF,IAAI,MAAM,CAAC,QAAQ,KAAK,qBAAU,CAAC,QAAQ,EAAE;YAC3C;;;;;eAKG;YACH,OAAO,gBAAgB,CAAC,SAAS,CAAC;YAClC,gBAAgB,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;SACzD;QAED,OAAO,IAAI,CAAC,eAAe,CAAmC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAC1F,CAAC;IAED,aAAa,CAAC,EAAU;QACtB,MAAM,MAAM,GAAG,IAAI,0BAAgB,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;CACF;AAvED,kCAuEC","sourcesContent":["import { EntityType } from '../entities';\nimport Album from '../entities/Album';\nimport Artist from '../entities/Artist';\nimport Collection from '../entities/Collection';\nimport Playlist from '../entities/Playlist';\nimport Song from '../entities/Song';\nimport BaseModel, { GetItemsParams, GetItemsResult } from './BaseModel';\nimport AlbumParser from './parser/AlbumParser';\nimport ArtistParser from './parser/ArtistParser';\nimport CollectionParser from './parser/CollectionParser';\nimport PlaylistParser from './parser/PlaylistParser';\nimport SongParser from './parser/SongParser';\n\nexport interface GetCollectionItemsParams extends Omit<GetItemsParams, 'itemTypes'> {\n  itemType: EntityType.Album | EntityType.Artist | EntityType.Playlist | EntityType.Song;\n}\n\nexport default class CollectionModel extends BaseModel {\n\n  getCollections(params: GetItemsParams): Promise<GetItemsResult<Collection>> {\n    const parser = new CollectionParser();\n    const overrideParams = {\n      ...params,\n      recursive: false,\n      sortBy: 'IsFolder,SortName',\n      sortOrder: 'Ascending'\n    };\n    return this.getItemsFromAPI<Collection>(overrideParams, parser);\n  }\n\n  getCollectionItems(params: GetCollectionItemsParams): Promise<GetItemsResult<Album | Artist | Playlist | Song>>;\n  getCollectionItems(params: GetCollectionItemsParams & {itemType: EntityType.Song}): Promise<GetItemsResult<Song>>;\n  getCollectionItems(params: GetCollectionItemsParams & {itemType: EntityType.Playlist}): Promise<GetItemsResult<Playlist>>;\n  getCollectionItems(params: GetCollectionItemsParams & {itemType: EntityType.Artist}): Promise<GetItemsResult<Artist>>;\n  getCollectionItems(params: GetCollectionItemsParams & {itemType: EntityType.Album}): Promise<GetItemsResult<Album>>;\n  getCollectionItems(params: GetCollectionItemsParams): Promise<GetItemsResult<Album | Artist | Playlist | Song>> {\n    let parser;\n    switch (params.itemType) {\n      case EntityType.Album:\n        parser = new AlbumParser();\n        break;\n\n      case EntityType.Artist:\n        parser = new ArtistParser(EntityType.Artist);\n        break;\n\n      case EntityType.Playlist:\n        parser = new PlaylistParser();\n        break;\n\n      case EntityType.Song:\n        parser = new SongParser();\n        break;\n\n      default:\n        parser = null;\n    }\n\n    if (!parser) {\n      throw Error('Unknown item type');\n    }\n\n    const normalizedParams: GetItemsParams = {\n      ...params,\n      recursive: false,\n      sortBy: '',\n      sortOrder: '',\n      itemTypes: [ params.itemType ]\n    };\n\n    if (params.itemType === EntityType.Playlist) {\n      /**\n       * We can't pass `itemType` like we did for other entity types. Jellyfin will\n       * somehow return the wrong data. Instead, we use `excludeItemTypes`.\n       * We assume the items returned are playlists, because it seems you can only add\n       * Albums, Artists and Playlists to a Collection.\n       */\n      delete normalizedParams.itemTypes;\n      normalizedParams.excludeItemTypes = 'Album,Artist,Song';\n    }\n\n    return this.getItemsFromAPI<Album | Artist | Playlist | Song>(normalizedParams, parser);\n  }\n\n  getCollection(id: string) {\n    const parser = new CollectionParser();\n    return this.getItemFromApi({ itemId: id }, parser);\n  }\n}\n"]}