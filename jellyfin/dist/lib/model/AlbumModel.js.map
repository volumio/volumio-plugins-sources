{"version":3,"file":"AlbumModel.js","sourceRoot":"","sources":["../../../src/lib/model/AlbumModel.ts"],"names":[],"mappings":";;;;;AAAA,yEAAwE;AACxE,0CAAyC;AAEzC,4DAAwE;AACxE,uEAA+C;AAO/C,MAAqB,UAAW,SAAQ,mBAAS;IAE/C,SAAS,CAAC,MAAsB;QAC9B,MAAM,MAAM,GAAG,IAAI,qBAAW,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,eAAe,CAAQ,EAAE,GAAG,MAAM,EAAE,SAAS,EAAE,qBAAU,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,CAAC;IACzF,CAAC;IAED,QAAQ,CAAC,EAAU;QACjB,MAAM,MAAM,GAAG,IAAI,qBAAW,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,MAA8B;QACnD,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;YACnC,MAAM,KAAK,CAAC,SAAS,CAAC,CAAC;SACxB;QACD,MAAM,MAAM,GAAG,IAAI,qBAAW,EAAE,CAAC;QACjC,MAAM,UAAU,GAAG,IAAA,2BAAa,EAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,gBAAgB,CAAC;YACjD,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;YACvB,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACpC,gBAAgB,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;YACjE,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,EAAE;SAC1B,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,MAAM,CAAC,CAAC;IAC/D,CAAC;CACF;AA1BD,6BA0BC","sourcesContent":["import { getLibraryApi } from '@jellyfin/sdk/lib/utils/api/library-api';\nimport { EntityType } from '../entities';\nimport Album from '../entities/Album';\nimport BaseModel, { GetItemsParams, GetItemsResult } from './BaseModel';\nimport AlbumParser from './parser/AlbumParser';\n\nexport interface GetSimilarAlbumsParams {\n  album: Album,\n  limit?: number\n}\n\nexport default class AlbumModel extends BaseModel {\n\n  getAlbums(params: GetItemsParams): Promise<GetItemsResult<Album>> {\n    const parser = new AlbumParser();\n    return this.getItemsFromAPI<Album>({ ...params, itemTypes: EntityType.Album }, parser);\n  }\n\n  getAlbum(id: string) {\n    const parser = new AlbumParser();\n    return this.getItemFromApi({ itemId: id }, parser);\n  }\n\n  async getSimilarAlbums(params: GetSimilarAlbumsParams): Promise<Album[]> {\n    if (!this.connection.auth?.User?.Id) {\n      throw Error('No auth');\n    }\n    const parser = new AlbumParser();\n    const libraryApi = getLibraryApi(this.connection.api);\n    const response = await libraryApi.getSimilarAlbums({\n      itemId: params.album.id,\n      userId: this.connection.auth.User.Id,\n      excludeArtistIds: params.album.artists.map((artist) => artist.id),\n      limit: params.limit || 12\n    });\n    return this.parseItemDtos(response.data.Items || [], parser);\n  }\n}\n"]}