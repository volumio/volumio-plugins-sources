{"version":3,"file":"SongParser.js","sourceRoot":"","sources":["../../../../src/lib/model/parser/SongParser.ts"],"names":[],"mappings":";;;;;AAEA,6CAA4C;AAE5C,8DAAsC;AAEtC,MAAqB,UAAW,SAAQ,oBAAgB;IAEtD,KAAK,CAAC,QAAQ,CAAC,IAAiB,EAAE,GAAQ;QACxC,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,EAAE;YACT,OAAO,IAAI,CAAC;SACb;QAED,MAAM,OAAO,GAAoB,IAAI,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;YAClE,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QAE9D,IAAI,cAAc,GAAG,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,oBAAoB,EAAE;YAC7C,MAAM,kBAAkB,GAAG;gBACzB,EAAE,EAAE,IAAI,CAAC,OAAO;gBAChB,SAAS,EAAE;oBACT,OAAO,EAAE,IAAI,CAAC,oBAAoB;iBACnC;aACF,CAAC;YACF,cAAc,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;SACvE;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACzC,EAAE,EAAE,IAAI,CAAC,OAAO;YAChB,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,SAAS,EAAE,cAAc;SAC1B,CAAC,CAAC,CAAC,IAAI,CAAC;QAET,MAAM,MAAM,GAAS;YACnB,GAAG,IAAI;YACP,IAAI,EAAE,qBAAU,CAAC,IAAI;YACrB,OAAO;YACP,KAAK;YACL,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU;SACtC,CAAC;QAEF,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;SACzC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA7CD,6BA6CC","sourcesContent":["import { Api } from '@jellyfin/sdk';\nimport { BaseItemDto } from '@jellyfin/sdk/lib/generated-client/models/base-item-dto';\nimport { EntityType } from '../../entities';\nimport Song from '../../entities/Song';\nimport BaseParser from './BaseParser';\n\nexport default class SongParser extends BaseParser<Song> {\n\n  async parseDto(data: BaseItemDto, api: Api): Promise<Song | null> {\n    const base = await super.parseDto(data, api);\n    if (!base) {\n      return null;\n    }\n\n    const artists: Song['artists'] = data.ArtistItems?.map((artist) => ({\n      id: artist.Id,\n      name: artist.Name\n    }) as any).filter((artist) => artist.id && artist.name) || [];\n\n    let albumThumbnail = null;\n    if (data.AlbumId && data.AlbumPrimaryImageTag) {\n      const albumThumbnailData = {\n        Id: data.AlbumId,\n        ImageTags: {\n          Primary: data.AlbumPrimaryImageTag\n        }\n      };\n      albumThumbnail = await super.getThumbnailUrl(albumThumbnailData, api);\n    }\n\n    const album = data.Album && data.AlbumId ? {\n      id: data.AlbumId,\n      name: data.Album,\n      thumbnail: albumThumbnail\n    } : null;\n\n    const result: Song = {\n      ...base,\n      type: EntityType.Song,\n      artists,\n      album,\n      duration: data.RunTimeTicks ? this.ticksToSeconds(data.RunTimeTicks) : 0,\n      favorite: !!data.UserData?.IsFavorite\n    };\n\n    if (data.MediaSources) {\n      result.mediaSources = data.MediaSources;\n    }\n\n    return result;\n  }\n}\n"]}