{"version":3,"file":"BaseParser.js","sourceRoot":"","sources":["../../../../src/lib/model/parser/BaseParser.ts"],"names":[],"mappings":";;AAEA,qFAAiF;AAGjF,6CAA4C;AAE5C,MAA8B,UAAU;IAEtC,KAAK,CAAC,QAAQ,CAAC,IAAiB,EAAE,GAAQ;QACxC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YAC1B,OAAO,IAAI,CAAC;SACb;QAED,MAAM,MAAM,GAAe;YACzB,IAAI,EAAE,qBAAU,CAAC,OAAO;YACxB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,SAAS,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,CAAC;SACjD,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,IAAiB,EAAE,GAAQ;QAC/C,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,EAAE;YACxC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,sBAAS,CAAC,OAAO,EAAE;YACrD,QAAQ,EAAE,GAAG;YACb,SAAS,EAAE,GAAG;YACd,OAAO,EAAE,EAAE;SACZ,CAAC,IAAI,IAAI,CAAC;IACb,CAAC;IAES,cAAc,CAAC,KAAa;QACpC,IAAI,KAAK,EAAE;YACT,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC;SACrC;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAES,SAAS,CAAC,IAAiB;QACnC,OAAO,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACtC,EAAE,EAAE,KAAK,CAAC,EAAE;YACZ,IAAI,EAAE,KAAK,CAAC,IAAI;SACjB,CAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAC7D,CAAC;CACF;AA1CD,6BA0CC","sourcesContent":["import { Api } from '@jellyfin/sdk';\nimport { BaseItemDto } from '@jellyfin/sdk/lib/generated-client/models/base-item-dto';\nimport { ImageType } from '@jellyfin/sdk/lib/generated-client/models/image-type';\nimport Parser from './Parser';\nimport BaseEntity from '../../entities/BaseEntity';\nimport { EntityType } from '../../entities';\n\nexport default abstract class BaseParser<T extends BaseEntity> implements Parser<BaseEntity> {\n\n  async parseDto(data: BaseItemDto, api: Api): Promise<T | BaseEntity | null> {\n    if (!data.Id || !data.Name) {\n      return null;\n    }\n\n    const result: BaseEntity = {\n      type: EntityType.Unknown,\n      id: data.Id,\n      name: data.Name,\n      thumbnail: await this.getThumbnailUrl(data, api)\n    };\n\n    return result;\n  }\n\n  async getThumbnailUrl(data: BaseItemDto, api: Api): Promise<string | null> {\n    if (!data.Id || !data.ImageTags?.Primary) {\n      return null;\n    }\n\n    return api.getItemImageUrl(data.Id, ImageType.Primary, {\n      maxWidth: 500,\n      maxHeight: 500,\n      quality: 90\n    }) || null;\n  }\n\n  protected ticksToSeconds(ticks: number) {\n    if (ticks) {\n      return Math.floor(ticks / 10000000);\n    }\n    return 0;\n  }\n\n  protected getGenres(data: BaseItemDto): { id: string, name: string }[] {\n    return data.GenreItems?.map((genre) => ({\n      id: genre.Id,\n      name: genre.Name\n    }) as any).filter((genre) => genre.id && genre.name) || [];\n  }\n}\n"]}