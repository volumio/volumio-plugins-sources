{"version":3,"file":"FolderContentParser.js","sourceRoot":"","sources":["../../../../src/lib/model/parser/FolderContentParser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA,6FAAwF;AACxF,6CAA4C;AAI5C,gEAAwC;AACxC,kEAA0C;AAC1C,8DAAsC;AACtC,kEAA0C;AAK1C,MAAqB,mBAAoB,SAAQ,oBAA6B;IAG5E;QACE,KAAK,EAAE,CAAC;QAHV,+CAA4D;QAI1D,uBAAA,IAAI,gCAAY,EAAE,MAAA,CAAC;IACrB,CAAC;IAED,SAAS,CAAC,OAAqB;QAC7B,IAAI,CAAC,uBAAA,IAAI,oCAAS,CAAC,OAAO,CAAC,EAAE;YAC3B,QAAQ,OAAO,EAAE;gBACf,KAAK,6BAAY,CAAC,MAAM,CAAC;gBACzB,KAAK,6BAAY,CAAC,gBAAgB;oBAChC,uBAAA,IAAI,oCAAS,CAAC,OAAO,CAAC,GAAG,IAAI,sBAAY,EAAE,CAAC;oBAC5C,MAAM;gBACR,KAAK,6BAAY,CAAC,UAAU;oBAC1B,uBAAA,IAAI,oCAAS,CAAC,OAAO,CAAC,GAAG,IAAI,qBAAW,EAAE,CAAC;oBAC3C,MAAM;gBACR,KAAK,6BAAY,CAAC,WAAW;oBAC3B,uBAAA,IAAI,oCAAS,CAAC,OAAO,CAAC,GAAG,IAAI,sBAAY,CAAC,qBAAU,CAAC,MAAM,CAAC,CAAC;oBAC7D,MAAM;gBACR;oBACE,OAAO,IAAI,CAAC;aACf;SACF;QACD,OAAO,uBAAA,IAAI,oCAAS,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAAiB,EAAE,GAAQ;QACxC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5D,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpC,CAAC;CACF;AAnCD,sCAmCC","sourcesContent":["import { Api } from '@jellyfin/sdk';\nimport { BaseItemDto } from '@jellyfin/sdk/lib/generated-client/models/base-item-dto';\nimport { BaseItemKind } from '@jellyfin/sdk/lib/generated-client/models/base-item-kind';\nimport { EntityType } from '../../entities';\nimport Album from '../../entities/Album';\nimport Artist from '../../entities/Artist';\nimport Folder from '../../entities/Folder';\nimport AlbumParser from './AlbumParser';\nimport ArtistParser from './ArtistParser';\nimport BaseParser from './BaseParser';\nimport FolderParser from './FolderParser';\nimport Parser from './Parser';\n\nexport type FolderContentType = Artist | Album | Folder;\n\nexport default class FolderContentParser extends BaseParser<FolderContentType> {\n  #parsers: {[k in BaseItemKind]?: Parser<FolderContentType>};\n\n  constructor() {\n    super();\n    this.#parsers = {};\n  }\n\n  getParser(dtoType: BaseItemKind): Parser<FolderContentType> | null {\n    if (!this.#parsers[dtoType]) {\n      switch (dtoType) {\n        case BaseItemKind.Folder:\n        case BaseItemKind.CollectionFolder:\n          this.#parsers[dtoType] = new FolderParser();\n          break;\n        case BaseItemKind.MusicAlbum:\n          this.#parsers[dtoType] = new AlbumParser();\n          break;\n        case BaseItemKind.MusicArtist:\n          this.#parsers[dtoType] = new ArtistParser(EntityType.Artist);\n          break;\n        default:\n          return null;\n      }\n    }\n    return this.#parsers[dtoType] || null;\n  }\n\n  async parseDto(data: BaseItemDto, api: Api): Promise<FolderContentType | null> {\n    const parser = data.Type ? this.getParser(data.Type) : null;\n    if (!parser) {\n      return null;\n    }\n    return parser.parseDto(data, api);\n  }\n}\n"]}