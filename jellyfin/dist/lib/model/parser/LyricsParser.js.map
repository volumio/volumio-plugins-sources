{"version":3,"file":"LyricsParser.js","sourceRoot":"","sources":["../../../../src/lib/model/parser/LyricsParser.ts"],"names":[],"mappings":";;AAGA,MAAqB,YAAY;IAE/B,KAAK,CAAC,QAAQ,CAAC,IAAc;QAC3B;;;;WAIG;QACH,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;QACvE,IAAI,QAAQ,EAAE;YACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACvC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE;gBACrB,0BAA0B;gBAC1B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;aAC3C,CAAC,CAAC,IAAI,EAAE,CAAC;YACV,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,OAAO;oBACL,IAAI,EAAE,QAAQ;oBACd,KAAK;iBACN,CAAC;aACH;SACF;aACI;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,MAAM,CAAW,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBAC3D,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;oBAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,OAAO;oBACL,IAAI,EAAE,OAAO;oBACb,KAAK;iBACN,CAAC;aACH;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAzCD,+BAyCC","sourcesContent":["import { LyricDto } from '@jellyfin/sdk/lib/generated-client/models/lyric-dto';\nimport { MetadataLyrics } from 'now-playing-common';\n\nexport default class LyricsParser {\n\n  async parseDto(data: LyricDto): Promise<MetadataLyrics | null> {\n    /**\n     * LyricDto supposedly has `Metadata.IsSynced` property but\n     * `Metadata` is empty (as of v10.9.6). We need to test by\n     * looping through each line of lyrics.\n     */\n    if (!data.Lyrics) {\n      return null;\n    }\n    const isSynced = data.Lyrics.every((line) => line.Start !== undefined);\n    if (isSynced) {\n      const lines = data.Lyrics.map((line) => ({\n        text: line.Text || '',\n        // Convert to milliseconds\n        start: line.Start ? line.Start / 10000 : 0\n      })) || [];\n      if (lines.length > 0) {\n        return {\n          type: 'synced',\n          lines\n        };\n      }\n    }\n    else {\n      const lines = data.Lyrics?.reduce<string[]>((result, line) => {\n        if (line.Text !== undefined) {\n          result.push(line.Text);\n        }\n        return result;\n      }, []) || [];\n      if (lines.length > 0) {\n        return {\n          type: 'plain',\n          lines\n        };\n      }\n    }\n    return null;\n  }\n}\n"]}