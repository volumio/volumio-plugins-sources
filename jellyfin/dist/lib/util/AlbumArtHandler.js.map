{"version":3,"file":"AlbumArtHandler.js","sourceRoot":"","sources":["../../../src/lib/util/AlbumArtHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Album, Artist, EntityType, Song } from '../entities';\nimport BaseEntity from '../entities/BaseEntity';\nimport UserView, { UserViewType } from '../entities/UserView';\nimport jellyfin from '../JellyfinContext';\n\ninterface AlbumArtPluginParams {\n  album?: string;\n  artist?: string;\n}\n\nexport default class AlbumArtHandler {\n\n  #albumArtPlugin;\n\n  constructor() {\n    this.#albumArtPlugin = jellyfin.getAlbumArtPlugin();\n  }\n\n  getAlbumArtUri<T extends BaseEntity>(item: T): string {\n    if (item.thumbnail) {\n      return item.thumbnail;\n    }\n    else if (item.type === EntityType.Song) {\n      const song = item as unknown as Song;\n      if (song.album?.thumbnail) {\n        return song.album.thumbnail;\n      }\n    }\n\n    const baseImgPath = 'music_service/jellyfin/dist/assets/images/';\n    let url;\n    let defaultImg;\n\n    // UserView - playlists\n    if (item.type === EntityType.UserView && (item as UserView).userViewType === UserViewType.Playlists) {\n      defaultImg = 'playlist.png';\n    }\n    // Library\n    else if (item.type === EntityType.UserView && (item as UserView).userViewType === UserViewType.Library) {\n      defaultImg = 'album.png';\n    }\n    // Folder\n    else if ((item.type === EntityType.UserView && (item as UserView).userViewType === UserViewType.Folders) ||\n      item.type === EntityType.Folder || item.type === EntityType.CollectionFolder) {\n      defaultImg = 'folder.png';\n    }\n    // Album - fetch from web if possible (using AlbumArt plugin)\n    else if (item.type === EntityType.Album) {\n      const album = item as unknown as Album;\n      if (album.albumArtist) {\n        url = this.#getAlbumArtWithPlugin({\n          album: album.name,\n          artist: album.albumArtist\n        });\n      }\n      defaultImg = 'album.png';\n    }\n    // Artist - fetch from web if possible (using AlbumArt plugin)\n    else if (item.type === EntityType.Artist || item.type === EntityType.AlbumArtist) {\n      url = this.#getAlbumArtWithPlugin({\n        artist: (item as unknown as Artist).name\n      });\n      defaultImg = 'avatar.png';\n    }\n    // Playlist\n    else if (item.type === EntityType.Playlist) {\n      defaultImg = 'playlist.png';\n    }\n    // Genre\n    else if (item.type === EntityType.Genre) {\n      defaultImg = 'genre.png';\n    }\n    // Song - get art of album\n    else if (item.type === EntityType.Song) {\n      const song = item as unknown as Song;\n      if (song.album?.name && song.artists?.[0]?.name) {\n        url = this.#getAlbumArtWithPlugin({\n          album: song.album.name,\n          artist: song.artists[0].name\n        });\n      }\n      defaultImg = 'song.png';\n    }\n    else {\n      url = '/albumart';\n    }\n\n    if (defaultImg) {\n      url = (url ? `${url}&` : '/albumart?');\n      url += `sourceicon=${encodeURIComponent(baseImgPath + defaultImg)}`;\n    }\n\n    return url;\n  }\n\n  #getAlbumArtWithPlugin(data: AlbumArtPluginParams) {\n    return this.#albumArtPlugin.getAlbumArt(data);\n  }\n}\n"]}