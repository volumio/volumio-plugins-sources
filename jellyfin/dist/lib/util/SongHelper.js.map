{"version":3,"file":"SongHelper.js","sourceRoot":"","sources":["../../../src/lib/util/SongHelper.ts"],"names":[],"mappings":";;;;;AAGA,+GAAuF;AACvF,+FAAuE;AAEvE,oCAAqC;AAQrC,MAAqB,UAAU;IAE7B,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,GAAW,EAAE,QAAiB,EAAE,iBAAoC;QAChG,MAAM,OAAO,GAAG,MAAM,4BAAkB,CAAC,UAAU,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;QAC5E,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC;QAC1C,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,MAAM,EAAE;YAClD,MAAM,KAAK,CAAC,sCAAsC,GAAG,EAAE,CAAC,CAAC;SAC1D;QACD,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,cAAuB,CAAC;QAC5B,IAAI,QAAQ,EAAE;YACZ,cAAc,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SACvD;aACI;YACH,cAAc,GAAG,MAAM,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;SACzD;QACD,IAAI,cAAc,KAAK,QAAQ,EAAE;YAC/B,MAAM,KAAK,CAAC,2DAA2D,CAAC,CAAC;SAC1E;QACD,OAAO;YACL,MAAM;YACN,YAAY,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,gBAAgB,CAAC;YACpE,QAAQ,EAAE,cAAc;SACzB,CAAC;IACJ,CAAC;IAED,wBAAwB;IACxB,sDAAsD;IACtD,MAAM,CAAC,eAAe,CAAC,UAAyB,EAAE,UAAmC;QACnF,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;YAClC,OAAO,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;SACxD;QACD,IAAI,UAAU,EAAE;YACd,MAAM,QAAQ,GAAa;gBACzB,IAAI,EAAE,MAAM;gBACZ,MAAM,EAAE,UAAU;aACnB,CAAC;YACF,OAAO,YAAY,UAAU,CAAC,EAAE,IAAI,oBAAU,CAAC,2BAA2B,CAAC,QAAQ,CAAC,EAAE,CAAC;SACxF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAzCD,6BAyCC","sourcesContent":["import ConnectionManager from '../connection/ConnectionManager';\nimport ServerConnection from '../connection/ServerConnection';\nimport { SongView } from '../controller/browse/view-handlers/SongViewHandler';\nimport ViewHandlerFactory from '../controller/browse/view-handlers/ViewHandlerFactory';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\nimport { Song } from '../entities';\nimport { ModelType } from '../model';\n\nexport interface SetSongFavoriteResult {\n  songId: string,\n  canonicalUri: string | null,\n  favorite: boolean\n}\n\nexport default class SongHelper {\n\n  static async setFavoriteByUri(uri: string, favorite: boolean, connectionManager: ConnectionManager): Promise<SetSongFavoriteResult> {\n    const handler = await ViewHandlerFactory.getHandler(uri, connectionManager);\n    const songId = handler.currentView.songId;\n    if (handler.currentView.name !== 'song' || !songId) {\n      throw Error(`Failed to obtain song Id from uri: ${uri}`);\n    }\n    const songModel = handler.getModel(ModelType.Song);\n    let favoriteResult: boolean;\n    if (favorite) {\n      favoriteResult = await songModel.markFavorite(songId);\n    }\n    else {\n      favoriteResult = await songModel.unmarkFavorite(songId);\n    }\n    if (favoriteResult !== favorite) {\n      throw Error('Updated status in response does not match value requested');\n    }\n    return {\n      songId,\n      canonicalUri: this.getCanonicalUri(songId, handler.serverConnection),\n      favorite: favoriteResult\n    };\n  }\n\n  // Canonical URI format:\n  // Jellyfin/{username}@{serverId}/song@songId={songId}\n  static getCanonicalUri(songTarget: Song | string, connection: ServerConnection | null): string | null {\n    if (typeof songTarget === 'object') {\n      return this.getCanonicalUri(songTarget.id, connection);\n    }\n    if (connection) {\n      const songView: SongView = {\n        name: 'song',\n        songId: songTarget\n      };\n      return `jellyfin/${connection.id}/${ViewHelper.constructUriSegmentFromView(songView)}`;\n    }\n    return null;\n  }\n}\n"]}