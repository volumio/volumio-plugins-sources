{"version":3,"file":"JellyfinNowPlayingMetadataProvider.js","sourceRoot":"","sources":["../../../src/lib/util/JellyfinNowPlayingMetadataProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kDAA4C;AAE5C,+FAAuE;AACvE,kEAA0C;AAC1C,yEAA0C;AAE1C,MAAqB,kCAAkC;IAMrD,YAAY,iBAAoC;QAFhD,wEAAsC;QAGpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,uBAAA,IAAI,yDAAsB,iBAAiB,MAAA,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,SAAiB,EAAE,WAAoB,EAAE,WAAoB,EAAE,GAAY;QAC3F,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,2DAA2D,GAAG,EAAE,CAAC,CAAC;QAC5F,IAAI,CAAC,GAAG,EAAE;YACR,yBAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;YACjG,OAAO,IAAI,CAAC;SACb;QACD,MAAM,KAAK,GAAG,oBAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,IAAI,KAAK,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YACtE,yBAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,0FAA0F,CAAC,CAAC;YACvH,OAAO,IAAI,CAAC;SACb;QACD,MAAM,UAAU,GAAG,MAAM,sBAAY,CAAC,mBAAmB,CAAC,WAAW,EAAE,uBAAA,IAAI,6DAAmB,CAAC,CAAC;QAChG,IAAI,CAAC,UAAU,EAAE;YACf,yBAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,qFAAqF,CAAC,CAAC;YAClH,OAAO,IAAI,CAAC;SACb;QACD,MAAM,KAAK,GAAG,eAAK,CAAC,WAAW,CAAC,iBAAS,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC5D,IAAI,MAAM,GAA0B,IAAI,CAAC;QACzC,IAAI;YACF,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;SACpD;QACD,OAAO,KAAU,EAAE;YACjB,yBAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,qCAAqC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;SACnH;QACD,IAAI,MAAM,EAAE;YACV,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,0DAA0D,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;SACrG;aACI;YACH,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;SACnF;QACD,OAAO;YACL,KAAK,EAAE,SAAS;YAChB,MAAM;SACP,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;CAEF;AAxDD,qDAwDC","sourcesContent":["import { MetadataAlbumInfo, MetadataArtistInfo, MetadataSongInfo, MetadataLyrics, NowPlayingMetadataProvider } from 'now-playing-common';\nimport Model, { ModelType } from '../model';\nimport ConnectionManager from '../connection/ConnectionManager';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\nimport ServerHelper from './ServerHelper';\nimport jellyfin from '../JellyfinContext';\n\nexport default class JellyfinNowPlayingMetadataProvider implements NowPlayingMetadataProvider {\n\n  version: '1.0.0';\n\n  #connectionManager: ConnectionManager;\n\n  constructor(connectionManager: ConnectionManager) {\n    this.version = '1.0.0';\n    this.#connectionManager = connectionManager;\n  }\n\n  async getSongInfo(songTitle: string, _albumTitle?: string, _artistName?: string, uri?: string): Promise<MetadataSongInfo | null> {\n    jellyfin.getLogger().info(`[jellyfin] Fetch song info for Now Playing plugin. URI: ${uri}`);\n    if (!uri) {\n      jellyfin.getLogger().error('[jellyfin] Error fetching song info for Now Playing plugin: no URI');\n      return null;\n    }\n    const views = ViewHelper.getViewsFromUri(uri);\n    const currentView = views.pop();\n    if (!currentView || currentView.name !== 'song' || !currentView.songId) {\n      jellyfin.getLogger().error('[jellyfin] Error fetching song info for Now Playing plugin: URI does not point to a song');\n      return null;\n    }\n    const connection = await ServerHelper.getConnectionByView(currentView, this.#connectionManager);\n    if (!connection) {\n      jellyfin.getLogger().error('[jellyfin] Error fetching song info for Now Playing plugin: no connection to server');\n      return null;\n    }\n    const model = Model.getInstance(ModelType.Song, connection);\n    let lyrics: MetadataLyrics | null = null;\n    try {\n      lyrics = await model.getLyrics(currentView.songId);\n    }\n    catch (error: any) {\n      jellyfin.getLogger().error(`[jellyfin] Error fetching lyrics: ${error instanceof Error ? error.message : error}`);\n    }\n    if (lyrics) {\n      jellyfin.getLogger().info(`[jellyfin] Fetched lyrics for Now Playing plugin (type ${lyrics.type})`);\n    }\n    else {\n      jellyfin.getLogger().info('[jellyfin] Lyrics unavailable for Now Playing plugin');\n    }\n    return {\n      title: songTitle,\n      lyrics\n    };\n  }\n\n  async getAlbumInfo(): Promise<MetadataAlbumInfo | null> {\n    return null;\n  }\n\n  async getArtistInfo(): Promise<MetadataArtistInfo | null> {\n    return null;\n  }\n\n}\n"]}