{"version":3,"file":"ServerHelper.js","sourceRoot":"","sources":["../../../src/lib/util/ServerHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityType } from '../entities';\nimport Server from '../entities/Server';\nimport jellyfin from '../JellyfinContext';\n\n// An item in the `servers` array stored in plugin config.\nexport interface ServerConfEntry {\n  url: string;\n  username: string;\n  password: string;\n}\n\nexport default class ServerHelper {\n\n  static getServersFromConfig(): ServerConfEntry[] {\n    return jellyfin.getConfigValue<ServerConfEntry[]>('servers', [], true);\n  }\n\n  static fetchPasswordFromConfig(server: Server, username: string): string {\n    const serverConfEntries = this.getServersFromConfig();\n    const serverConf = serverConfEntries.find(\n      (conf) => this.getConnectionUrl(conf.url) === server.connectionUrl && conf.username === username);\n    return serverConf?.password || '';\n  }\n\n  static hasServerConfig(username: string, host: string): boolean {\n    const matchUrl = this.getConnectionUrl(host);\n    const serverConfEntries = this.getServersFromConfig();\n    const serverConf = serverConfEntries.find(\n      (conf) => this.getConnectionUrl(conf.url) === matchUrl && conf.username === username);\n    return !!serverConf;\n  }\n\n  static getConnectionUrl(url: string): string {\n    const urlObj = new URL(url);\n    if (urlObj.hostname === 'localhost' || urlObj.hostname === '127.0.0.1') {\n      const deviceUrlObj = new URL(jellyfin.getDeviceInfo().host);\n      urlObj.hostname = deviceUrlObj.hostname;\n    }\n    const sanitized = urlObj.toString();\n    if (sanitized.endsWith('/')) {\n      return sanitized.substring(0, sanitized.length - 1);\n    }\n    return sanitized;\n  }\n\n  static getOnlineServerByIdAndUsername(id: string, username: string): Server | null {\n    const onlineServers = jellyfin.get<Server[]>('onlineServers', []);\n    const serversMatchingId = onlineServers.filter((server) => server.id === id);\n    if (serversMatchingId.length === 0) {\n      return null;\n    }\n    const serverConfEntries = ServerHelper.getServersFromConfig();\n    const result = serversMatchingId.find((server) => serverConfEntries.find(\n      (conf) => ServerHelper.getConnectionUrl(conf.url) === server.connectionUrl && conf.username === username));\n\n    return result || null;\n  }\n\n  static generateConnectionId(username: string, serverId: string): string;\n  static generateConnectionId(username: string, server: Server): string;\n  static generateConnectionId(username: string, serverTarget: string | Server): string {\n    if (typeof serverTarget === 'string') {\n      return `${encodeURIComponent(username)}@${encodeURIComponent(serverTarget)}`;\n    }\n    else if (typeof serverTarget === 'object' && serverTarget.type === EntityType.Server) {\n      return this.generateConnectionId(username, serverTarget.id);\n    }\n    throw TypeError('serverTarget must be server Id (string) or object meeting Server interface constraint');\n  }\n}\n"]}