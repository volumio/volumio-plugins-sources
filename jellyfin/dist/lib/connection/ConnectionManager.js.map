{"version":3,"file":"ConnectionManager.js","sourceRoot":"","sources":["../../../src/lib/connection/ConnectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport { ClientInfo, DeviceInfo, Jellyfin as JellyfinSdk } from '@jellyfin/sdk';\nimport ServerConnection from './ServerConnection';\nimport Server from '../entities/Server';\nimport jellyfin from '../JellyfinContext';\nimport ServerHelper from '../util/ServerHelper';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface PasswordFetch {\n  (server: Server, username: string): string;\n}\n\nexport interface JellyfinSdkInitInfo {\n  clientInfo: ClientInfo;\n  deviceInfo: DeviceInfo;\n}\n\nexport default class ConnectionManager extends EventEmitter {\n\n  #sdkInitInfo: JellyfinSdkInitInfo;\n  #connections: ServerConnection[];\n  #authenticatingPromises: Record<ServerConnection['id'], Promise<ServerConnection>>;\n\n  constructor(sdkInitInfo: JellyfinSdkInitInfo) {\n    super();\n    this.#sdkInitInfo = sdkInitInfo;\n    this.#connections = [];\n    this.#authenticatingPromises = {};\n  }\n\n  async getAuthenticatedConnection(server: Server, username: string, passwordFetch: PasswordFetch): Promise<ServerConnection> {\n    const conn = this.#getOrCreateConnection(server, username);\n    if (conn.auth) {\n      return conn;\n    }\n\n    if (Reflect.has(this.#authenticatingPromises, conn.id)) {\n      jellyfin.getLogger().info('[jellyfin-conn] Returning existing auth promise');\n      return this.#authenticatingPromises[conn.id];\n    }\n\n    this.#authenticatingPromises[conn.id] = this.#authenticateConnection(conn, passwordFetch)\n      .finally(() => {\n        delete this.#authenticatingPromises[conn.id];\n      });\n\n    return this.#authenticatingPromises[conn.id];\n  }\n\n  async #authenticateConnection(connection: ServerConnection, passwordFetch: PasswordFetch): Promise<ServerConnection> {\n    const {server, username} = connection;\n    jellyfin.toast('info', jellyfin.getI18n('JELLYFIN_LOGGING_INTO', server.name));\n    try {\n      const authResult = await connection.api.authenticateUserByName(username, passwordFetch(server, username));\n      connection.auth = authResult.data;\n      jellyfin.toast('success', jellyfin.getI18n('JELLYFIN_LOGIN_SUCCESS', server.name));\n      jellyfin.getLogger().info(`[jellyfin-conn] Login successful: ${username}@${server.name}`);\n    }\n    catch (error: any) {\n      jellyfin.toast('error', jellyfin.getI18n('JELLYFIN_AUTH_FAILED'));\n      jellyfin.getLogger().error(`[jellyfin-conn] Login error: ${username}@${server.name}: ${error.message}, Server info: `, server);\n    }\n    return connection;\n  }\n\n  async logoutAll(): Promise<void> {\n    const logoutPromises = this.#connections.filter(\n      (c) => c.auth).map(async (c) => {\n      try {\n        await c.api.logout();\n        jellyfin.getLogger().info(`[jellyfin-conn] Logout successful: ${c.username}@${c.server.name}`);\n      }\n      catch (error: any) {\n        jellyfin.getLogger().error(`[jellyfin-conn] Logout error: ${c.username}@${c.server.name}: ${error.message}, Server info: `, c.server);\n      }\n    });\n\n    await Promise.all(logoutPromises);\n    this.#connections = [];\n  }\n\n  async logout(connection: ServerConnection): Promise<void> {\n    if (connection.auth) {\n      try {\n        await connection.api.logout();\n        jellyfin.getLogger().info(`[jellyfin-conn] Logout successful: ${connection.username}@${connection.server.name}`);\n      }\n      catch (error: any) {\n        jellyfin.getLogger().error(`[jellyfin-conn] Logout error: ${connection.username}@${connection.server.name}: ${error.message}, Server info: `, connection.server);\n      }\n      finally {\n        const i = this.#connections.indexOf(connection);\n        if (i >= 0) {\n          this.#connections.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  #getOrCreateConnection(server: Server, username: string): ServerConnection {\n    const conn = this.findConnection(server, username);\n    if (!conn) {\n      // We can't use the same device ID to login multiple users simultaneously\n      // On same Jellyfin server. Doing so will log out the previous users.\n      // Before we generate a new device ID, check if we have cached one for the user.\n      // By reusing previously-assigned ID, we avoid the Jellyfin server registering multiple\n      // Sessions for the user - this can happen when the plugin is restarted within\n      // A short timeframe and the session before restart has not yet been marked stale.\n      const cachedDeviceIds = jellyfin.getConfigValue<Record<ServerConnection['id'], string>>('connectionDeviceIds', {}, true);\n      const connectionId = ServerHelper.generateConnectionId(username, server);\n      let userDeviceId = cachedDeviceIds[connectionId];\n      if (!userDeviceId) {\n        userDeviceId = uuidv4();\n        cachedDeviceIds[connectionId] = userDeviceId;\n        jellyfin.setConfigValue('connectionDeviceIds', cachedDeviceIds, true);\n        jellyfin.getLogger().info(`[jellyfin-conn] Generated new device Id for ${username}@${server.name}: ${userDeviceId}`);\n      }\n      else {\n        jellyfin.getLogger().info(`[jellyfin-conn] Using previously assigned device Id for ${username}@${server.name}: ${userDeviceId}`);\n      }\n      const sdk = new JellyfinSdk({\n        clientInfo: this.#sdkInitInfo.clientInfo,\n        deviceInfo: {\n          ...this.#sdkInitInfo.deviceInfo,\n          id: userDeviceId\n        }\n      });\n\n      const newConnection = {\n        id: connectionId,\n        username,\n        server,\n        api: sdk.createApi(server.connectionUrl)\n      };\n      this.#connections.push(newConnection);\n      return newConnection;\n    }\n    return conn;\n  }\n\n  findConnection(server: Server, username: string, authenticated = false): ServerConnection | null {\n    return this.#connections.find(\n      (c) => c.server.id === server.id && (authenticated ? c.auth?.User?.Name : c.username) === username) || null;\n  }\n}\n"]}