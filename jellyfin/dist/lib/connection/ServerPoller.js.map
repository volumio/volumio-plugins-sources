{"version":3,"file":"ServerPoller.js","sourceRoot":"","sources":["../../../src/lib/connection/ServerPoller.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from 'events';\nimport { Api, Jellyfin, Jellyfin as JellyfinSdk } from '@jellyfin/sdk';\nimport { getSystemApi } from '@jellyfin/sdk/lib/utils/api/system-api';\nimport AbortController from 'abort-controller';\nimport { EntityType } from '../entities';\nimport Server from '../entities/Server';\nimport jellyfin from '../JellyfinContext';\nimport ServerHelper from '../util/ServerHelper';\n\nexport interface PollListener {\n  (event: PollEvent): void;\n}\n\nexport interface PollEvent {\n  eventName: 'online' | 'lost';\n  server: Server;\n  api: Api;\n}\n\ninterface PollTarget {\n  url: string;\n  connectionUrl: string;\n  api: Api;\n  pollTimer?: NodeJS.Timeout | null;\n  abortController?: AbortController | null;\n  lastEvent?: PollEvent;\n}\n\nconst POLL_INTERVAL = 30000;\n\nexport default class ServerPoller extends EventEmitter {\n\n  #targets: PollTarget[];\n  #sdk: JellyfinSdk;\n\n  constructor(sdk: Jellyfin) {\n    super();\n    this.#targets = [];\n    this.#sdk = sdk;\n  }\n\n  addTarget(url: string | string[]) {\n    if (Array.isArray(url)) {\n      url.forEach((u) => this.addTarget(u));\n      return;\n    }\n\n    const connectionUrl = ServerHelper.getConnectionUrl(url);\n    if (this.#targets.find((target) => target.connectionUrl === connectionUrl)) {\n      return;\n    }\n    const target = {\n      url,\n      connectionUrl,\n      api: this.#sdk.createApi(connectionUrl)\n    };\n    this.#targets.push(target);\n    this.#poll(target);\n  }\n\n  removeTarget(target: string | PollTarget) {\n    const index = typeof target === 'string' ? this.#targets.findIndex(\n      (t) => t.connectionUrl === ServerHelper.getConnectionUrl(target)) : this.#targets.indexOf(target);\n    if (index < 0) {\n      return;\n    }\n    const pt = this.#targets[index];\n    if (pt.pollTimer) {\n      clearTimeout(pt.pollTimer);\n      pt.pollTimer = null;\n    }\n    if (pt.abortController) {\n      pt.abortController.abort();\n      pt.abortController = null;\n    }\n    this.#targets.splice(index, 1);\n  }\n\n  clearTargets() {\n    [ ...this.#targets ].forEach((target) => this.removeTarget(target));\n  }\n\n  getOnlineServers(): Server[] {\n    return this.#targets.reduce<Server[]>((s, target) => {\n      if (target.lastEvent?.eventName === 'online') {\n        s.push(target.lastEvent.server);\n      }\n      return s;\n    }, []);\n  }\n\n  findOnlineServer(url: string): Server | null {\n    const connectionUrl = ServerHelper.getConnectionUrl(url);\n    const target = this.#targets.find((target) => target.connectionUrl === connectionUrl);\n    if (target?.lastEvent?.eventName === 'online') {\n      return target.lastEvent.server;\n    }\n    return null;\n  }\n\n  async #poll(target: PollTarget) {\n    if (!target.abortController) {\n      target.abortController = new AbortController();\n    }\n    const wasOnline = target.lastEvent?.eventName === 'online';\n    let isLost = false;\n    try {\n      const systemApi = getSystemApi(target.api);\n      const systemInfo = await systemApi.getPublicSystemInfo();\n\n      if (target.abortController.signal.aborted) {\n        return;\n      }\n\n      if (systemInfo.data?.Id && systemInfo.data?.ServerName) {\n        if (!wasOnline) {\n          const event: PollEvent = {\n            eventName: 'online',\n            server: {\n              type: EntityType.Server,\n              id: systemInfo.data.Id,\n              url: target.url,\n              connectionUrl: target.connectionUrl,\n              name: systemInfo.data.ServerName,\n              thumbnail: null\n            },\n            api: target.api\n          };\n          target.lastEvent = event;\n          jellyfin.getLogger().info(`[jellyfin-poller] Polled ${target.url}: online`);\n          this.emit('serverOnline', event);\n        }\n      }\n      else if (wasOnline) {\n        isLost = true;\n      }\n      else {\n        jellyfin.getLogger().info(`[jellyfin-poller] Polled ${target.url}: offline (system info unavailable)`);\n      }\n    }\n    catch (error: any) {\n      isLost = wasOnline;\n      jellyfin.getLogger().info(`[jellyfin-poller] Polled ${target.url}: offline${isLost ? ' (lost)' : ''}`);\n    }\n    if (isLost && target.lastEvent) {\n      target.lastEvent.eventName = 'lost';\n      this.emit('serverLost', target.lastEvent);\n    }\n\n    target.pollTimer = setTimeout(() => {\n      this.#poll(target);\n    }, POLL_INTERVAL);\n  }\n\n  emit(event: 'serverOnline', args: PollEvent): boolean;\n  emit(event: 'serverLost', args: PollEvent): boolean;\n  emit(event: string | symbol, ...args: any[]): boolean {\n    return super.emit(event, args);\n  }\n\n  on(event: 'serverOnline' | 'serverLost', listener: PollListener): this;\n  on(event: string | symbol, listener: (...args: any[]) => void): this {\n    return super.on(event, listener);\n  }\n}\n"]}