{"version":3,"file":"SearchController.js","sourceRoot":"","sources":["../../../../src/lib/controller/search/SearchController.ts"],"names":[],"mappings":"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","sourcesContent":["import ConnectionManager from '../../connection/ConnectionManager';\nimport Server from '../../entities/Server';\nimport { RenderedList } from '../browse/view-handlers/ViewHandler';\nimport jellyfin from '../../JellyfinContext';\nimport ViewHandlerFactory from '../browse/view-handlers/ViewHandlerFactory';\nimport ServerHelper from '../../util/ServerHelper';\nimport { AlbumView } from '../browse/view-handlers/AlbumViewHandler';\nimport ViewHelper from '../browse/view-handlers/ViewHelper';\nimport { ArtistView } from '../browse/view-handlers/ArtistViewHandler';\nimport { SongView } from '../browse/view-handlers/SongViewHandler';\nimport View from '../browse/view-handlers/View';\n\nexport interface SearchQuery {\n  value: string;\n}\n\nexport default class SearchController {\n\n  #connectionManager: ConnectionManager;\n\n  constructor(connectionManager: ConnectionManager) {\n    this.#connectionManager = connectionManager;\n  }\n\n  async search(query: SearchQuery): Promise<RenderedList[]> {\n    if (!query) {\n      return [];\n    }\n    const searchAlbums = jellyfin.getConfigValue('searchAlbums', true);\n    const searchArtists = jellyfin.getConfigValue('searchArtists', true);\n    const searchSongs = jellyfin.getConfigValue('searchSongs', true);\n\n    if (!searchAlbums && !searchArtists && !searchSongs) {\n      return [];\n    }\n\n    const serverConfEntries = ServerHelper.getServersFromConfig();\n    const onlineServers = jellyfin.get<Server[]>('onlineServers', []);\n\n    const searchedConnectionIds: string[] = [];\n    const searchUris: string[] = serverConfEntries.reduce<string[]>((uris, conf) => {\n      const server = onlineServers.find(\n        (server) => ServerHelper.getConnectionUrl(conf.url) === server.connectionUrl);\n      if (server) {\n        const targetConnectionId = ServerHelper.generateConnectionId(conf.username, server);\n        if (!searchedConnectionIds.includes(targetConnectionId)) {\n          const baseView: Partial<View> = {\n            search: query.value,\n            collatedSearchResults: '1'\n          };\n          if (searchAlbums) {\n            uris.push(`jellyfin/${targetConnectionId}/${ViewHelper.constructUriSegmentFromView<AlbumView>({ ...baseView, name: 'albums' })}`);\n          }\n          if (searchArtists) {\n            uris.push(`jellyfin/${targetConnectionId}/${ViewHelper.constructUriSegmentFromView<ArtistView>({ ...baseView, name: 'artists' })}`);\n          }\n          if (searchSongs) {\n            uris.push(`jellyfin/${targetConnectionId}/${ViewHelper.constructUriSegmentFromView<SongView>({ ...baseView, name: 'songs' })}`);\n          }\n          searchedConnectionIds.push(targetConnectionId);\n        }\n      }\n      return uris;\n    }, []);\n\n    const searchResultListsPromises = searchUris.map((uri) => this.#getListsFromSearchUri(uri));\n    const searchResultLists = (await Promise.all(searchResultListsPromises)).reduce((result, lists) => {\n      lists.forEach((list) => {\n        if (list.items.length > 0) {\n          result.push(list);\n        }\n      });\n      return result;\n    }, []);\n\n    return searchResultLists;\n  }\n\n  async #getListsFromSearchUri(uri: string): Promise<RenderedList[]> {\n    try {\n      const handler = await ViewHandlerFactory.getHandler(uri, this.#connectionManager);\n      const searchResultsPage = await handler.browse();\n      return searchResultsPage.navigation?.lists || [];\n    }\n    catch (error: any) {\n      return [];\n    }\n  }\n}\n"]}