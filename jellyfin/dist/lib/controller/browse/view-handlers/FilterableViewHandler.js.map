{"version":3,"file":"FilterableViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/FilterableViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityType } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport { Filter, FilterSelection, FilterType, Subfilter } from '../../../model/filter/FilterModel';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport jellyfin from '../../../JellyfinContext';\nimport { RenderedList } from './ViewHandler';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport ViewHelper from './ViewHelper';\nimport { GetItemsParams } from '../../../model/BaseModel';\nimport { FilterSelectionView } from './FilterSelectionViewHandler';\n\nexport interface FilterableViewConfig {\n  showFilters: boolean;\n  saveFiltersKey: string;\n  filterTypes: FilterType[];\n}\n\nexport interface HandleFiltersResult {\n  lists: RenderedList[];\n  modelQueryParams: GetItemsParams\n}\n\nexport default abstract class FilterableViewHandler<V extends View> extends BaseViewHandler<V> {\n\n  protected async handleFilters(): Promise<HandleFiltersResult> {\n    const {showFilters, saveFiltersKey, filterTypes} = this.getFilterableViewConfig();\n    if (showFilters) {\n      this.#saveFilters(saveFiltersKey);\n      const filterList = await this.#getFilterList(saveFiltersKey, ...filterTypes);\n      return {\n        lists: [ filterList.list ],\n        modelQueryParams: this.getModelQueryParams({\n          ...this.currentView,\n          ...filterList.selection\n        })\n      };\n    }\n    return {\n      lists: [],\n      modelQueryParams: this.getModelQueryParams()\n    };\n  }\n\n  protected abstract getFilterableViewConfig(): FilterableViewConfig;\n\n  async #getFilterList(saveKey: string, ...filterTypes: FilterType[]): Promise<{ list: RenderedList, selection: View }> {\n    const filterSelection = this.#getFilterSelection(saveKey, ...filterTypes);\n    const filterView: View = {\n      ...this.currentView,\n      ...filterSelection\n    };\n\n    const promises = filterTypes.map((filterType) => {\n      switch (filterType) {\n        case FilterType.AZ:\n          const azFilterConfig = ViewHelper.getFilterModelConfigFromView(filterView, FilterType.AZ);\n          return azFilterConfig ? this.getModel(ModelType.AZFilter).getFilter(azFilterConfig) : Promise.resolve(null);\n\n        case FilterType.Filter:\n          const filterFilterConfig = ViewHelper.getFilterModelConfigFromView(filterView, FilterType.Filter);\n          return filterFilterConfig ? this.getModel(ModelType.FilterFilter).getFilter(filterFilterConfig) : Promise.resolve(null);\n\n        case FilterType.Genre:\n          const genreFilterConfig = ViewHelper.getFilterModelConfigFromView(filterView, FilterType.Genre);\n          return genreFilterConfig ? this.getModel(ModelType.GenreFilter).getFilter(genreFilterConfig) : Promise.resolve(null);\n\n        case FilterType.Sort:\n          const sortFilterConfig = ViewHelper.getFilterModelConfigFromView(filterView, FilterType.Sort);\n          return sortFilterConfig ? this.getModel(ModelType.SortFilter).getFilter(sortFilterConfig) : Promise.resolve(null);\n\n        case FilterType.Year:\n          const yearFilterConfig = ViewHelper.getFilterModelConfigFromView(filterView, FilterType.Year);\n          return yearFilterConfig ? this.getModel(ModelType.YearFilter).getFilter(yearFilterConfig) : Promise.resolve(null);\n\n        default:\n          return Promise.resolve(null);\n      }\n    });\n\n    const filters = await Promise.all(promises);\n    const listItems = filters.reduce<RenderedListItem[]>((result, filter) => {\n      if (filter) {\n        let title: string;\n        if (filter.subfilters) {\n          const subfilterTexts = filter.subfilters.map((f) => this.#getFilterListItemText(f));\n          title = subfilterTexts.join(', ');\n        }\n        else {\n          title = this.#getFilterListItemText(filter);\n        }\n\n        let filterViewName: FilterSelectionView['name'];\n        switch (filter.type) {\n          case FilterType.AZ:\n            filterViewName = 'filter.az';\n            break;\n          case FilterType.Filter:\n            filterViewName = 'filter.filter';\n            break;\n          case FilterType.Genre:\n            filterViewName = 'filter.genre';\n            break;\n          case FilterType.Sort:\n            filterViewName = 'filter.sort';\n            break;\n          case FilterType.Year:\n          default:\n            filterViewName = 'filter.year';\n        }\n        const filterSelectionView: FilterSelectionView = {\n          name: filterViewName,\n          filterView: JSON.stringify(filterView)\n        };\n\n        result.push({\n          service: 'jellyfin',\n          type: 'jellyfin-filter',\n          title,\n          icon: filter.icon,\n          uri: `${this.uri}/${ViewHelper.constructUriSegmentFromView(filterSelectionView)}`\n        });\n      }\n\n      return result;\n    }, []);\n\n    return {\n      list: {\n        availableListViews: [ 'list' ],\n        items: listItems\n      },\n      selection: filterView\n    };\n  }\n\n  /**\n   * Returns object:\n   * {\n   *  sortBy: ...\n   *  sortOrder: ...\n   *  genreIds: ...\n   *  ...\n   * }\n   * @param {string} saveKey Key used to retrieve a saved selection\n   * @param {...FilterType} types Filter types\n   */\n  #getFilterSelection(saveKey: string, ...types: FilterType[]): Record<string, any> {\n    const defaultSelection = this.#getDefaultFilterSelection(...types);\n    const savedSelection = this.#getSavedFilterSelection(saveKey);\n\n    const selectionFromView: Record<string, any> = {};\n    const fields = Object.keys(defaultSelection);\n    const view = this.currentView;\n    fields.forEach((f) => {\n      if (view[f] !== undefined) {\n        selectionFromView[f] = view[f];\n      }\n    });\n\n    // Remove fields with undefined values from default selection\n    const cleanDefaultSelection: Record<string, any> = {};\n    for (const [ field, value ] of Object.entries(defaultSelection)) {\n      if (value !== undefined) {\n        cleanDefaultSelection[field] = value;\n      }\n      else if (Array.isArray(value)) {\n        cleanDefaultSelection[field] = value.join(',');\n      }\n    }\n\n    return {\n      ...cleanDefaultSelection,\n      ...savedSelection,\n      ...selectionFromView\n    };\n  }\n\n  async #getDefaultFilterSelection(...filterTypes: FilterType[]): Promise<FilterSelection> {\n    const promises = filterTypes.map((filterType) => {\n      switch (filterType) {\n        case FilterType.AZ:\n          return this.getModel(ModelType.AZFilter).getDefaultSelection();\n        case FilterType.Filter:\n          return this.getModel(ModelType.FilterFilter).getDefaultSelection();\n        case FilterType.Genre:\n          return this.getModel(ModelType.GenreFilter).getDefaultSelection();\n        case FilterType.Sort:\n          switch (this.currentView.name) {\n            case 'albums':\n              return this.getModel(ModelType.SortFilter).getDefaultSelection(EntityType.Album);\n            case 'songs':\n              return this.getModel(ModelType.SortFilter).getDefaultSelection(EntityType.Song);\n            case 'folder':\n              return this.getModel(ModelType.SortFilter).getDefaultSelection(EntityType.Folder);\n            default:\n              return Promise.resolve(null);\n          }\n        case FilterType.Year:\n          return this.getModel(ModelType.YearFilter).getDefaultSelection();\n      }\n    });\n\n    const filterSelections = await Promise.all(promises);\n    const result: FilterSelection = {};\n    filterSelections.forEach((selection) => {\n      if (selection) {\n        Object.assign(result, selection);\n      }\n    });\n\n    return result;\n  }\n\n  #getSavedFilterSelection(key: string): FilterSelection {\n    const remember = jellyfin.getConfigValue('rememberFilters', true);\n    if (remember && this.serverConnection) {\n      const savedSelections = jellyfin.getConfigValue<FilterSelection | null>('savedFilters', null, true);\n      if (savedSelections) {\n        const fullKey = `${this.serverConnection.id}.${key}`;\n        return savedSelections[fullKey] || {};\n      }\n    }\n    return {};\n  }\n\n  #getFilterListItemText(filter: Filter | Subfilter): string {\n    const selected = filter.options?.filter((o) => o.selected) || [];\n    if (selected.length > 0) {\n      return selected.map((o) => o.name).join(', ');\n    }\n\n    return filter.placeholder;\n  }\n\n  #saveFilters(key: string) {\n    const remember = jellyfin.getConfigValue('rememberFilters', true);\n    const view = this.currentView;\n    if (remember && view.saveFilter && this.serverConnection) {\n      const saveFilterData = JSON.parse(view.saveFilter);\n      const savedFilters = jellyfin.getConfigValue<FilterSelection | null>('savedFilters', null, true) || {};\n      const fullKey = `${this.serverConnection.id}.${key}`;\n      if (!savedFilters[fullKey]) {\n        savedFilters[fullKey] = {};\n      }\n      if (saveFilterData.value != null) {\n        savedFilters[fullKey][saveFilterData.field] = saveFilterData.value;\n      }\n      else {\n        delete savedFilters[fullKey][saveFilterData.field];\n      }\n      jellyfin.setConfigValue('savedFilters', savedFilters, true);\n\n      jellyfin.getLogger().info('[jellyfin-browse] Filters saved: ', savedFilters);\n    }\n  }\n}\n"]}