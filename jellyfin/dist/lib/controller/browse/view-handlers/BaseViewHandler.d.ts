import ServerConnection from '../../../connection/ServerConnection';
import { ModelType } from '../../../model';
import { GetItemsParams } from '../../../model/BaseModel';
import AlbumModel from '../../../model/AlbumModel';
import ArtistModel from '../../../model/ArtistModel';
import CollectionModel from '../../../model/CollectionModel';
import AZFilterModel from '../../../model/filter/AZFilterModel';
import FilterFilterModel from '../../../model/filter/FilterFilterModel';
import GenreFilterModel from '../../../model/filter/GenreFilterModel';
import SortFilterModel from '../../../model/filter/SortFilterModel';
import YearFilterModel from '../../../model/filter/YearFilterModel';
import FolderModel from '../../../model/FolderModel';
import GenreModel from '../../../model/GenreModel';
import PlaylistModel from '../../../model/PlaylistModel';
import SongModel from '../../../model/SongModel';
import UserViewModel from '../../../model/UserViewModel';
import View from './View';
import ViewHandler, { RenderedPage, RenderedPageContents } from './ViewHandler';
import { EntityType } from '../../../entities';
import AlbumRenderer from './renderer/AlbumRenderer';
import ArtistRenderer from './renderer/ArtistRenderer';
import CollectionRenderer from './renderer/CollectionRenderer';
import FolderRenderer from './renderer/FolderRenderer';
import GenreRenderer from './renderer/GenreRenderer';
import PlaylistRenderer from './renderer/PlaylistRenderer';
import ServerRenderer from './renderer/ServerRenderer';
import SongRenderer from './renderer/SongRenderer';
import { RenderedListItem } from './renderer/BaseRenderer';
import BaseEntity from '../../../entities/BaseEntity';
import { ExplodedTrackInfo } from './Explodable';
import UserViewRenderer from './renderer/UserViewRenderer';
export default class BaseViewHandler<V extends View> implements ViewHandler {
    #private;
    constructor(uri: string, currentView: V, previousViews: View[], connection: ServerConnection | null);
    browse(): Promise<RenderedPage>;
    explode(): Promise<ExplodedTrackInfo[]>;
    get uri(): string;
    get currentView(): V;
    get previousViews(): View[];
    getModel(type: ModelType.SortFilter): SortFilterModel;
    getModel(type: ModelType.FilterFilter): FilterFilterModel;
    getModel(type: ModelType.YearFilter): YearFilterModel;
    getModel(type: ModelType.GenreFilter): GenreFilterModel;
    getModel(type: ModelType.AZFilter): AZFilterModel;
    getModel(type: ModelType.Folder): FolderModel;
    getModel(type: ModelType.Collection): CollectionModel;
    getModel(type: ModelType.Song): SongModel;
    getModel(type: ModelType.Genre): GenreModel;
    getModel(type: ModelType.Artist): ArtistModel;
    getModel(type: ModelType.Playlist): PlaylistModel;
    getModel(type: ModelType.Album): AlbumModel;
    getModel(type: ModelType.UserView): UserViewModel;
    getRenderer(type: EntityType.Album): AlbumRenderer;
    getRenderer(type: EntityType.Artist): ArtistRenderer;
    getRenderer(type: EntityType.Collection): CollectionRenderer;
    getRenderer(type: EntityType.Folder): FolderRenderer;
    getRenderer(type: EntityType.Genre): GenreRenderer;
    getRenderer(type: EntityType.Playlist): PlaylistRenderer;
    getRenderer(type: EntityType.Server): ServerRenderer;
    getRenderer(type: EntityType.Song): SongRenderer;
    getRenderer(type: EntityType.UserView): UserViewRenderer;
    constructPrevUri(): string;
    constructNextUri(startIndex?: number, nextView?: View): string;
    constructNextPageItem(nextUri: string, title?: string): RenderedListItem;
    constructMoreItem(moreUri: string, title?: string): RenderedListItem;
    getModelQueryParams(bundle?: Record<string, any>): GetItemsParams;
    getAlbumArt<T extends BaseEntity>(item: T): string;
    get serverConnection(): ServerConnection | null;
    setPageTitle(pageContents: RenderedPageContents): Promise<RenderedPageContents>;
}
//# sourceMappingURL=BaseViewHandler.d.ts.map