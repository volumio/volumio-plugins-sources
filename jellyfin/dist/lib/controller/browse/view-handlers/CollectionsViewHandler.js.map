{"version":3,"file":"CollectionsViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/CollectionsViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,gDAA+C;AAC/C,0CAA2C;AAC3C,wEAAgD;AAShD,MAAqB,sBAAuB,SAAQ,yBAAgC;IAElF,KAAK,CAAC,MAAM;QACV,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,UAAU,CAAC,CAAC;QAClD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,UAAU,CAAC,CAAC;QACzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEpD,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;QACjE,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CACrD,QAAQ,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAuB,CAAC;QAEtF,IAAI,WAAW,CAAC,cAAc,EAAE;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;YAClE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,MAAM,YAAY,GAAyB;YACzC,IAAI,EAAE;gBACJ,GAAG,EAAE,OAAO;aACb;YACD,KAAK,EAAE;gBACL;oBACE,kBAAkB,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE;oBAC1E,KAAK,EAAE,SAAS;iBACjB;aACF;SACF,CAAC;QAEF,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEtC,OAAO;YACL,UAAU,EAAE,YAAY;SACzB,CAAC;IACJ,CAAC;CACF;AAnCD,yCAmCC","sourcesContent":["import { EntityType } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport BaseViewHandler from './BaseViewHandler';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport View from './View';\nimport { RenderedPage, RenderedPageContents } from './ViewHandler';\n\nexport interface CollectionsView extends View {\n  name: 'collections';\n}\n\nexport default class CollectionsViewHandler extends BaseViewHandler<CollectionsView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const model = this.getModel(ModelType.Collection);\n    const renderer = this.getRenderer(EntityType.Collection);\n    const modelQueryParams = this.getModelQueryParams();\n\n    const collections = await model.getCollections(modelQueryParams);\n    const listItems = collections.items.map((collection) =>\n      renderer.renderToListItem(collection)).filter((item) => item) as RenderedListItem[];\n\n    if (collections.nextStartIndex) {\n      const nextUri = this.constructNextUri(collections.nextStartIndex);\n      listItems.push(this.constructNextPageItem(nextUri));\n    }\n\n    const pageContents: RenderedPageContents = {\n      prev: {\n        uri: prevUri\n      },\n      lists: [\n        {\n          availableListViews: listItems.length > 0 ? [ 'list', 'grid' ] : [ 'list' ],\n          items: listItems\n        }\n      ]\n    };\n\n    await this.setPageTitle(pageContents);\n\n    return {\n      navigation: pageContents\n    };\n  }\n}\n"]}