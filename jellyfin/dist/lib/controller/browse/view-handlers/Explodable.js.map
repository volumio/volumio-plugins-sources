{"version":3,"file":"Explodable.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/Explodable.ts"],"names":[],"mappings":"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","sourcesContent":["import { Song } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport { MediaSourceInfo, MediaStream } from '@jellyfin/sdk/lib/generated-client/models';\nimport SongHelper from '../../../util/SongHelper';\n\nexport interface ExplodedTrackInfo {\n  service: 'jellyfin';\n  uri: string;\n  albumart: string | null;\n  artist?: string;\n  album?: string;\n  name: string;\n  title: string;\n  bitdepth?: string;\n  samplerate?: string;\n  trackType?: string;\n  duration: number;\n}\n\nexport interface AudioStreamMetadata {\n  source: MediaSourceInfo;\n  stream: MediaStream;\n}\n\ntype Constructor<V extends View> = new (...args: any[]) => BaseViewHandler<V> & { getSongsOnExplode: () => Promise<Song[]> };\n\nexport function Explodable<V extends View, TBase extends Constructor<V>>(Base: TBase) {\n\n  return class ExplodableViewHandler extends Base {\n\n    async explode(): Promise<ExplodedTrackInfo[]> {\n      const view = this.currentView;\n      if (view.noExplode) {\n        return [];\n      }\n\n      const songs = await this.getSongsOnExplode();\n      if (!Array.isArray(songs)) {\n        const trackInfo = await this._parseSongForExplode(songs);\n        return trackInfo ? [ trackInfo ] : [];\n      }\n\n      const trackInfoPromises = songs.map((song) => this._parseSongForExplode(song));\n      const tracks = (await Promise.all(trackInfoPromises)).filter((song) => song) as ExplodedTrackInfo[];\n\n      return tracks;\n    }\n\n    async _parseSongForExplode(song: Song): Promise<ExplodedTrackInfo | null> {\n      const trackUri = this._getTrackUri(song);\n      if (!trackUri) {\n        return null;\n      }\n      // Because we set consume update service (mpd) to ignore metadata,\n      // We need to also provide the samplerate and bitdepth\n      let bitdepth, samplerate, trackType;\n      const { source, stream } = this._getAudioStreamMetadata(song) || {};\n      if (stream && stream.BitDepth && stream.SampleRate) {\n        bitdepth = `${stream.BitDepth} bit`;\n        samplerate = `${stream.SampleRate / 1000} kHz`;\n        // Special handling for DSDs\n        if (stream.Codec && stream.Codec.startsWith('dsd_')) {\n          bitdepth = '1 bit';\n          switch (stream.BitDepth * stream.SampleRate) {\n            case 2822400: // DSD64\n              samplerate = '2.82 MHz';\n              break;\n            case 5644800: // DSD128\n              samplerate = '5.64 MHz';\n              break;\n            case 11289600: // DSD256\n              samplerate = '11.2 MHz';\n              break;\n            case 22579200: // DSD512\n              samplerate = '22.58 MHz';\n              break;\n            case 45158400: // DSD1024\n              samplerate = '45.2 MHz';\n              break;\n            default:\n              samplerate = '{ Math.round(stream.BitDepth * stream.SampleRate / 10000) / 100 } MHz';\n          }\n        }\n        else {\n          bitdepth = `${stream.BitDepth} bit`;\n          samplerate = `${stream.SampleRate / 1000} kHz`;\n        }\n      }\n      if (source?.Container) {\n        const container = source.Container.toLowerCase();\n        switch (container) {\n          case 'dsf':\n            trackType = 'dsd';\n            break;\n          default:\n            trackType = container;\n        }\n      }\n\n      const result: ExplodedTrackInfo = {\n        service: 'jellyfin',\n        uri: trackUri,\n        albumart: this.getAlbumArt(song),\n        artist: song.artists.map((artist) => artist.name).join(', '),\n        album: '',\n        name: song.name,\n        title: song.name,\n        bitdepth: bitdepth,\n        samplerate: samplerate,\n        duration: song.duration\n      };\n\n      if (song.album?.name) {\n        result.album = song.album.name;\n      }\n      else if (song.album?.id) {\n        // Some songs don't have Album names, e.g. WAV files.\n        // If album Id is available, then obtain the name from album.\n        const albumModel = this.getModel(ModelType.Album);\n        const album = await albumModel.getAlbum(song.album.id);\n        if (album?.name) {\n          result.album = album.name;\n        }\n      }\n\n      if (trackType) {\n        result.trackType = trackType;\n      }\n\n      return result;\n    }\n\n    _getAudioStreamMetadata(song: Song): AudioStreamMetadata | null {\n      const source = song.mediaSources?.[0];\n      const stream = source?.MediaStreams?.find((stream) => stream.Type === 'Audio');\n      if (source && stream) {\n        return { source, stream };\n      }\n      return null;\n    }\n\n    /**\n     * Track uri is the canonical uri of the song:\n     * jellyfin/{username}@{serverId}/song@songId={songId}\n     */\n    _getTrackUri(song: Song): string | null {\n      return SongHelper.getCanonicalUri(song, this.serverConnection);\n    }\n  };\n}\n"]}