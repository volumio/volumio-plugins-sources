{"version":3,"file":"PlaylistViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/PlaylistViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,gDAA+C;AAC/C,0CAA2C;AAC3C,wEAAgD;AAShD,MAAqB,mBAAoB,SAAQ,yBAA6B;IAE5E,KAAK,CAAC,MAAM;QACV,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxC,MAAM,KAAK,GAAmB,EAAE,CAAC;QACjC,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,QAAQ,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC7D,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACjD,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAuB,CAAC;QAEpF,IAAI,SAAS,CAAC,cAAc,EAAE;YAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YAChE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,KAAK,CAAC,IAAI,CAAC;YACT,kBAAkB,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE;YAC1E,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QAEH,MAAM,YAAY,GAAyB;YACzC,IAAI,EAAE;gBACJ,GAAG,EAAE,OAAO;aACb;YACD,KAAK;SACN,CAAC;QAEF,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEtC,OAAO;YACL,UAAU,EAAE,YAAY;SACzB,CAAC;IACJ,CAAC;CACF;AApCD,sCAoCC","sourcesContent":["import { EntityType } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport BaseViewHandler from './BaseViewHandler';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport View from './View';\nimport { RenderedList, RenderedPage, RenderedPageContents } from './ViewHandler';\n\nexport interface PlaylistView extends View {\n  name: 'playlists';\n}\n\nexport default class PlaylistViewHandler extends BaseViewHandler<PlaylistView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const lists: RenderedList[] = [];\n    const modelQueryParams = {};\n\n    const model = this.getModel(ModelType.Playlist);\n    const renderer = this.getRenderer(EntityType.Playlist);\n    const playlists = await model.getPlaylists(modelQueryParams);\n    const listItems = playlists.items.map((playlist) =>\n      renderer.renderToListItem(playlist)).filter((item) => item) as RenderedListItem[];\n\n    if (playlists.nextStartIndex) {\n      const nextUri = this.constructNextUri(playlists.nextStartIndex);\n      listItems.push(this.constructNextPageItem(nextUri));\n    }\n\n    lists.push({\n      availableListViews: listItems.length > 0 ? [ 'list', 'grid' ] : [ 'list' ],\n      items: listItems\n    });\n\n    const pageContents: RenderedPageContents = {\n      prev: {\n        uri: prevUri\n      },\n      lists\n    };\n\n    await this.setPageTitle(pageContents);\n\n    return {\n      navigation: pageContents\n    };\n  }\n}\n"]}