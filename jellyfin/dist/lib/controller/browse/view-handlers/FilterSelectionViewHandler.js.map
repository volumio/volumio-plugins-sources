{"version":3,"file":"FilterSelectionViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/FilterSelectionViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { ModelType } from '../../../model';\nimport FilterModel, { Filter, FilterOption, FilterType, Subfilter } from '../../../model/filter/FilterModel';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport ViewHelper from './ViewHelper';\nimport jellyfin from '../../../JellyfinContext';\nimport { RenderedListItem } from './renderer/BaseRenderer';\n\nexport interface FilterSelectionView extends View {\n  name: 'filter.az' | 'filter.filter' | 'filter.genre' | 'filter.sort' | 'filter.year';\n  filterView: string;\n}\n\nexport default class FilterSelectionViewHandler extends BaseViewHandler<FilterSelectionView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const lastView = this.previousViews[this.previousViews.length - 1];\n    const filterView = JSON.parse(this.currentView.filterView);\n    const combinedView: View = {\n      ...lastView,\n      ...filterView\n    };\n\n    let filterType: FilterType;\n    let model: FilterModel;\n    switch (this.currentView.name) {\n      case 'filter.az':\n        filterType = FilterType.AZ;\n        model = this.getModel(ModelType.AZFilter);\n        break;\n      case 'filter.filter':\n        filterType = FilterType.Filter;\n        model = this.getModel(ModelType.FilterFilter);\n        break;\n      case 'filter.genre':\n        filterType = FilterType.Genre;\n        model = this.getModel(ModelType.GenreFilter);\n        break;\n      case 'filter.sort':\n        filterType = FilterType.Sort;\n        model = this.getModel(ModelType.SortFilter);\n        break;\n      case 'filter.year':\n        filterType = FilterType.Year;\n        model = this.getModel(ModelType.YearFilter);\n        break;\n      default:\n        throw Error(`Unknown filter: ${this.currentView. name}`);\n    }\n\n    const modelConfig = ViewHelper.getFilterModelConfigFromView(combinedView, filterType);\n    if (!modelConfig) {\n      throw Error('Invalid filter view');\n    }\n\n    const filter = await model.getFilter(modelConfig);\n    let lists;\n    if (filter.subfilters) {\n      const sublists = filter.subfilters.map((f) => this.#getFilterOptionsList(f));\n      lists = sublists.reduce((result, list) => {\n        return [\n          ...result,\n          ...list\n        ];\n      }, []);\n    }\n    else {\n      lists = this.#getFilterOptionsList(filter);\n    }\n\n    return {\n      navigation: {\n        prev: { uri: prevUri },\n        lists\n      }\n    };\n  }\n\n  constructPrevUri(): string {\n    return this.previousViews.map((view) =>\n      ViewHelper.constructUriSegmentFromView(view)).join('/');\n  }\n\n  #getBaseUri(field: string): string {\n    const previousViews = [ ...this.previousViews ];\n    const lastView: View = {...previousViews[previousViews.length - 1]};\n    delete lastView[field];\n    delete lastView.startIndex;\n    previousViews.pop();\n    const segments = previousViews.map((view) => ViewHelper.constructUriSegmentFromView(view));\n    segments.push(ViewHelper.constructUriSegmentFromView(lastView));\n    return segments.join('/');\n  }\n\n  #getFilterOptionsList(filter: Filter | Subfilter): RenderedList[] {\n    if (!filter.field || !filter.options) {\n      return [];\n    }\n    const baseUri = this.#getBaseUri(filter.field);\n    const remember = jellyfin.getConfigValue('rememberFilters', true);\n    const items = filter.options.map<RenderedListItem>((option) => ({\n      service: 'jellyfin',\n      type: 'jellyfin-filter-option',\n      title: option.name,\n      icon: option.selected ? 'fa fa-check' : 'fa',\n      uri: this.#getFilterOptionUri(baseUri, filter, option, remember)\n    }));\n    const lists: RenderedList[] = [];\n    if (filter.resettable) {\n      lists.push({\n        availableListViews: [ 'list' ],\n        items: [\n          {\n            service: 'jellyfin',\n            type: 'jellyfin-filter-option',\n            title: jellyfin.getI18n('JELLYFIN_RESET'),\n            icon: 'fa fa-ban',\n            uri: this.#getFilterOptionUri(baseUri, filter, null, remember)\n          }\n        ]\n      });\n    }\n    lists.push({\n      availableListViews: [ 'list' ],\n      items\n    });\n    lists[0].title = filter.title;\n    return lists;\n  }\n\n  #getFilterOptionUri(baseUri: string, filter: Filter | Subfilter, option: FilterOption | null, remember: boolean) {\n    // `filter: null` corresponds to reset filter item\n    const uri = option ? baseUri + (option.value ? `@${filter.field}=${encodeURIComponent(option.value)}` : '') : baseUri;\n\n    if (remember) {\n      const saveFilter = {\n        field: filter.field,\n        value: option ? option.value : null\n      };\n      return `${uri}@saveFilter=${encodeURIComponent(JSON.stringify(saveFilter))}`;\n    }\n\n    return uri;\n  }\n}\n"]}