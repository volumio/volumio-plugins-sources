{"version":3,"file":"SongViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/SongViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityType, Song } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport FilterableViewHandler, { FilterableViewConfig } from './FilterableViewHandler';\nimport View from './View';\nimport { RenderedPage, RenderedPageContents } from './ViewHandler';\nimport jellyfin from '../../../JellyfinContext';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport { Explodable } from './Explodable';\nimport { FilterType } from '../../../model/filter/FilterModel';\nimport ViewHelper from './ViewHelper';\n\nexport interface SongView extends View {\n  name: 'songs' | 'song';\n  parentId?: string;\n  albumId?: string;\n  playlistId?: string;\n  songId?: string;\n  search?: string;\n  collatedSearchResults?: '1';\n}\n\nclass SongViewHandler extends FilterableViewHandler<SongView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const view = this.currentView;\n\n    const albumId = view.albumId;\n    const playlistId = view.playlistId;\n\n    const isAlbum = !!albumId;\n    const isPlaylist = !!playlistId;\n    const listViewOnly = isAlbum || isPlaylist;\n\n    let pagination: boolean;\n    if ((isAlbum && jellyfin.getConfigValue('showAllAlbumTracks', true)) ||\n      (isPlaylist && jellyfin.getConfigValue('showAllPlaylistTracks', true))) {\n      pagination = false;\n    }\n    else {\n      pagination = true;\n    }\n\n    const { lists, modelQueryParams } = await this.handleFilters();\n\n    if (isAlbum) {\n      modelQueryParams.parentId = albumId;\n\n      if (jellyfin.getConfigValue('showAllAlbumTracks', true)) {\n        modelQueryParams.limit = -1;\n      }\n    }\n    else if (isPlaylist) {\n      modelQueryParams.parentId = playlistId;\n      modelQueryParams.sortBy = null;\n      modelQueryParams.sortOrder = null;\n\n      if (jellyfin.getConfigValue('showAllPlaylistTracks', true)) {\n        modelQueryParams.limit = -1;\n      }\n    }\n    else if (view.search && view.collatedSearchResults) {\n      modelQueryParams.limit = jellyfin.getConfigValue('searchSongsResultCount', 11);\n    }\n\n    const model = this.getModel(ModelType.Song);\n    const renderer = this.getRenderer(EntityType.Song);\n    const songs = await model.getSongs(modelQueryParams);\n    const listItems = songs.items.map((song) =>\n      renderer.renderToListItem(song)).filter((item) => item) as RenderedListItem[];\n\n    if (pagination && songs.nextStartIndex) {\n      if (view.search && view.collatedSearchResults && this.serverConnection) {\n        const songView: SongView = {\n          name: 'songs',\n          search: view.search\n        };\n        const moreUri = `jellyfin/${this.serverConnection.id}/${ViewHelper.constructUriSegmentFromView(songView)}`;\n        listItems.push(this.constructMoreItem(moreUri));\n      }\n      else {\n        const nextUri = this.constructNextUri(songs.nextStartIndex);\n        listItems.push(this.constructNextPageItem(nextUri));\n      }\n    }\n\n    lists.push({\n      availableListViews: listViewOnly || listItems.length === 0 ? [ 'list' ] : [ 'list', 'grid' ],\n      items: listItems\n    });\n\n    let header;\n    if (isAlbum) {\n      const albumModel = this.getModel(ModelType.Album);\n      const album = await albumModel.getAlbum(albumId);\n      const albumRenderer = this.getRenderer(EntityType.Album);\n      if (album) {\n        header = albumRenderer.renderToHeader(album);\n      }\n      if (album) {\n        const similarAlbums = await albumModel.getSimilarAlbums({ album });\n        if (similarAlbums.length > 0) {\n          lists.push({\n            title: jellyfin.getI18n('JELLYFIN_MORE_LIKE_THIS'),\n            availableListViews: [ 'list', 'grid' ],\n            items: similarAlbums.map((album) =>\n              albumRenderer.renderToListItem(album)).filter((item) => item) as RenderedListItem[]\n          });\n        }\n      }\n    }\n    else if (isPlaylist) {\n      const playlistModel = this.getModel(ModelType.Playlist);\n      const playlist = await playlistModel.getPlaylist(playlistId);\n      if (playlist) {\n        const playlistRenderer = this.getRenderer(EntityType.Playlist);\n        header = playlistRenderer.renderToHeader(playlist);\n      }\n    }\n\n    const pageContents: RenderedPageContents = {\n      prev: {\n        uri: prevUri\n      },\n      info: header || undefined,\n      lists\n    };\n\n    if (!header) {\n      await this.setPageTitle(pageContents);\n    }\n\n    return {\n      navigation: pageContents\n    };\n  }\n\n  async getSongsOnExplode(): Promise<Song[]> {\n    const view = this.currentView;\n    const model = this.getModel(ModelType.Song);\n\n    if (view.name === 'song' && view.songId) {\n      const song = await model.getSong(view.songId);\n      if (song) {\n        return [ song ];\n      }\n      throw Error('Song not found');\n    }\n    else if (view.name === 'songs') {\n      const { modelQueryParams } = await this.handleFilters();\n      modelQueryParams.limit = jellyfin.getConfigValue('maxTracks', 100);\n\n      if (view.albumId) {\n        modelQueryParams.parentId = view.albumId;\n\n        if (jellyfin.getConfigValue('noMaxTracksSingleAlbum', true)) {\n          modelQueryParams.limit = -1;\n        }\n      }\n      else if (view.playlistId) {\n        modelQueryParams.parentId = view.playlistId;\n\n        if (jellyfin.getConfigValue('noMaxTracksSinglePlaylist', true)) {\n          modelQueryParams.limit = -1;\n        }\n      }\n\n      return (await model.getSongs(modelQueryParams)).items;\n    }\n    else {\n      // Should never reach here, but just in case...\n      throw Error(`View name is ${view.name} but handler is for song`);\n    }\n  }\n\n  protected getFilterableViewConfig(): FilterableViewConfig {\n    const view = this.currentView;\n    const albumId = view.albumId;\n    const playlistId = view.playlistId;\n    const isAlbum = !!albumId;\n    const isPlaylist = !!playlistId;\n\n    const showFilters = !view.fixedView && !view.search && !isAlbum && !isPlaylist;\n    const saveFiltersKey = `${view.parentId}.song`;\n    const filterTypes = [ FilterType.Sort, FilterType.Filter, FilterType.Genre, FilterType.Year ];\n\n    return {\n      showFilters,\n      saveFiltersKey,\n      filterTypes\n    };\n  }\n}\n\nexport default Explodable(SongViewHandler);\n"]}