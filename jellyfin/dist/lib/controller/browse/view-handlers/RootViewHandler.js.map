{"version":3,"file":"RootViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/RootViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,gDAA+C;AAC/C,wEAAgD;AAGhD,+EAAgD;AAGhD,8EAAsD;AAMtD,MAAqB,eAAgB,SAAQ,yBAAyB;IAEpE,KAAK,CAAC,MAAM;QACV,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,iBAAiB,GAAG,sBAAY,CAAC,oBAAoB,EAAE,CAAC;QAC9D,MAAM,aAAa,GAAG,yBAAQ,CAAC,GAAG,CAAW,eAAe,EAAE,EAAE,CAAC,CAAC;QAElE,MAAM,gBAAgB,GAAa,EAAE,CAAC;QAEtC,MAAM,SAAS,GAAG,aAAa,CAAC,MAAM,CAAqB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;YAC5E,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAC1C,CAAC,IAAI,EAAE,EAAE,CAAC,sBAAY,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC;YAC9E,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC3B,kFAAkF;gBAClF,mDAAmD;gBACnD,MAAM,YAAY,GAAG,sBAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;gBACjF,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC;wBACzC,GAAG,MAAM;wBACT,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACxB,CAAC,CAAC;oBACH,IAAI,QAAQ,EAAE;wBACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACtB,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;qBACrC;iBACF;YACH,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO;YACL,UAAU,EAAE;gBACV,IAAI,EAAE;oBACJ,GAAG,EAAE,GAAG;iBACT;gBACD,KAAK,EAAE;oBACL;wBACE,kBAAkB,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE;wBAC1E,KAAK,EAAE,SAAS;qBACjB;iBACF;aACF;SACF,CAAC;IACJ,CAAC;CACF;AA5CD,kCA4CC","sourcesContent":["import { EntityType } from '../../../entities';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport { RenderedPage } from './ViewHandler';\nimport jellyfin from '../../../JellyfinContext';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport Server from '../../../entities/Server';\nimport ServerHelper from '../../../util/ServerHelper';\n\nexport interface RootView extends View {\n  name: 'root';\n}\n\nexport default class RootViewHandler extends BaseViewHandler<RootView> {\n\n  async browse(): Promise<RenderedPage> {\n    const renderer = this.getRenderer(EntityType.Server);\n    const serverConfEntries = ServerHelper.getServersFromConfig();\n    const onlineServers = jellyfin.get<Server[]>('onlineServers', []);\n\n    const displayedEntries: string[] = [];\n\n    const listItems = onlineServers.reduce<RenderedListItem[]>((result, server) => {\n      const serverConfs = serverConfEntries.filter(\n        (conf) => ServerHelper.getConnectionUrl(conf.url) === server.connectionUrl);\n      serverConfs.forEach((conf) => {\n        // Where user adds double server entries to config (with same username + different\n        // URLs pointing to same server), display only one.\n        const connectionId = ServerHelper.generateConnectionId(conf.username, server.id);\n        if (!displayedEntries.includes(connectionId)) {\n          const rendered = renderer.renderToListItem({\n            ...server,\n            username: conf.username\n          });\n          if (rendered) {\n            result.push(rendered);\n            displayedEntries.push(connectionId);\n          }\n        }\n      });\n      return result;\n    }, []);\n\n    return {\n      navigation: {\n        prev: {\n          uri: '/'\n        },\n        lists: [\n          {\n            availableListViews: listItems.length > 0 ? [ 'list', 'grid' ] : [ 'list' ],\n            items: listItems\n          }\n        ]\n      }\n    };\n  }\n}\n"]}