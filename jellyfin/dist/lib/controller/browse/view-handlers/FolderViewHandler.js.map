{"version":3,"file":"FolderViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/FolderViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,gDAA+C;AAC/C,0CAA2C;AAC3C,mEAA+D;AAC/D,oFAAsF;AAUtF,MAAqB,iBAAkB,SAAQ,+BAAiC;IAE9E,KAAK,CAAC,MAAM;QACV,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9B,MAAM,EAAE,KAAK,EAAE,gBAAgB,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAE/D,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpD,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QACvE,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAClD,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,qBAAU,CAAC,MAAM,CAAC;gBACvB,KAAK,qBAAU,CAAC,gBAAgB;oBAC9B,OAAO,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACpE,KAAK,qBAAU,CAAC,MAAM,CAAC;gBACvB,KAAK,qBAAU,CAAC,WAAW;oBACzB,OAAO,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACpE,KAAK,qBAAU,CAAC,KAAK;oBACnB,OAAO,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;gBACnE;oBACE,OAAO,IAAI,CAAC;aACf;QACH,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAuB,CAAC;QAEhD,IAAI,cAAc,CAAC,cAAc,EAAE;YACjC,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YACrE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,KAAK,CAAC,IAAI,CAAC;YACT,kBAAkB,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE;YAC1E,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QACH,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,EAAE,IAAI,CAAC;QAE9B,MAAM,YAAY,GAAyB;YACzC,IAAI,EAAE;gBACJ,GAAG,EAAE,OAAO;aACb;YACD,KAAK;SACN,CAAC;QAEF,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEtC,OAAO;YACL,UAAU,EAAE,YAAY;SACzB,CAAC;IACJ,CAAC;IAES,uBAAuB;QAC/B,OAAO;YACL,WAAW,EAAE,IAAI;YACjB,cAAc,EAAE,QAAQ;YACxB,WAAW,EAAE,CAAE,wBAAU,CAAC,IAAI,EAAE,wBAAU,CAAC,EAAE,CAAE;SAChD,CAAC;IACJ,CAAC;CACF;AA1DD,oCA0DC","sourcesContent":["import { EntityType } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport { FilterType } from '../../../model/filter/FilterModel';\nimport FilterableViewHandler, { FilterableViewConfig } from './FilterableViewHandler';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport View from './View';\nimport { RenderedPage, RenderedPageContents } from './ViewHandler';\n\nexport interface FolderView extends View {\n  name: 'folder';\n  parentId: string;\n}\n\nexport default class FolderViewHandler extends FilterableViewHandler<FolderView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const view = this.currentView;\n\n    const { lists, modelQueryParams } = await this.handleFilters();\n\n    const model = this.getModel(ModelType.Folder);\n    const folder = await model.getFolder(view.parentId);\n    const folderContents = await model.getFolderContents(modelQueryParams);\n    const listItems = folderContents.items.map((item) => {\n      switch (item.type) {\n        case EntityType.Folder:\n        case EntityType.CollectionFolder:\n          return this.getRenderer(EntityType.Folder).renderToListItem(item);\n        case EntityType.Artist:\n        case EntityType.AlbumArtist:\n          return this.getRenderer(EntityType.Artist).renderToListItem(item);\n        case EntityType.Album:\n          return this.getRenderer(EntityType.Album).renderToListItem(item);\n        default:\n          return null;\n      }\n    }).filter((item) => item) as RenderedListItem[];\n\n    if (folderContents.nextStartIndex) {\n      const nextUri = this.constructNextUri(folderContents.nextStartIndex);\n      listItems.push(this.constructNextPageItem(nextUri));\n    }\n\n    lists.push({\n      availableListViews: listItems.length > 0 ? [ 'list', 'grid' ] : [ 'list' ],\n      items: listItems\n    });\n    lists[0].title = folder?.name;\n\n    const pageContents: RenderedPageContents = {\n      prev: {\n        uri: prevUri\n      },\n      lists\n    };\n\n    await this.setPageTitle(pageContents);\n\n    return {\n      navigation: pageContents\n    };\n  }\n\n  protected getFilterableViewConfig(): FilterableViewConfig {\n    return {\n      showFilters: true,\n      saveFiltersKey: 'folder',\n      filterTypes: [ FilterType.Sort, FilterType.AZ ]\n    };\n  }\n}\n"]}