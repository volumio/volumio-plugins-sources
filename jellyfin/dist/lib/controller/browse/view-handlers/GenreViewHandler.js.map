{"version":3,"file":"GenreViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/GenreViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,gDAA+C;AAC/C,0CAA2C;AAC3C,wEAAgD;AAUhD,MAAqB,gBAAiB,SAAQ,yBAA0B;IAEtE,KAAK,CAAC,MAAM;QACV,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,MAAM,KAAK,GAAmB,EAAE,CAAC;QACjC,MAAM,gBAAgB,GAAG;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI;SAChB,CAAC;QAEF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC;QAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC;QACpD,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAC3C,QAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAuB,CAAC;QAEjF,IAAI,MAAM,CAAC,cAAc,EAAE;YACzB,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC7D,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;SACrD;QAED,KAAK,CAAC,IAAI,CAAC;YACT,kBAAkB,EAAE,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE;YAC1E,KAAK,EAAE,SAAS;SACjB,CAAC,CAAC;QAEH,MAAM,YAAY,GAAyB;YACzC,IAAI,EAAE;gBACJ,GAAG,EAAE,OAAO;aACb;YACD,KAAK;SACN,CAAC;QAEF,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEtC,OAAO;YACL,UAAU,EAAE,YAAY;SACzB,CAAC;IACJ,CAAC;CACF;AAxCD,mCAwCC","sourcesContent":["import { EntityType } from '../../../entities';\nimport { ModelType } from '../../../model';\nimport BaseViewHandler from './BaseViewHandler';\nimport { RenderedListItem } from './renderer/BaseRenderer';\nimport View from './View';\nimport { RenderedList, RenderedPage, RenderedPageContents } from './ViewHandler';\n\nexport interface GenreView extends View {\n  name: 'genres';\n  parentId: string;\n}\n\nexport default class GenreViewHandler extends BaseViewHandler<GenreView> {\n\n  async browse(): Promise<RenderedPage> {\n    const prevUri = this.constructPrevUri();\n    const view = this.currentView;\n    const lists: RenderedList[] = [];\n    const modelQueryParams = {\n      parentId: view.parentId,\n      recursive: true\n    };\n\n    const model = this.getModel(ModelType.Genre);\n    const renderer = this.getRenderer(EntityType.Genre);\n    const genres = await model.getGenres(modelQueryParams);\n    const listItems = genres.items.map((genre) =>\n      renderer.renderToListItem(genre)).filter((item) => item) as RenderedListItem[];\n\n    if (genres.nextStartIndex) {\n      const nextUri = this.constructNextUri(genres.nextStartIndex);\n      listItems.push(this.constructNextPageItem(nextUri));\n    }\n\n    lists.push({\n      availableListViews: listItems.length > 0 ? [ 'list', 'grid' ] : [ 'list' ],\n      items: listItems\n    });\n\n    const pageContents: RenderedPageContents = {\n      prev: {\n        uri: prevUri\n      },\n      lists\n    };\n\n    await this.setPageTitle(pageContents);\n\n    return {\n      navigation: pageContents\n    };\n  }\n}\n"]}