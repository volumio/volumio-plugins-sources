{"version":3,"file":"ViewHelper.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ViewHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { EntityType } from '../../../entities';\nimport { AZFilterModelConfig } from '../../../model/filter/AZFilterModel';\nimport { FilterFilterModelConfig, FilterFilterItemType } from '../../../model/filter/FilterFilterModel';\nimport { FilterType } from '../../../model/filter/FilterModel';\nimport { GenreFilterModelConfig } from '../../../model/filter/GenreFilterModel';\nimport { SortFilterItemType, SortFilterModelConfig } from '../../../model/filter/SortFilterModel';\nimport { YearFilterItemType, YearFilterModelConfig } from '../../../model/filter/YearFilterModel';\nimport ServerHelper from '../../../util/ServerHelper';\nimport View from './View';\n\ntype FilterModelConfig = AZFilterModelConfig | FilterFilterModelConfig |\n  GenreFilterModelConfig | SortFilterModelConfig | YearFilterModelConfig;\n\n\nexport default class ViewHelper {\n\n  static getViewsFromUri(uri: string): View[] {\n    const segments = uri.split('/');\n    if (segments[0] !== 'jellyfin') {\n      return [];\n    }\n\n    const result: View[] = [];\n\n    let serverId: string;\n    let username: string;\n    segments.forEach((segment, index) => {\n      let view: View;\n      if (index === 0) { // 'jellyfin/...'\n        view = {\n          name: 'root'\n        };\n      }\n      else if (index === 1) { // 'jellyfin/username@serverId/...'\n        view = {\n          name: 'userViews'\n        };\n        const segmentParts = segment.split('@');\n        if (segmentParts.length === 2) {\n          username = decodeURIComponent(segmentParts[0]);\n          serverId = decodeURIComponent(segmentParts[1]);\n        }\n        else {\n          username = '';\n          serverId = decodeURIComponent(segmentParts[0]);\n        }\n        view.serverId = serverId;\n        view.username = username;\n      }\n      else {\n        view = this.#getViewFromUriSegment(segment);\n        view.serverId = serverId;\n        view.username = username;\n      }\n      result.push(view);\n    });\n\n    return result;\n  }\n\n  static constructUriSegmentFromView<V extends View>(view: V) {\n    let segment: string;\n    if (view.name === 'root') {\n      segment = 'jellyfin';\n    }\n    else if (view.name === 'userViews' && view.serverId && view.username) {\n      segment = ServerHelper.generateConnectionId(view.username, view.serverId);\n    }\n    else {\n      segment = view.name;\n    }\n\n    const skip = [ 'name', 'startIndex', 'serverId', 'username', 'saveFilter', 'noExplode' ];\n    Object.keys(view).filter((key) => !skip.includes(key)).forEach((key) => {\n      if (view[key] !== undefined) {\n        segment += `@${key}=${encodeURIComponent(view[key])}`;\n      }\n    });\n\n    if (view.startIndex) {\n      segment += `@startIndex=${view.startIndex}`;\n    }\n\n    return segment;\n  }\n\n  static #getViewFromUriSegment(segment: string): View {\n    const result: View = {\n      name: '',\n      startIndex: 0\n    };\n    segment.split('@').forEach((s) => {\n      const equalIndex = s.indexOf('=');\n      if (equalIndex < 0) {\n        result.name = s;\n      }\n      else {\n        const key = s.substring(0, equalIndex);\n        const value = s.substring(equalIndex + 1);\n        if (key === 'startIndex') {\n          result[key] = parseInt(value, 10);\n        }\n        else {\n          result[key] = decodeURIComponent(value);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  static getFilterModelConfigFromView(view: View, filterType: FilterType.Year): YearFilterModelConfig | null;\n  static getFilterModelConfigFromView(view: View, filterType: FilterType.Sort): SortFilterModelConfig | null;\n  static getFilterModelConfigFromView(view: View, filterType: FilterType.Genre): GenreFilterModelConfig | null;\n  static getFilterModelConfigFromView(view: View, filterType: FilterType.Filter): FilterFilterModelConfig | null;\n  static getFilterModelConfigFromView(view: View, filterType: FilterType.AZ): AZFilterModelConfig | null;\n  static getFilterModelConfigFromView(view: View, filterType: FilterType): FilterModelConfig | null;\n  static getFilterModelConfigFromView(view: any, filterType: any): FilterModelConfig | null {\n    switch (filterType) {\n      case FilterType.AZ:\n        return view.nameStartsWith ? {\n          initialSelection: { nameStartsWith: view.nameStartsWith }\n        } as AZFilterModelConfig : {};\n\n      case FilterType.Filter:\n        let filterFilterItemType: FilterFilterItemType;\n        switch (view.name) {\n          case 'albums':\n            filterFilterItemType = EntityType.Album;\n            break;\n          case 'songs':\n            filterFilterItemType = EntityType.Song;\n            break;\n          case 'artists':\n            filterFilterItemType = EntityType.Artist;\n            break;\n          case 'albumArtists':\n            filterFilterItemType = EntityType.AlbumArtist;\n            break;\n          default:\n            return null;\n        }\n        const filterFilterConfig: FilterFilterModelConfig = {\n          itemType: filterFilterItemType\n        };\n        if (view.filters) {\n          filterFilterConfig.initialSelection = {\n            filters: view.filters.split(',')\n          };\n        }\n        return filterFilterConfig;\n\n      case FilterType.Genre:\n        if (!view.parentId) {\n          return null;\n        }\n        const genreFilterConfig: GenreFilterModelConfig = {\n          parentId: view.parentId\n        };\n        if (view.genreIds) {\n          genreFilterConfig.initialSelection = {\n            genreIds: view.genreIds.split(',')\n          };\n        }\n        return genreFilterConfig;\n\n      case FilterType.Sort:\n        let sortFilterItemType: SortFilterItemType;\n        switch (view.name) {\n          case 'albums':\n            sortFilterItemType = EntityType.Album;\n            break;\n          case 'songs':\n            sortFilterItemType = EntityType.Song;\n            break;\n          case 'folder':\n            sortFilterItemType = EntityType.Folder;\n            break;\n          default:\n            return null;\n        }\n        const sortFilterConfig: SortFilterModelConfig = {\n          itemType: sortFilterItemType\n        };\n        if (view.sortBy || view.sortOrder) {\n          sortFilterConfig.initialSelection = {};\n          if (view.sortBy) {\n            sortFilterConfig.initialSelection.sortBy = view.sortBy;\n          }\n          if (view.sortOrder) {\n            sortFilterConfig.initialSelection.sortOrder = view.sortOrder;\n          }\n        }\n        return sortFilterConfig;\n\n      case FilterType.Year:\n        if (!view.parentId) {\n          return null;\n        }\n        let yearFilterItemType: YearFilterItemType;\n        switch (view.name) {\n          case 'albums':\n            yearFilterItemType = EntityType.Album;\n            break;\n          case 'songs':\n            yearFilterItemType = EntityType.Song;\n            break;\n          default:\n            return null;\n        }\n        const yearFilterConfig: YearFilterModelConfig = {\n          parentId: view.parentId,\n          itemType: yearFilterItemType\n        };\n        if (view.years) {\n          yearFilterConfig.initialSelection = {\n            years: view.years.split(',')\n          };\n        }\n        return yearFilterConfig;\n\n      default:\n        return null;\n    }\n  }\n}\n"]}