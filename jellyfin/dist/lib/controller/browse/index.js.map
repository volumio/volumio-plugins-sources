{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lib/controller/browse/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,4EAA6C;AAK7C,4FAAoE;AAEpE,MAAqB,gBAAgB;IAInC,YAAY,iBAAoC;;QAFhD,sDAAsC;QAGpC,uBAAA,IAAI,uCAAsB,iBAAiB,MAAA,CAAC;IAC9C,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,KAAK,CAAC,SAAS,CAAC,GAAW;QACzB,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QAC5C,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,UAAU,CAAC,GAAW;QAC1B,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;QAElE,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QAC5C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CAKF;AAhDD,mCAgDC;uKAH6B,GAAW;IACrC,OAAO,4BAAkB,CAAC,UAAU,CAAC,GAAG,EAAE,uBAAA,IAAI,2CAAmB,CAAC,CAAC;AACrE,CAAC","sourcesContent":["import ConnectionManager from '../../connection/ConnectionManager';\nimport jellyfin from '../../JellyfinContext';\nimport BaseViewHandler from './view-handlers/BaseViewHandler';\nimport { ExplodedTrackInfo } from './view-handlers/Explodable';\nimport View from './view-handlers/View';\nimport { RenderedPage } from './view-handlers/ViewHandler';\nimport ViewHandlerFactory from './view-handlers/ViewHandlerFactory';\n\nexport default class BrowseController {\n\n  #connectionManager: ConnectionManager;\n\n  constructor(connectionManager: ConnectionManager) {\n    this.#connectionManager = connectionManager;\n  }\n\n  /*\n   *  Uri follows a hierarchical view structure, starting with 'jellyfin'.\n   * - If nothing follows 'jellyfin', the view would be 'root' (show server list)\n   * - The next segment that follows is 'serverId', i.e. 'jellyfin/{username}@{serverId}'. If there are no further segments, the view would be 'userViews' (shows user views for the server specified by serverId)\n   *\n   * After 'jellyfin/{username}@{serverId}', the uri consists of segments representing the following views:\n   * - library[@parentId=...]: shows 'Albums', 'Artists'...for the specified library\n   * - albums[@parentId=...][@artistId=...| @albumArtistId=...| @genreId=...][@startIndex=...][@viewType=latest|favorite][@search=...]: shows albums under the item specified by parentId, optionally filtered by artistId, albumArtistId, genreId...\n   * - artists[@parentId=...][@startIndex=...][@viewType=favorite][@search=...]\n   * - albumArtists[@parentId=...][@startIndex=...][@viewType=favorite]\n   * - playlists[@startIndex=...]\n   * - genres[@parentId=...][@startIndex=...]\n   * - songs[@albumId=...] | [ [@playlistId=...| @parentId=...][@startIndex=...] ][@viewType=recentlyPlayed|frequentlyPlayed|favorite][@search=...]\n   * - folder[@parentId=...][@startIndex=...]: lists contents of specified folder. Folders are shown in userViews when 'folder view' is enabled in Jellyfin.\n   *\n   */\n  async browseUri(uri: string): Promise<RenderedPage> {\n    jellyfin.getLogger().info(`[jellyfin-browse] browseUri: ${uri}`);\n\n    const handler = await this.#getHandler(uri);\n    return handler.browse();\n  }\n\n  /**\n   * Explodable uris:\n   * - song[@songId=...]\n   * - songs[@albumId=...] | [ [@playlistId=...| @parentId=...] ]\n   * - albums[@parentId=...][@genreId=...| @artistId=...| @albumArtistId=...]\n   *\n   */\n  async explodeUri(uri: string): Promise<ExplodedTrackInfo[]> {\n    jellyfin.getLogger().info(`[jellyfin-browse] explodeUri: ${uri}`);\n\n    const handler = await this.#getHandler(uri);\n    return handler.explode();\n  }\n\n  #getHandler<V extends View>(uri: string): Promise<BaseViewHandler<V>> {\n    return ViewHandlerFactory.getHandler(uri, this.#connectionManager);\n  }\n}\n"]}