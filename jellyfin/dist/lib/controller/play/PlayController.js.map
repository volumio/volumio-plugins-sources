{"version":3,"file":"PlayController.js","sourceRoot":"","sources":["../../../../src/lib/controller/play/PlayController.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport libQ from 'kew';\n\nimport { getPlaystateApi } from '@jellyfin/sdk/lib/utils/api/playstate-api';\nimport ConnectionManager from '../../connection/ConnectionManager';\nimport ServerConnection from '../../connection/ServerConnection';\nimport { Song } from '../../entities';\nimport jellyfin from '../../JellyfinContext';\nimport Model, { ModelType } from '../../model';\nimport { ExplodedTrackInfo } from '../browse/view-handlers/Explodable';\nimport ServerHelper from '../../util/ServerHelper';\nimport { kewToJSPromise } from '../../util';\nimport ViewHelper from '../browse/view-handlers/ViewHelper';\nimport StopWatch from '../../util/StopWatch';\n\ninterface PlaybackInfo {\n  song: Song;\n  connection: ServerConnection;\n  streamUrl: string;\n  lastStatus?: MpdState['status'];\n}\n\ninterface LastPlaybackReport {\n  type: ApiReportPlaybackParams['type'];\n  seek: number;\n}\n\ninterface MonitoredPlaybacks {\n  current: Required<PlaybackInfo> & { lastReport?: LastPlaybackReport, timer: StopWatch } | null;\n  pending: Omit<PlaybackInfo, 'lastStatus'> & { lastReport?: LastPlaybackReport, timer: StopWatch } | null;\n}\n\ninterface MpdState {\n  status: 'play' | 'stop' | 'pause';\n  seek: number;\n  uri: string;\n}\n\ninterface ApiReportPlaybackParams {\n  type: 'start' | 'stop' | 'pause' | 'unpause' | 'timeupdate';\n  song: Song;\n  connection: ServerConnection;\n  seek: number; // Milliseconds\n}\n\nexport default class PlayController {\n\n  #mpdPlugin: any;\n  #connectionManager: ConnectionManager;\n  #mpdPlayerStateListener: (() => void) | null;\n  #monitoredPlaybacks: MonitoredPlaybacks;\n  #volumioPushStateListener: VolumioPushStateListener | null;\n  #volumioPushStateHandler: ((state: any) => void) | null;\n\n  constructor(connectionManager: ConnectionManager) {\n    this.#mpdPlugin = jellyfin.getMpdPlugin();\n    this.#connectionManager = connectionManager;\n    this.#mpdPlayerStateListener = null;\n    this.#monitoredPlaybacks = { current: null, pending: null };\n    this.#volumioPushStateListener = null;\n    this.#volumioPushStateHandler = null;\n  }\n\n  #addListeners() {\n    if (!this.#mpdPlayerStateListener) {\n      this.#mpdPlayerStateListener = this.#handleMpdPlayerEvent.bind(this);\n      this.#mpdPlugin.clientMpd.on('system-player', this.#mpdPlayerStateListener);\n    }\n    if (!this.#volumioPushStateListener) {\n      const psl = this.#volumioPushStateListener = new VolumioPushStateListener();\n      this.#volumioPushStateHandler = psl.handleVolumioPushState.bind(psl);\n      jellyfin.volumioCoreCommand?.addCallback('volumioPushState', this.#volumioPushStateHandler);\n    }\n  }\n\n  #removeListeners() {\n    if (this.#mpdPlayerStateListener) {\n      this.#mpdPlugin.clientMpd.removeListener('system-player', this.#mpdPlayerStateListener);\n      this.#mpdPlayerStateListener = null;\n    }\n    if (this.#volumioPushStateListener) {\n      const listeners = jellyfin.volumioCoreCommand?.callbacks?.['volumioPushState'] || [];\n      const index = listeners.indexOf(this.#volumioPushStateHandler);\n      if (index >= 0) {\n        jellyfin.volumioCoreCommand.callbacks['volumioPushState'].splice(index, 1);\n      }\n      this.#volumioPushStateHandler = null;\n      this.#volumioPushStateListener = null;\n    }\n  }\n\n  /**\n   * Track uri:\n   * jellyfin/{username}@{serverId}/song@songId={songId}\n   */\n  async clearAddPlayTrack(track: ExplodedTrackInfo): Promise<void> {\n    jellyfin.getLogger().info(`[jellyfin-play] clearAddPlayTrack: ${track.uri}`);\n\n    const {song, connection} = await this.getSongFromTrack(track);\n    const streamUrl = this.#getStreamUrl(song, connection);\n    this.#monitoredPlaybacks.pending = { song, connection, streamUrl, timer: new StopWatch() };\n    this.#addListeners();\n    await this.#doPlay(streamUrl, track);\n    await this.#markPlayed(song, connection);\n  }\n\n  // Returns kew promise!\n  stop() {\n    jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.stop();\n  }\n\n  // Returns kew promise!\n  pause() {\n    jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.pause();\n  }\n\n  // Returns kew promise!\n  resume() {\n    jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.resume();\n  }\n\n  // Returns kew promise!\n  seek(position: number) {\n    jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.seek(position);\n  }\n\n  // Returns kew promise!\n  next() {\n    jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.next();\n  }\n\n  // Returns kew promise!\n  previous() {\n    jellyfin.getStateMachine().setConsumeUpdateService(undefined);\n    return jellyfin.getStateMachine().previous();\n  }\n\n  dispose() {\n    this.#removeListeners();\n    this.#monitoredPlaybacks = { current: null, pending: null };\n  }\n\n  async prefetch(track: ExplodedTrackInfo) {\n    const gaplessPlayback = jellyfin.getConfigValue('gaplessPlayback', true);\n    if (!gaplessPlayback) {\n      /**\n       * Volumio doesn't check whether `prefetch()` is actually performed or\n       * successful (such as inspecting the result of the function call) -\n       * it just sets its internal state variable `prefetchDone`\n       * to `true`. This results in the next track being skipped in cases\n       * where prefetch is not performed or fails. So when we want to signal\n       * that prefetch is not done, we would have to directly falsify the\n       * statemachine's `prefetchDone` variable.\n       */\n      jellyfin.getLogger().info('[jellyfin-play] Prefetch disabled');\n      jellyfin.getStateMachine().prefetchDone = false;\n      return;\n    }\n    let song: Song, connection: ServerConnection, streamUrl;\n    try {\n      ({song, connection} = await this.getSongFromTrack(track));\n      streamUrl = this.#getStreamUrl(song, connection);\n    }\n    catch (error: any) {\n      jellyfin.getLogger().error(`[jellyfin-play] Prefetch failed: ${error}`);\n      jellyfin.getStateMachine().prefetchDone = false;\n      return;\n    }\n    this.#monitoredPlaybacks.pending = { song, connection, streamUrl, timer: new StopWatch() };\n    const mpdPlugin = this.#mpdPlugin;\n    return kewToJSPromise(mpdPlugin.sendMpdCommand(`addid \"${streamUrl}\"`, [])\n      .then((addIdResp: {Id: string}) => this.#mpdAddTags(addIdResp, track))\n      .then(() => {\n        jellyfin.getLogger().info(`[jellyfin-play] Prefetched and added song to MPD queue: ${song.name}`);\n        return mpdPlugin.sendMpdCommand('consume 1', []);\n      }));\n  }\n\n  // Returns kew promise!\n  #mpdAddTags(mpdAddIdResponse: { Id: string }, track: ExplodedTrackInfo) {\n    const songId = mpdAddIdResponse?.Id;\n    // Set tags so that songs show the same title, album and artist as Jellyfin.\n    // For songs that do not have metadata - either because it's not provided or the\n    // Song format does not support it - mpd will return different info than Jellyfin if we do\n    // Not set these tags beforehand. This also applies to DSFs - even though they support\n    // Metadata, mpd will not read it because doing so incurs extra overhead and delay.\n    if (songId !== undefined) {\n      const cmdAddTitleTag = {\n        command: 'addtagid',\n        parameters: [ songId, 'title', track.title ]\n      };\n      const cmdAddAlbumTag = {\n        command: 'addtagid',\n        parameters: [ songId, 'album', track.album ]\n      };\n      const cmdAddArtistTag = {\n        command: 'addtagid',\n        parameters: [ songId, 'artist', track.artist ]\n      };\n\n      return this.#mpdPlugin.sendMpdCommandArray([ cmdAddTitleTag, cmdAddAlbumTag, cmdAddArtistTag ]);\n    }\n    return libQ.resolve();\n  }\n\n  #getStreamUrl(song: Song, connection: ServerConnection): string {\n    const source = song.mediaSources?.[0];\n    const stream = source?.MediaStreams?.[0];\n    if (!stream || !source) {\n      throw Error(`No media streams found for song ${song.name}`);\n    }\n\n    const container = source.Container ? `.${source.Container}` : '';\n    const path = `/Audio/${song.id}/stream${container}`;\n    const pathUrlObj = new URL(path, connection.api.basePath);\n\n    pathUrlObj.searchParams.set('static', 'true');\n    if (source.Id) {\n      pathUrlObj.searchParams.set('mediaSourceId', source.Id);\n    }\n    if (source.ETag) {\n      pathUrlObj.searchParams.set('tag', source.ETag);\n    }\n    const streamUrl = pathUrlObj.toString();\n    const safeUri = streamUrl.replace(/\"/g, '\\\\\"');\n\n    jellyfin.getLogger().info(`[jellyfin-play] Stream URL for ${song.name}: ${safeUri}`);\n\n    return safeUri;\n  }\n\n  // Returns kew promise!\n  #doPlay(streamUrl: string, track: ExplodedTrackInfo) {\n    const mpdPlugin = this.#mpdPlugin;\n\n    return mpdPlugin.sendMpdCommand('stop', [])\n      .then(() => {\n        return mpdPlugin.sendMpdCommand('clear', []);\n      })\n      .then(() => {\n        return mpdPlugin.sendMpdCommand(`load \"${streamUrl}\"`, []);\n      })\n      .fail(() => {\n        // Send 'addid' command instead of 'add' to get mpd's Id of the song added.\n        // We can then add tags using mpd's song Id.\n        return mpdPlugin.sendMpdCommand(`addid \"${streamUrl}\"`, []);\n      })\n      .then((addIdResp: {Id: string}) => this.#mpdAddTags(addIdResp, track))\n      .then(() => {\n        jellyfin.getStateMachine().setConsumeUpdateService('mpd', true, false);\n        return mpdPlugin.sendMpdCommand('play', []);\n      });\n  }\n\n  async #markPlayed(song: Song, connection: ServerConnection): Promise<void> {\n    const playstateApi = getPlaystateApi(connection.api);\n    try {\n      if (!connection.auth?.User?.Id) {\n        throw Error('No auth');\n      }\n      await playstateApi.markPlayedItem({\n        userId: connection.auth.User.Id,\n        itemId: song.id,\n        datePlayed: (new Date()).toUTCString()\n      });\n      jellyfin.getLogger().info(`[jellyfin-play]: Mark song ${song.name} as played by ${connection.auth.User.Name}.`);\n    }\n    catch (error: any) {\n      jellyfin.getLogger().info(`[jellyfin-play]: Failed to mark song ${song.name} as played: ${error.message}`);\n    }\n  }\n\n  async getSongFromTrack(track: ExplodedTrackInfo): Promise<{song: Song, connection: ServerConnection}> {\n    const views = ViewHelper.getViewsFromUri(track.uri);\n    const maybeSongView = views.pop() as any;\n    const { songId, username, serverId } = maybeSongView;\n\n    if (!songId || !username || !serverId) {\n      throw Error(`Invalid track uri: ${track.uri}`);\n    }\n\n    const targetServer = ServerHelper.getOnlineServerByIdAndUsername(serverId, username);\n    if (!targetServer) {\n      throw Error('Server unavailable');\n    }\n\n    const connection = await this.#connectionManager.getAuthenticatedConnection(\n      targetServer, username, ServerHelper.fetchPasswordFromConfig.bind(ServerHelper));\n    const model = Model.getInstance(ModelType.Song, connection);\n    const song = await model.getSong(songId);\n\n    if (!song) {\n      throw Error(`Failed to obtain song from track uri: ${track.uri}`);\n    }\n\n    return {\n      song,\n      connection\n    };\n  }\n\n  #millisecondsToTicks(seconds: number) {\n    return seconds * 10000;\n  }\n\n  async #apiReportPlayback(params: ApiReportPlaybackParams): Promise<void> {\n    const { type, song, connection, seek } = params;\n    const positionTicks = this.#millisecondsToTicks(seek);\n    try {\n      if (!connection.auth?.User?.Id) {\n        throw Error('No auth');\n      }\n      const playstateApi = getPlaystateApi(connection.api);\n      if (type === 'start') {\n        await playstateApi.reportPlaybackStart({\n          playbackStartInfo: {\n            ItemId: song.id,\n            PositionTicks: positionTicks\n          }\n        });\n      }\n      else if (type === 'stop') {\n        await playstateApi.reportPlaybackStopped({\n          playbackStopInfo: {\n            ItemId: song.id,\n            PositionTicks: positionTicks\n          }\n        });\n      }\n      else if (type === 'pause') {\n        await playstateApi.reportPlaybackProgress({\n          playbackProgressInfo: {\n            ItemId: song.id,\n            IsPaused: true,\n            PositionTicks: positionTicks\n          }\n        });\n      }\n      else if (type === 'unpause') {\n        await playstateApi.reportPlaybackProgress({\n          playbackProgressInfo: {\n            ItemId: song.id,\n            IsPaused: false,\n            PositionTicks: positionTicks\n          }\n        });\n      }\n      else { // Type: timeupdate\n        await playstateApi.reportPlaybackProgress({\n          playbackProgressInfo: {\n            ItemId: song.id,\n            PositionTicks: positionTicks\n          }\n        });\n      }\n      jellyfin.getLogger().info(`[jellyfin-play]: Reported '${type}' for song: ${song.name} (at ${seek} ms)`);\n    }\n    catch (error: any) {\n      jellyfin.getLogger().error(`[jellyfin-play]: Failed to report '${type}' for song '${song.name}': ${error.message}`);\n    }\n  }\n\n  async #handleMpdPlayerEvent() {\n\n    const __apiReportPlayback = (playbackInfo: Required<PlaybackInfo> &\n      { lastReport?: LastPlaybackReport, timer: StopWatch }, currentStatus: MpdState['status']) => {\n      const reportPayload = {\n        song: playbackInfo.song,\n        connection: playbackInfo.connection\n      };\n      const lastStatus = playbackInfo.lastStatus;\n      playbackInfo.lastStatus = currentStatus;\n      let reportType: ApiReportPlaybackParams['type'];\n      let seek;\n      switch (currentStatus) {\n        case 'pause':\n          reportType = 'pause';\n          playbackInfo.timer.stop();\n          seek = mpdState.seek;\n          break;\n\n        case 'play':\n          if (lastStatus === 'pause') {\n            reportType = 'unpause';\n          }\n          else if (lastStatus === 'play') {\n            reportType = 'timeupdate';\n          }\n          else { // LastStatus: stop\n            reportType = 'start';\n          }\n          seek = mpdState.seek;\n          playbackInfo.timer.start(seek);\n          break;\n\n        case 'stop':\n        default:\n          reportType = 'stop';\n          // For 'stop' events, MPD state does not include the seek position.\n          // We would have to get this value from playbackInfo's internal timer.\n          seek = playbackInfo.timer.stop().getElapsed();\n      }\n      // Avoid multiple reports of same type\n      if (playbackInfo.lastReport?.type === reportType &&\n          (reportType !== 'timeupdate' || playbackInfo.lastReport?.seek === seek)) {\n        return;\n      }\n      playbackInfo.lastReport = { type: reportType, seek };\n      return this.#apiReportPlayback({...reportPayload, seek, type: reportType});\n    };\n\n    const __refreshPlayerViewHeartIcon = (favorite: boolean) => {\n      jellyfin.getStateMachine().emitFavourites({ favourite: favorite });\n    };\n\n    const mpdState: MpdState = await kewToJSPromise(this.#mpdPlugin.getState());\n    // Current stream has not changed\n    if (mpdState.uri === this.#monitoredPlaybacks.current?.streamUrl) {\n      __refreshPlayerViewHeartIcon(this.#monitoredPlaybacks.current.song.favorite);\n      await __apiReportPlayback(this.#monitoredPlaybacks.current, mpdState.status);\n    }\n    // Stream previously fetched by the plugin and pending playback is now played\n    else if (mpdState.uri === this.#monitoredPlaybacks.pending?.streamUrl) {\n      const pending = this.#monitoredPlaybacks.pending;\n      __refreshPlayerViewHeartIcon(pending.song.favorite);\n      if (this.#monitoredPlaybacks.current && this.#monitoredPlaybacks.current.lastStatus !== 'stop') {\n        await __apiReportPlayback(this.#monitoredPlaybacks.current, 'stop');\n      }\n      this.#monitoredPlaybacks.current = {\n        ...pending,\n        lastStatus: 'stop'\n      };\n      this.#monitoredPlaybacks.pending = null;\n      await __apiReportPlayback(this.#monitoredPlaybacks.current, mpdState.status);\n    }\n    // Current stream has changed to one that was not loaded by the plugin\n    else if (this.#monitoredPlaybacks.current && this.#monitoredPlaybacks.current.lastStatus !== 'stop') {\n      await __apiReportPlayback(this.#monitoredPlaybacks.current, 'stop');\n    }\n  }\n}\n\n/**\n * VolumioPushStateListener exists only to call StateMachine's checkFavourites() when active service changes from 'jellyfin'.\n * The `checkFavorites()` method which will then refresh the 'heart' icon based on whether `state.uri` exists in Volumio favorites.\n * This method is supposed to be called within StateMachine's `pushState()`, but this never happens because it is chained to\n * Volumio commandRouter's `volumioPushState()`, which returns a promise that never resolves due to rest_api plugin not returning a promise\n * within its own pushState().\n * We only call `checKFavourites()` when the service has changed from 'jellyfin' to something else. This is to reinstate the 'heart' icon\n * to Volumio's default behaviour (which should always be 'off' given its current broken implementation).\n */\nclass VolumioPushStateListener {\n\n  #lastState: any | null;\n\n  constructor() {\n    this.#lastState = null;\n  }\n\n  handleVolumioPushState(state: any) {\n    if (this.#lastState?.service === 'jellyfin' && state.service !== 'jellyfin') {\n      jellyfin.getStateMachine().checkFavourites(state);\n    }\n    this.#lastState = state;\n  }\n}\n"]}