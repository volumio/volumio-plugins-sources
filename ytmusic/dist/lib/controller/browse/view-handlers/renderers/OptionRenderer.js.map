{"version":3,"file":"OptionRenderer.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/OptionRenderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { PageElement } from '../../../../types';\nimport { OptionSelectionView } from '../OptionSelectionViewHandler';\nimport { ContinuationBundle } from '../View';\nimport ViewHelper from '../ViewHelper';\nimport BaseRenderer, { RenderedListItem } from './BaseRenderer';\n\nconst EXCLUDE_VIEW_PARAMS = [ 'name', 'continuation', 'endpoint', 'continuationBundle' ];\n\nconst CHIP_STYLE_COMMON = 'display: inline-block; padding: 5px 12px; margin-right: 10px; border-radius: 5px;';\nconst CHIP_STYLE_UNSELECTED = `${CHIP_STYLE_COMMON} background: rgba(255, 255, 255, 0.15); color: #fff;`;\nconst CHIP_STYLE_SELECTED = `${CHIP_STYLE_COMMON} background: #fff; color: #000;`;\n\nexport interface ContinuationBundleOption {\n  type: 'continuationBundleOption';\n  continuationBundle: ContinuationBundle;\n  targetKey: string;\n}\n\nexport default class OptionRenderer extends BaseRenderer<PageElement.Option | ContinuationBundleOption> {\n\n  renderToListItem(data: PageElement.Option | ContinuationBundleOption): RenderedListItem | null {\n    if (data.type === 'continuationBundleOption') {\n      return this.#renderContinuationBundleOptionToListItem(data as ContinuationBundleOption);\n    }\n\n    const targetView: OptionSelectionView = {\n      name: 'optionSelection',\n      genericViewUri: this.#getGenericViewUri(),\n      option: data\n    };\n\n    return {\n      service: 'ytmusic',\n      type: 'item-no-menu',\n      title: this.#getDisplayText(data),\n      icon: 'fa fa-angle-down',\n      uri: `${this.uri}/${ViewHelper.constructUriSegmentFromView(targetView)}`\n    };\n  }\n\n  #renderContinuationBundleOptionToListItem(data: ContinuationBundleOption): RenderedListItem | null {\n    const bundle = data.continuationBundle;\n    const keyParts = data.targetKey.split('.');\n    const option = keyParts.reduce<any>((targetValue, key) => targetValue[key], bundle);\n    if (typeof option === 'object' && option.type === 'option') {\n      const targetView: OptionSelectionView = {\n        name: 'optionSelection',\n        fromContinuationBundle: '1',\n        continuationBundle: bundle,\n        targetKey: data.targetKey,\n        genericViewUri: this.#getGenericViewUri()\n      };\n\n      return {\n        service: 'ytmusic',\n        type: 'item-no-menu',\n        title: this.#getDisplayText(option),\n        icon: 'fa fa-angle-down',\n        uri: `${this.uri}/${ViewHelper.constructUriSegmentFromView(targetView)}`\n      };\n    }\n\n    return null;\n  }\n\n  #getGenericViewUri() {\n    const view = this.currentView;\n    const genericViewParams = Object.keys(view).reduce<Record<string, any>>((result, key) => {\n      if (!EXCLUDE_VIEW_PARAMS.includes(key)) {\n        result[key] = view[key];\n      }\n      return result;\n    }, {});\n    const genericView = {\n      name: view.name,\n      ...genericViewParams\n    };\n    return ViewHelper.constructUriSegmentFromView(genericView);\n  }\n\n  #getDisplayText(option: PageElement.Option): string {\n    if (option.subtype !== 'chipCloud') {\n      const selected = option.optionValues.find((ov) => ov.selected) || null;\n      return selected ? selected.text : option.optionValues[0].text;\n    }\n\n    // ChipCloud - show each option value as a chip\n    const displayText = option.optionValues.reduce((result, ov) => {\n      if (ov.isReset) {\n        return result;\n      }\n      const style = ov.selected ? CHIP_STYLE_SELECTED : CHIP_STYLE_UNSELECTED;\n      result += `<span style='${style}'>${ov.text}</span>`;\n\n      return result;\n    }, '');\n\n    return displayText;\n  }\n}\n"]}