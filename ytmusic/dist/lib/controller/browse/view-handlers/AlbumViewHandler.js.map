{"version":3,"file":"AlbumViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/AlbumViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,6EAA8C;AAC9C,0CAA2C;AAI3C,sDAA6I;AAE7I,sFAAmF;AAEnF,2CAA2C;AAQ3C,MAAqB,gBAAiB,SAAQ,gCAAiC;IAA/E;;QAEE,gDAA8C;IAyEhD,CAAC;IAvEC,KAAK,CAAC,MAAM;QACV,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;QAClC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,uBAAA,IAAI,qCAAa,IAAI,EAAE,CAAC;QAChE,IAAI,SAAS,IAAI,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE;YACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACnE,MAAM,0BAA0B,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,KAAK,SAAS,CAAC,CAAC;YACzF,IAAI,CAAC,0BAA0B,EAAE;gBAC/B,MAAM,YAAY,GAA6B;oBAC7C,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,wBAAO,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC;oBACvD,QAAQ,EAAE;wBACR,IAAI,EAAE,uBAAY,CAAC,MAAM;wBACzB,OAAO,EAAE;4BACP,QAAQ,EAAE,SAAS;yBACpB;qBACF;iBACF,CAAC;gBACF,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,YAAY,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;gBAC5F,IAAI,QAAQ,EAAE;oBACZ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC;wBAC5B,kBAAkB,EAAE,CAAE,MAAM,CAAE;wBAC9B,KAAK,EAAE,CAAE,QAAQ,CAAE;qBACpB,CAAC,CAAC;iBACJ;aACF;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAES,KAAK,CAAC,gBAAgB,CAAC,QACL;QAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,QAAQ,EAAE,IAAI,KAAK,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,KAAK,OAAO,EAAE;YAClE,uBAAA,IAAI,iCAAiB,QAAQ,CAAC,MAAkC,CAAC,MAAM,MAAA,CAAC;SACzE;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAES,gBAAgB,CAAC,IAA+F,EAAE,QAAqB;QAC/I,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;YACjD,kHAAkH;YAClH,IAAI,QAAQ,CAAC,MAAM,EAAE,IAAI,KAAK,OAAO,EAAE;gBACrC,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAiC,CAAC;gBAC/D,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC;gBACzD,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC;gBACrD,IAAI,OAAO,KAAK,WAAW,EAAE;oBAC3B,MAAM,UAAU,GAAG,EAAE,GAAG,IAAI,EAAE,CAAC;oBAC/B,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE;wBACrB,UAAU,CAAC,KAAK,GAAG;4BACjB,KAAK,EAAE,WAAW,CAAC,KAAK;yBACzB,CAAC;qBACH;oBACD,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,WAAW,CAAC,MAAM,EAAE;wBAC7C,UAAU,CAAC,OAAO,GAAG,CAAE,WAAW,CAAC,MAAM,CAAE,CAAC;wBAC5C,UAAU,CAAC,UAAU,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;qBACjD;oBACD,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;wBACzB,UAAU,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;qBAC9C;oBACD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;oBACvF,IAAI,QAAQ,EAAE;wBACZ,yBAAyB;wBACzB,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;qBAC1B;oBACD,OAAO,QAAQ,CAAC;iBACjB;aACF;SACF;QACD,OAAO,KAAK,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF;AA3ED,mCA2EC","sourcesContent":["import ytmusic from '../../../YTMusicContext';\nimport { ModelType } from '../../../model';\nimport { ContentItem, PageElement } from '../../../types';\nimport { PageContent, WatchContent, WatchContinuationContent } from '../../../types/Content';\nimport { Channel, EndpointLink, Album, Playlist, MusicItem } from '../../../types/ContentItem';\nimport { BrowseContinuationEndpoint, BrowseEndpoint, EndpointType, WatchContinuationEndpoint, WatchEndpoint } from '../../../types/Endpoint';\nimport { Option } from '../../../types/PageElement';\nimport MusicFolderViewHandler, { MusicFolderView } from './MusicFolderViewHandler';\nimport { RenderedPage } from './ViewHandler';\nimport { RendererType } from './renderers';\nimport { RenderedListItem } from './renderers/BaseRenderer';\nimport { ContinuationBundleOption } from './renderers/OptionRenderer';\n\nexport interface AlbumView extends MusicFolderView {\n  name: 'album'\n}\n\nexport default class AlbumViewHandler extends MusicFolderViewHandler<AlbumView> {\n\n  #albumArtist: ContentItem.Channel | undefined;\n\n  async browse(): Promise<RenderedPage> {\n    const page = await super.browse();\n    const { channelId, name: artistName } = this.#albumArtist || {};\n    if (channelId && artistName && page.navigation?.lists) {\n      const lastView = this.previousViews[this.previousViews.length - 1];\n      const isComingFromSameArtistView = (lastView?.endpoint?.payload?.browseId === channelId);\n      if (!isComingFromSameArtistView) {\n        const endpointLink: ContentItem.EndpointLink = {\n          type: 'endpointLink',\n          title: ytmusic.getI18n('YTMUSIC_MORE_FROM', artistName),\n          endpoint: {\n            type: EndpointType.Browse,\n            payload: {\n              browseId: channelId\n            }\n          }\n        };\n        const rendered = this.getRenderer(RendererType.EndpointLink).renderToListItem(endpointLink);\n        if (rendered) {\n          page.navigation.lists.unshift({\n            availableListViews: [ 'list' ],\n            items: [ rendered ]\n          });\n        }\n      }\n    }\n    return page;\n  }\n\n  protected async modelGetContents(endpoint: WatchEndpoint | BrowseEndpoint | WatchContinuationEndpoint |\n    BrowseContinuationEndpoint): Promise<PageContent | WatchContent | WatchContinuationContent | null> {\n    const model = this.getModel(ModelType.Endpoint);\n    const contents = await model.getContents(endpoint);\n    if (contents?.type === 'page' && contents.header?.type === 'album') {\n      this.#albumArtist = (contents.header as PageElement.AlbumHeader).artist;\n    }\n    return contents;\n  }\n\n  protected renderToListItem(data: Playlist | MusicItem | Channel | EndpointLink | Album | Option | ContinuationBundleOption, contents: PageContent): RenderedListItem | null {\n    if (data.type === 'song' || data.type === 'video') {\n      // Data possibly lacks album / artist / thumbnail info. Complete it by taking missing info from `contents.header`.\n      if (contents.header?.type === 'album') {\n        const albumHeader = contents.header as PageElement.AlbumHeader;\n        const albumId = albumHeader.endpoint?.payload.playlistId;\n        const dataAlbumId = data.endpoint.payload.playlistId;\n        if (albumId === dataAlbumId) {\n          const filledData = { ...data };\n          if (!filledData.album) {\n            filledData.album = {\n              title: albumHeader.title\n            };\n          }\n          if (!filledData.artists && albumHeader.artist) {\n            filledData.artists = [ albumHeader.artist ];\n            filledData.artistText = albumHeader.artist.name;\n          }\n          if (!filledData.thumbnail) {\n            filledData.thumbnail = albumHeader.thumbnail;\n          }\n          const rendered = this.getRenderer(RendererType.MusicItem).renderToListItem(filledData);\n          if (rendered) {\n            // Show track number only\n            rendered.albumart = null;\n          }\n          return rendered;\n        }\n      }\n    }\n    return super.renderToListItem(data, contents);\n  }\n}\n"]}