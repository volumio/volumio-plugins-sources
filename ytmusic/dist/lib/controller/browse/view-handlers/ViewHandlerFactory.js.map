{"version":3,"file":"ViewHandlerFactory.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ViewHandlerFactory.ts"],"names":[],"mappings":";;;;;AACA,0EAAkD;AAElD,8EAAsD;AACtD,kFAA0D;AAC1D,8FAAsE;AACtE,gFAAwD;AACxD,wEAAgD;AAChD,4EAAoD;AAEpD,8DAAsC;AAKtC,MAAM,kBAAkB,GAA2C;IACjE,MAAM,EAAE,yBAAe;IACvB,SAAS,EAAE,4BAAkB;IAC7B,OAAO,EAAE,8BAAoB;IAC7B,MAAM,EAAE,8BAAoB;IAC5B,OAAO,EAAE,0BAAgB;IACzB,UAAU,EAAE,6BAAmB;IAC/B,iBAAiB,EAAE,oCAA0B;IAC7C,QAAQ,EAAE,2BAAiB;CAC5B,CAAC;AAEF,MAAqB,kBAAkB;IAErC,MAAM,CAAC,UAAU,CAAiB,GAAW;QAC3C,MAAM,KAAK,GAAG,oBAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,aAAa,GAAG,KAAK,CAAC;QAE5B,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;SAChD;QAED,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;CACF;AAbD,qCAaC","sourcesContent":["\nimport AlbumViewHandler from './AlbumViewHandler';\nimport BaseViewHandler from './BaseViewHandler';\nimport GenericViewHandler from './GenericViewHandler';\nimport MusicItemViewHandler from './MusicItemViewHandler';\nimport OptionSelectionViewHandler from './OptionSelectionViewHandler';\nimport PlaylistViewHandler from './PlaylistViewHandler';\nimport RootViewHandler from './RootViewHandler';\nimport SearchViewHandler from './SearchViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\n\ntype HandlerClass<V extends View, T extends BaseViewHandler<V>> =\n  new (uri: string, currentView: V, previousViews: View[]) => T;\n\nconst VIEW_NAME_TO_CLASS: Record<string, HandlerClass<any, any>> = {\n  'root': RootViewHandler,\n  'generic': GenericViewHandler,\n  'video': MusicItemViewHandler,\n  'song': MusicItemViewHandler,\n  'album': AlbumViewHandler,\n  'playlist': PlaylistViewHandler,\n  'optionSelection': OptionSelectionViewHandler,\n  'search': SearchViewHandler\n};\n\nexport default class ViewHandlerFactory {\n\n  static getHandler<V extends View>(uri: string): BaseViewHandler<V> {\n    const views = ViewHelper.getViewsFromUri(uri);\n    const currentView = views.pop();\n    const previousViews = views;\n\n    if (!currentView) {\n      throw Error('Invalid URI: no parseable view.');\n    }\n\n    return new VIEW_NAME_TO_CLASS[currentView.name](uri, currentView, previousViews);\n  }\n}\n"]}