{"version":3,"file":"ExplodeHelper.js","sourceRoot":"","sources":["../../../src/lib/util/ExplodeHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import ytmusic from '../YTMusicContext';\nimport { ExplodedTrackInfo, QueueItem } from '../controller/browse/view-handlers/ExplodableViewHandler';\nimport { GenericView } from '../controller/browse/view-handlers/GenericViewHandler';\nimport { MusicItemView } from '../controller/browse/view-handlers/MusicItemViewHandler';\nimport View from '../controller/browse/view-handlers/View';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\nimport { ContentItem } from '../types';\nimport { EndpointType, WatchContinuationEndpoint, WatchEndpoint } from '../types/Endpoint';\n\nexport default class ExplodeHelper {\n\n  // Creates a bundle that contains the data needed by explode() to\n  // Generate the final exploded item.\n  static getExplodedTrackInfoFromMusicItem(data: ContentItem.MusicItem): ExplodedTrackInfo {\n    const result: ExplodedTrackInfo = {\n      type: data.type,\n      title: data.title,\n      artist: data.artistText || '',\n      album: data.album?.title || '',\n      albumart: data.thumbnail || '',\n      endpoint: data.endpoint // Watch endpoint\n    };\n    if (data.autoplayContext) {\n      result.autoplayContext = data.autoplayContext;\n    }\n    return result;\n  }\n\n  static validateExplodeUri(uri: string) {\n    // Current view\n    const view = ViewHelper.getViewsFromUri(uri).pop();\n\n    if (!view) {\n      return false;\n    }\n\n    /**\n     * Pre-v1.0 URIs do not have\n     */\n    switch (view.name) {\n      case 'video':\n      case 'song':\n        // ExplodeTrackData must be an object (pre-v1.0 is stringified)\n        return view.explodeTrackData && typeof view.explodeTrackData === 'object';\n\n      case 'playlist':\n      case 'album':\n        // Endpoints object must exist (pre-v1.0 is just albumId / playlistId)\n        return view.endpoints && typeof view.endpoints === 'object';\n\n      case 'generic':\n        // Endpoint must be an object (pre-v1.0 is stringified)\n        return view.endpoint && typeof view.endpoint === 'object';\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Converts a legacy URI (pre-v1.0) to one that current version can explode.\n   * Legacy URI:\n   * - song[@explodeTrackData=...]\n   * - video[@explodeTrackData=...]\n   * - album[@albumId=...]\n   * - artist[@artistId=...]\n   * - playlist[@playlistId=...]\n   * - generic[@endpoint=...] (endpoint must be of type 'watch_playlist')\n   * @param {*} uri\n   * @returns Converted URI or `null` on failure\n   */\n  static async convertLegacyExplodeUri(uri: string) {\n    // Current view\n    const view = ViewHelper.getViewsFromUri(uri).pop();\n\n    if (!view) {\n      return null;\n    }\n\n    let targetView: View | null = null;\n\n    // Conversion from pre-v1.0\n    if ((view.name === 'video' && view.videoId) ||\n      (view.name === 'song' && view.songId)) {\n\n      let explodeTrackData;\n      try {\n        explodeTrackData = JSON.parse(decodeURIComponent(view.explodeTrackData));\n      }\n      catch (error) {\n        explodeTrackData = view.explodeTrackData;\n      }\n      if (typeof explodeTrackData !== 'object') {\n        ytmusic.getLogger().error('[ytmusic] Failed to obtain explodeTrackData from legacy URI');\n        return null;\n      }\n\n      const { videoId, album, albumart, artist, title, playlistId, autoplayContext } = explodeTrackData;\n      if (!videoId || !title || !playlistId) {\n        ytmusic.getLogger().error('[ytmusic] Incomplete explodeTrackData from legacy URI');\n        return null;\n      }\n\n      const endpoint: WatchEndpoint = {\n        type: EndpointType.Watch,\n        payload: {\n          videoId,\n          playlistId\n        }\n      };\n\n      const convertedExplodeTrackData: ExplodedTrackInfo = {\n        type: view.name,\n        title,\n        album,\n        artist,\n        albumart,\n        endpoint\n      };\n\n      if (autoplayContext?.playlistId) {\n        const { playlistId, params, continuation, continueFromVideoId } = autoplayContext;\n        let fetchEndpoint: WatchEndpoint | WatchContinuationEndpoint;\n        if (continuation) {\n          fetchEndpoint = {\n            type: EndpointType.WatchContinuation,\n            payload: {\n              token: continuation,\n              playlistId\n            }\n          };\n        }\n        else {\n          fetchEndpoint = {\n            type: EndpointType.Watch,\n            payload: {\n              playlistId\n            }\n          };\n        }\n        if (params) {\n          fetchEndpoint.payload.params = params;\n        }\n        if (continueFromVideoId) {\n          fetchEndpoint.payload.videoId = continueFromVideoId;\n        }\n        convertedExplodeTrackData.autoplayContext = {\n          fetchEndpoint\n        };\n      }\n\n      const musicItemView: MusicItemView = {\n        name: view.name,\n        explodeTrackData: convertedExplodeTrackData\n      };\n      targetView = musicItemView;\n    }\n    else if (view.name === 'playlist' && view.playlistId) {\n      let playlistId = decodeURIComponent(view.playlistId);\n      if (playlistId.startsWith('VL')) {\n        playlistId = playlistId.substring(2);\n      }\n      const genericView: GenericView = {\n        name: 'generic',\n        endpoint: {\n          type: EndpointType.Watch,\n          payload: {\n            playlistId: decodeURIComponent(playlistId)\n          }\n        }\n      };\n      targetView = genericView;\n    }\n    else if (view.name === 'album' && view.albumId) {\n      const genericView: GenericView = {\n        name: 'generic',\n        endpoint: {\n          type: EndpointType.Browse,\n          payload: {\n            browseId: decodeURIComponent(view.albumId)\n          }\n        }\n      };\n      targetView = genericView;\n    }\n    else if (view.name === 'artist' && view.artistId) {\n      const genericView: GenericView = {\n        name: 'generic',\n        endpoint: {\n          type: EndpointType.Browse,\n          payload: {\n            browseId: decodeURIComponent(view.artistId)\n          }\n        }\n      };\n      targetView = genericView;\n    }\n    else if (view.name === 'generic' && view.endpoint?.actionType === 'watchPlaylist') {\n      const { playlistId, params, videoId } = view.endpoint.payload || {};\n      if (playlistId) {\n        const endpoint: WatchEndpoint = {\n          type: EndpointType.Watch,\n          payload: {\n            playlistId\n          }\n        };\n        if (params) {\n          endpoint.payload.params = params;\n        }\n        if (videoId) {\n          endpoint.payload.videoId = videoId;\n        }\n        const genericView: GenericView = {\n          name: 'generic',\n          endpoint\n        };\n        targetView = genericView;\n      }\n    }\n\n    if (targetView) {\n      return ViewHelper.constructUriFromViews([ {name: 'root'}, targetView ]);\n    }\n\n    return null;\n  }\n\n  static createQueueItemFromExplodedTrackInfo(info: ExplodedTrackInfo): QueueItem {\n    return {\n      'service': 'ytmusic',\n      'uri': this.#getUriFromExplodedTrackInfo(info),\n      'albumart': info.albumart,\n      'artist': info.artist,\n      'album': info.album,\n      'name': info.title,\n      'title': info.title\n    };\n  }\n\n  static #getUriFromExplodedTrackInfo(info: ExplodedTrackInfo) {\n    /**\n     * `explodeTrackData` - necessary because Volumio adds track uri in\n     * its own playlist / favorites / Last 100, and explodes them again when\n     * played.\n     */\n    const targetView: MusicItemView = {\n      name: info.type,\n      explodeTrackData: info\n    };\n    return `ytmusic/${ViewHelper.constructUriSegmentFromView(targetView)}`;\n  }\n}\n"]}