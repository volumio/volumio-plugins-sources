{"version":3,"file":"YTMusicNowPlayingMetadataProvider.js","sourceRoot":"","sources":["../../../src/lib/util/YTMusicNowPlayingMetadataProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { MetadataAlbumInfo, MetadataArtistInfo, MetadataSongInfo, NowPlayingMetadataProvider } from 'now-playing-common';\nimport Model, { ModelType } from '../model';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\nimport ytmusic from '../YTMusicContext';\nimport PlayController from '../controller/play/PlayController';\nimport { BrowseEndpoint, EndpointType } from '../types/Endpoint';\nimport { AlbumView } from '../controller/browse/view-handlers/AlbumViewHandler';\nimport { PageElement } from '../types';\n\nexport default class YTMusicNowPlayingMetadataProvider implements NowPlayingMetadataProvider {\n\n  version: '1.0.0';\n\n  constructor() {\n    this.version = '1.0.0';\n  }\n\n  async getSongInfo(songTitle: string, albumTitle?: string, artistName?: string, uri?: string): Promise<MetadataSongInfo | null> {\n    ytmusic.getLogger().info(`[ytmusic] Fetch song info for Now Playing plugin. URI: ${uri}`);\n\n    // URI: ytmusic/[song/video]@explodeTrackData={...}\n    const { videoId, info: playbackInfo } = (uri ? await PlayController.getPlaybackInfoFromUri(uri) : null) || { videoId: null, info: null };\n    if (!playbackInfo) {\n      ytmusic.getLogger().error('[ytmusic] Error fetching song info for Now Playing plugin: no playback info from URI');\n      return null;\n    }\n\n    const song: MetadataSongInfo = {\n      title: playbackInfo.title || songTitle,\n      image: playbackInfo.thumbnail,\n      artist: null,\n      album: null\n    };\n\n    if (playbackInfo.album.albumId) {\n      song.album = await this.getAlbumInfo(playbackInfo.album.title || albumTitle, artistName, { albumId: playbackInfo.album.albumId });\n    }\n\n    if (playbackInfo.artist.channelId) {\n      song.artist = await this.getArtistInfo(playbackInfo.artist.name || artistName, { channelId: playbackInfo.artist.channelId });\n    }\n\n    if (videoId) {\n      try {\n        song.lyrics = await Model.getInstance(ModelType.MusicItem).getLyrics(videoId);\n      }\n      catch (error) {\n        ytmusic.getLogger().error(ytmusic.getErrorMessage('[ytmusic] Error fetching lyrics:', error));\n        song.lyrics = null;\n      }\n    }\n\n    return song;\n  }\n\n  async getAlbumInfo(albumTitle?: string, artistName?: string, payload?: string | { albumId: string }): Promise<MetadataAlbumInfo | null> {\n    let albumId: string | null = null;\n    if (typeof payload === 'string') {\n      // URI: album@endpoints={ watch: ..., browse: ... }\n      ytmusic.getLogger().info(`[ytmusic] Fetch album info for Now Playing plugin. URI: ${payload}`);\n      const view = ViewHelper.getViewsFromUri(payload).pop();\n      if (view?.name !== 'album' || !view.endpoints || typeof view.endpoints !== 'object' || !view.endpoints.browse) {\n        ytmusic.getLogger().error('[ytmusic] Error fetching album info for Now Playing plugin: invalid URI');\n        return null;\n      }\n      albumId = (view as AlbumView).endpoints.browse.payload.browseId;\n    }\n    else {\n      albumId = payload?.albumId || null;\n    }\n    if (!albumId) {\n      ytmusic.getLogger().error('[ytmusic] Not fetching album info for Now Playing plugin: no album ID available');\n      return null;\n    }\n    const albumEndpoint: BrowseEndpoint = {\n      type: EndpointType.Browse,\n      payload: {\n        browseId: albumId\n      }\n    };\n    const model = Model.getInstance(ModelType.Endpoint);\n    const albumData = (await model.getContents(albumEndpoint))?.header as PageElement.AlbumHeader | undefined;\n    if (!albumData) {\n      ytmusic.getLogger().error('[ytmusic] Error fetching album info for Now Playing plugin: no data');\n      return null;\n    }\n    if (!albumTitle && !albumData.title) {\n      ytmusic.getLogger().error('[ytmusic] Error fetching album info for Now Playing plugin: data is missing title');\n      return null;\n    }\n    const album: MetadataAlbumInfo = {\n      title: albumData.title || albumTitle as string,\n      description: albumData.description || null,\n      image: albumData.thumbnail || null,\n      artist: await this.getArtistInfo(artistName, albumData.artist?.channelId ? { channelId: albumData.artist?.channelId } : undefined)\n    };\n\n    return album;\n  }\n\n  async getArtistInfo(artistName?: string, payload?: string | { channelId: string }): Promise<MetadataArtistInfo | null> {\n    let channelId: string | null = null;\n    if (typeof payload === 'string') {\n      // URI: generic@endpoint={...}\n      ytmusic.getLogger().info(`[ytmusic] Fetch artist info for Now Playing plugin. URI: ${payload}`);\n      const view = ViewHelper.getViewsFromUri(payload).pop();\n      if (view?.name !== 'generic' || !view.endpoint || typeof view.endpoint !== 'object' || view.type !== EndpointType.Browse) {\n        ytmusic.getLogger().error('[ytmusic] Error fetching artist info for Now Playing plugin: invalid URI');\n        return null;\n      }\n      channelId = (view.endpoint as BrowseEndpoint).payload.browseId;\n    }\n    else {\n      channelId = payload?.channelId || null;\n    }\n    if (!channelId) {\n      ytmusic.getLogger().error('[ytmusic] Not fetching artist info for Now Playing plugin: no channel ID available');\n      return null;\n    }\n    const channelEndpoint: BrowseEndpoint = {\n      type: EndpointType.Browse,\n      payload: {\n        browseId: channelId\n      }\n    };\n    const model = Model.getInstance(ModelType.Endpoint);\n    const channelData = (await model.getContents(channelEndpoint))?.header;\n    if (!channelData) {\n      ytmusic.getLogger().error('[ytmusic] Error fetching artist info for Now Playing plugin: no data');\n      return null;\n    }\n    if (!artistName && !channelData.title) {\n      ytmusic.getLogger().error('[ytmusic] Error fetching artist info for Now Playing plugin: data is missing name');\n      return null;\n    }\n    const artist: MetadataArtistInfo = {\n      name: channelData.title || artistName as string,\n      description: channelData.description || null,\n      image: channelData.thumbnail || null\n    };\n\n    return artist;\n  }\n}\n"]}