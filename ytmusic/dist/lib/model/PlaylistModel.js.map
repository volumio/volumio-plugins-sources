{"version":3,"file":"PlaylistModel.js","sourceRoot":"","sources":["../../../src/lib/model/PlaylistModel.ts"],"names":[],"mappings":"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","sourcesContent":["import ytmusic from '../YTMusicContext';\nimport { PageElement } from '../types';\nimport { ContentOf } from '../types/Content';\nimport Endpoint, { EndpointType } from '../types/Endpoint';\nimport { SectionItem } from '../types/PageElement';\nimport { rnd, sleep } from '../util';\nimport EndpointHelper from '../util/EndpointHelper';\nimport EndpointModel from './EndpointModel';\n\nexport default class PlaylistModel extends EndpointModel {\n\n  async getContents<T extends Endpoint>(endpoint: T): Promise<ContentOf<T> | null> {\n    if (!EndpointHelper.isType(endpoint, EndpointType.Browse, EndpointType.BrowseContinuation)) {\n      throw Error(`PlaylistModel.getContents() expects endpoint type Browse or BrowseContinuation, but got ${endpoint?.type}`);\n    }\n\n    const contents = await super.getContents(endpoint);\n    const loadAll = ytmusic.getConfigValue('loadFullPlaylists');\n    if (!loadAll || !contents) {\n      return contents;\n    }\n\n    // Look for section with continuation - there should only be one, if any.\n    const targetSection = this.#findPlaylistContentSection(contents.sections);\n    if (targetSection?.continuation) {\n      ytmusic.getLogger().info(`[ytmusic] PlaylistModel is going to recursively fetch continuation items for playlist with endpoint: ${JSON.stringify(endpoint)}).`);\n      const continuationItems = await this.getContinuationItems(targetSection.continuation);\n      targetSection.items.push(...continuationItems);\n      ytmusic.getLogger().info(`[ytmusic] Total ${continuationItems.length} continuation items fetched. Total items in playlist: ${targetSection.items.length}.`);\n      delete targetSection.continuation;\n    }\n\n    return contents;\n  }\n\n  // Do not set this method as private - tsc will down-level `super.getContents()` to wrong JS syntax.\n  protected async getContinuationItems(continuation: PageElement.Section['continuation'], recursive = true, currentItems: SectionItem[] = []) {\n    if (!continuation) {\n      return [];\n    }\n\n    const contents = await super.getContents(continuation.endpoint);\n\n    // There should only be one section for playlist continuation items\n    const targetSection = contents?.sections?.[0];\n    if (targetSection?.items && targetSection.items.length > 0) {\n      currentItems.push(...targetSection.items);\n\n      ytmusic.getLogger().info(`[ytmusic] Fetched ${targetSection.items.length} continuation items.`);\n\n      if (recursive && targetSection.continuation) {\n        await sleep(rnd(200, 400)); // Rate limit\n        await this.getContinuationItems(targetSection.continuation, recursive, currentItems);\n        delete targetSection.continuation;\n      }\n    }\n\n    return currentItems;\n  }\n\n  #findPlaylistContentSection(sections?: PageElement.Section[]): PageElement.Section | null {\n    if (!sections) {\n      return null;\n    }\n\n    for (const section of sections) {\n      if (section.playlistId) {\n        return section;\n      }\n\n      const nestedSections = section.items?.filter((item) => item.type === 'section');\n      if (nestedSections?.length > 0) {\n        const result = this.#findPlaylistContentSection(nestedSections as PageElement.Section[]);\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n}\n"]}