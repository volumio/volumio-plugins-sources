{"version":3,"file":"MusicItemModel.js","sourceRoot":"","sources":["../../../src/lib/model/MusicItemModel.ts"],"names":[],"mappings":"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","sourcesContent":["import ytmusic from '../YTMusicContext';\nimport Innertube, { FormatOptions, YTNodes, Endpoints as YTEndpoints, Utils as YTUtils, YTMusic } from 'volumio-youtubei.js';\nimport { BaseModel } from './BaseModel';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport Endpoint, { EndpointType } from '../types/Endpoint';\nimport MusicItemPlaybackInfo from '../types/MusicItemPlaybackInfo';\nimport { ContentItem } from '../types';\nimport EndpointHelper from '../util/EndpointHelper';\n\n// https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2\nconst ITAG_TO_BITRATE: Record<string, string> = {\n  '139': '48',\n  '140': '128',\n  '141': '256',\n  '171': '128',\n  '249': '50',\n  '250': '70',\n  '251': '160'\n};\n\nconst BEST_AUDIO_FORMAT: FormatOptions = {\n  type: 'audio',\n  format: 'any',\n  quality: 'best'\n};\n\nexport default class MusicItemModel extends BaseModel {\n\n  async getPlaybackInfo(endpoint: Endpoint): Promise<MusicItemPlaybackInfo | null> {\n    if (!EndpointHelper.isType(endpoint, EndpointType.Watch) || !endpoint.payload.videoId) {\n      throw Error('Invalid endpoint');\n    }\n    const { innertube } = await this.getInnertube();\n    const trackInfo = await this.#getTrackInfo(innertube, endpoint);\n    const streamData = this.#extractStreamData(innertube, trackInfo);\n\n    // `trackInfo` does not contain album info - need to obtain from item in Up Next tab.\n    const infoFromUpNextTab = this.#getInfoFromUpNextTab(trackInfo, endpoint);\n    let musicItem: ContentItem.MusicItem | null = null;\n    let album: ContentItem.MusicItem['album'] | null = null;\n    if (infoFromUpNextTab && (infoFromUpNextTab.type === 'video' || infoFromUpNextTab.type === 'song')) {\n      musicItem = infoFromUpNextTab;\n      album = musicItem.album;\n    }\n\n    // `trackInfo` sometimes ignores hl / gl (lang / region), so titles and such could be in wrong language.\n    // Furthermore, the artist's channelId is possibly wrong for private uploads.\n    // We return info from item in Up Next tab, while using trackInfo as fallback.\n    let channelId: string | undefined;\n    if (musicItem?.artists && musicItem.artists[0]?.channelId) {\n      channelId = musicItem.artists[0].channelId;\n    }\n    else {\n      channelId = trackInfo.basic_info.channel_id;\n    }\n    return {\n      title: musicItem?.title || trackInfo.basic_info.title,\n      artist: {\n        channelId,\n        name: musicItem?.artistText || trackInfo.basic_info.author\n      },\n      album: {\n        albumId: album?.albumId,\n        title: musicItem?.album?.title || album?.title\n      },\n      thumbnail: InnertubeResultParser.parseThumbnail(trackInfo.basic_info.thumbnail) || undefined,\n      stream: streamData,\n      duration: trackInfo.basic_info.duration,\n      addToHistory: () => {\n        return trackInfo.addToWatchHistory();\n      },\n      radioEndpoint: musicItem?.radioEndpoint\n    };\n  }\n\n  // Based on Innertube.Music.#fetchInfoFromListItem(), which requires MusicTwoRowItem which we don't have.\n  async #getTrackInfo(innertube: Innertube, endpoint: Endpoint) {\n    const innertubeEndpoint = new YTNodes.NavigationEndpoint({});\n    innertubeEndpoint.metadata.api_url = YTEndpoints.PlayerEndpoint.PATH;\n    innertubeEndpoint.payload = YTEndpoints.PlayerEndpoint.build({\n      video_id: endpoint.payload.videoId,\n      playlist_id: endpoint.payload.playlistId,\n      params: endpoint.payload.params,\n      sts: innertube.session.player?.sts\n    });\n\n    const player_response = innertubeEndpoint.call(innertube.actions, {\n      client: 'YTMUSIC',\n      playbackContext: {\n        contentPlaybackContext: {\n          ...{\n            signatureTimestamp: innertube.session.player?.sts\n          }\n        }\n      }\n    });\n\n    const next_response = innertubeEndpoint.call(innertube.actions, {\n      client: 'YTMUSIC',\n      enablePersistentPlaylistPanel: true,\n      override_endpoint: '/next'\n    });\n\n    const cpn = YTUtils.generateRandomString(16);\n\n    const response = await Promise.all([ player_response, next_response ]);\n\n    return new YTMusic.TrackInfo(response, innertube.actions, cpn);\n  }\n\n  #extractStreamData(innertube: Innertube, info: YTMusic.TrackInfo): MusicItemPlaybackInfo['stream'] | null {\n    const preferredFormat = {\n      ...BEST_AUDIO_FORMAT\n    };\n    const prefetch = ytmusic.getConfigValue('prefetch');\n    const preferOpus = prefetch && ytmusic.getConfigValue('preferOpus');\n    if (preferOpus) {\n      ytmusic.getLogger().info('[ytmusic] Preferred format is Opus');\n      preferredFormat.format = 'opus';\n    }\n    let format;\n    try {\n      format = info.chooseFormat(preferredFormat);\n    }\n    catch (error) {\n      if (preferOpus && info) {\n        ytmusic.getLogger().warn('[ytmusic] No matching format for Opus. Falling back to any audio format ...');\n        try {\n          format = info.chooseFormat(BEST_AUDIO_FORMAT);\n        }\n        catch (error) {\n          ytmusic.getLogger().error('[ytmusic] Failed to obtain audio format:', error);\n          format = null;\n        }\n      }\n      else {\n        throw error;\n      }\n    }\n\n    if (format) {\n      const audioBitrate = ITAG_TO_BITRATE[format.itag];\n      return {\n        url: format.decipher(innertube.session.player),\n        mimeType: format.mime_type,\n        bitrate: audioBitrate ? `${audioBitrate} kbps` : null,\n        sampleRate: format.audio_sample_rate ? `${format.audio_sample_rate} kHz` : undefined,\n        channels: format.audio_channels\n      };\n    }\n\n    return null;\n  }\n\n  #getInfoFromUpNextTab(info: YTMusic.TrackInfo, endpoint: Endpoint) {\n    const playlistPanel = info.page[1]?.contents_memo?.getType(YTNodes.PlaylistPanel).first();\n    if (!playlistPanel) {\n      return null;\n    }\n    const videoId = endpoint.payload.videoId;\n    const match = playlistPanel.contents.find((data) => {\n      if (data instanceof YTNodes.PlaylistPanelVideoWrapper) {\n        if (data.primary?.video_id === videoId) {\n          return true;\n        }\n        return data.counterpart?.find((item) => item.video_id === videoId);\n      }\n      else if (data instanceof YTNodes.PlaylistPanelVideo) {\n        return data.video_id === videoId;\n      }\n    });\n    return InnertubeResultParser.parseContentItem(match);\n  }\n\n}\n"]}