{"version":3,"file":"EndpointModel.js","sourceRoot":"","sources":["../../../src/lib/model/EndpointModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6DAA2E;AAC3E,2CAAwC;AACxC,gDAA2D;AAC3D,oFAA4D;AAE5D,4EAAoD;AAEpD,MAAqB,aAAc,SAAQ,qBAAS;IAApD;;;IAiCA,CAAC;IA/BC,KAAK,CAAC,WAAW,CAAqB,QAAW;QAC/C,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAEhD,IAAI,wBAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,uBAAY,CAAC,MAAM,EAAE,uBAAY,CAAC,kBAAkB,CAAC,EAAE;YACzF,OAAO,uBAAA,IAAI,8DAAe,MAAnB,IAAI,EAAgB,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;SAC5D;QAED,IAAI,wBAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,uBAAY,CAAC,KAAK,EAAE,uBAAY,CAAC,iBAAiB,CAAC,EAAE;YACvF,OAAO,uBAAA,IAAI,8DAAe,MAAnB,IAAI,EAAgB,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC1D;QAED,IAAI,wBAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,uBAAY,CAAC,MAAM,EAAE,uBAAY,CAAC,kBAAkB,CAAC,EAAE;YACzF,OAAO,uBAAA,IAAI,8DAAe,MAAnB,IAAI,EAAgB,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;SAC5D;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CAeF;AAjCD,gCAiCC;yEAbC,KAAK,uCAAoC,SAAoB,EAAE,GAAsB,EAAE,QAAW;IAChG,MAAM,OAAO,GAAG;QACd,GAAG,QAAQ,CAAC,OAAO;QACnB,MAAM,EAAE,SAAS;KAClB,CAAC;IACF,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;IAC/D,MAAM,MAAM,GAAG,4BAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,2BAA2B;IAC/E,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,SAAS,EAAE;QAC1C,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KAC3C;IAED,OAAO,+BAAqB,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC,eAAe;AAC7E,CAAC","sourcesContent":["import Innertube, { InnertubeEndpoint, Parser } from 'volumio-youtubei.js';\nimport { BaseModel } from './BaseModel';\nimport Endpoint, { EndpointType } from '../types/Endpoint';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport { ContentOf } from '../types/Content';\nimport EndpointHelper from '../util/EndpointHelper';\n\nexport default class EndpointModel extends BaseModel {\n\n  async getContents<T extends Endpoint>(endpoint: T): Promise<ContentOf<T> | null> {\n    const { innertube } = await this.getInnertube();\n\n    if (EndpointHelper.isType(endpoint, EndpointType.Browse, EndpointType.BrowseContinuation)) {\n      return this.#doGetContents(innertube, '/browse', endpoint);\n    }\n\n    if (EndpointHelper.isType(endpoint, EndpointType.Watch, EndpointType.WatchContinuation)) {\n      return this.#doGetContents(innertube, '/next', endpoint);\n    }\n\n    if (EndpointHelper.isType(endpoint, EndpointType.Search, EndpointType.SearchContinuation)) {\n      return this.#doGetContents(innertube, '/search', endpoint);\n    }\n\n    return null;\n  }\n\n  async #doGetContents<T extends Endpoint>(innertube: Innertube, url: InnertubeEndpoint, endpoint: T) {\n    const payload = {\n      ...endpoint.payload,\n      client: 'YTMUSIC'\n    };\n    const response = await innertube.actions.execute(url, payload);\n    const parsed = Parser.parseResponse(response.data); // First parse by Innertube\n    if (url === '/search' || url === '/browse') {\n      await this.expandSectionList(parsed, url);\n    }\n\n    return InnertubeResultParser.parseResult(parsed, endpoint); // Second parse\n  }\n}\n"]}