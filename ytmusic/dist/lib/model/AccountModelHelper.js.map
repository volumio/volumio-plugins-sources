{"version":3,"file":"AccountModelHelper.js","sourceRoot":"","sources":["../../../src/lib/model/AccountModelHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { type YTNodes } from 'volumio-youtubei.js';\nimport { type PluginConfig } from '../types';\nimport type Innertube from \"volumio-youtubei.js\";\nimport InnertubeResultParser from './InnertubeResultParser';\n\nexport type AccountInfo = {\n  isSignedIn: true,\n  list: PluginConfig.Account[],\n  active: PluginConfig.Account\n} | {\n  isSignedIn: false,\n  list: null,\n  active: null\n}\n\nconst SIGNED_OUT: AccountInfo = {\n  isSignedIn: false,\n  list: null,\n  active: null\n};\n\nfunction convertAccountItem(data: YTNodes.AccountItem): PluginConfig.Account | null {\n  const name = InnertubeResultParser.unwrap(data.account_name);\n  const photo = InnertubeResultParser.parseThumbnail(data.account_photo);\n  const handle = InnertubeResultParser.unwrap(data.channel_handle);\n  const [ pageId, datasyncIdToken ] = (() => {\n    let pageId: string | undefined = undefined;\n    let datasyncIdToken: string | undefined = undefined;\n    if (Array.isArray(data.endpoint.payload.supportedTokens)) {\n      for (const token of data.endpoint.payload.supportedTokens) {\n        if (Reflect.has(token, 'pageIdToken') && Reflect.has(token.pageIdToken, 'pageId')) {\n          pageId = String(token.pageIdToken.pageId);\n        }\n        else if (Reflect.has(token, 'datasyncIdToken') && Reflect.has(token.datasyncIdToken, 'datasyncIdToken')) {\n          datasyncIdToken = String(token.datasyncIdToken.datasyncIdToken);\n        }\n      }\n    }\n    return [ pageId, datasyncIdToken ];\n  })();\n  if (!name || !handle || !datasyncIdToken) {\n    return null;\n  }\n  return {\n    name,\n    photo,\n    active: data.is_selected,\n    handle,\n    pageId,\n    datasyncIdToken\n  };\n}\n\nexport async function getAccountInitialInfo(innertube: Innertube): Promise<AccountInfo> {\n  if (!innertube.session.logged_in) {\n    return SIGNED_OUT;\n  }\n  const accounts = await innertube.account.getInfo(true);\n  const list = accounts.reduce<PluginConfig.Account[]>((result, ac) => {\n    if (!ac.is_disabled) {\n      const item = convertAccountItem(ac);\n      if (item) {\n        result.push(item);\n      }\n    }\n    return result;\n  }, []);\n  const active = list.find((ac) => ac.active);\n  if (!active) {\n    return SIGNED_OUT;\n  }\n  return {\n    isSignedIn: true,\n    list,\n    active\n  };\n}\n"]}