{"version":3,"file":"BaseModel.js","sourceRoot":"","sources":["../../../src/lib/model/BaseModel.ts"],"names":[],"mappings":";;;;;;AAAA,6DAAgG;AAChG,wEAAgD;AAEhD,MAAM,yBAAyB,GAAG,EAAE,CAAC;AAErC,MAAsB,SAAS;IAEnB,YAAY;QACpB,OAAO,yBAAe,CAAC,WAAW,EAAE,CAAC;IACvC,CAAC;IAES,KAAK,CAAC,iBAAiB,CAAC,QAAyB,EAAE,GAA0B;QACrF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAChD,MAAM,WAAW,GAAG,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,6BAAO,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,CAAC;QAClF,IAAI,WAAW,EAAE;YACf,IAAI,uBAAuB,GAAG,WAAW,CAAC,YAAY,CAAC;YACvD,IAAI,WAAW,CAAC,iBAAiB,KAAK,MAAM,EAAE;gBAC5C,uBAAuB,GAAG,SAAS,CAAC;aACrC;YACD,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,OAAO,uBAAuB,IAAI,WAAW,GAAG,yBAAyB,EAAE;gBACzE,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;gBAC7G,MAAM,IAAI,GAAG,4BAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,IAAI,CAAC,qBAAqB,YAAY,6CAAuB,IAAI,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE;oBACxG,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;oBAClE,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC;oBAClE,WAAW,EAAE,CAAC;iBACf;qBACI;oBACH,MAAM;iBACP;aACF;YACD,OAAO,WAAW,CAAC,YAAY,CAAC;SACjC;IACH,CAAC;CACF;AA9BD,8BA8BC","sourcesContent":["import { IParsedResponse, Parser, SectionListContinuation, YTNodes } from 'volumio-youtubei.js';\nimport InnertubeLoader from './InnertubeLoader';\n\nconst MAX_APPEND_SECTIONS_COUNT = 10;\n\nexport abstract class BaseModel {\n\n  protected getInnertube() {\n    return InnertubeLoader.getInstance();\n  }\n\n  protected async expandSectionList(response: IParsedResponse, url: '/browse' | '/search') {\n    const { innertube } = await this.getInnertube();\n    const sectionList = response.contents_memo?.getType(YTNodes.SectionList)?.first();\n    if (sectionList) {\n      let sectionListContinuation = sectionList.continuation;\n      if (sectionList.continuation_type !== 'next') {\n        sectionListContinuation = undefined;\n      }\n      let appendCount = 0;\n      while (sectionListContinuation && appendCount < MAX_APPEND_SECTIONS_COUNT) {\n        const response = await innertube.actions.execute(url, { token: sectionListContinuation, client: 'YTMUSIC' });\n        const page = Parser.parseResponse(response.data);\n        if (page.continuation_contents instanceof SectionListContinuation && page.continuation_contents.contents) {\n          sectionList.contents.push(...page.continuation_contents.contents);\n          sectionListContinuation = page.continuation_contents.continuation;\n          appendCount++;\n        }\n        else {\n          break;\n        }\n      }\n      delete sectionList.continuation;\n    }\n  }\n}\n"]}