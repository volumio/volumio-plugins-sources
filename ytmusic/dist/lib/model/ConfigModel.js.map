{"version":3,"file":"ConfigModel.js","sourceRoot":"","sources":["../../../src/lib/model/ConfigModel.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6DAAqD;AACrD,uEAAwC;AAExC,2CAAwC;AAExC,MAAM,YAAY,GAA2B;IAC3C,MAAM,EAAE,kBAAkB;CAC3B,CAAC;AAEF,MAAM,UAAU,GAA2B;IACzC,QAAQ,EAAE,aAAa;IACvB,UAAU,EAAE,eAAe;CAC5B,CAAC;AAEW,QAAA,oBAAoB,GAAuB;IACtD,MAAM,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;IAC3C,QAAQ,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;IAC7C,iBAAiB,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;IACvD,QAAQ,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;IAC9C,kBAAkB,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;IACxD,YAAY,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;IACjD,QAAQ,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;IAC7C,UAAU,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;IAChD,MAAM,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;IACzC,mBAAmB,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;CACvD,CAAC;AAEF,MAAqB,WAAY,SAAQ,qBAAS;IAAlD;;;IAgHA,CAAC;IA9GC,KAAK,CAAC,cAAc;QAClB,MAAM,MAAM,GAAG,wBAAO,CAAC,GAAG,CAAc,mBAAmB,CAAC,CAAC;QAC7D,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,uBAAA,IAAI,8DAAmB,MAAvB,IAAI,CAAqB,CAAC;QACjD,MAAM,QAAQ,GAAG,uBAAA,IAAI,gFAAqC,MAAzC,IAAI,EAAsC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE7E,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC;YACnC,MAAM,SAAS,GAAI,QAAQ,CAAC,KAAoB,CAAC,MAAM,CAAuB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBAC7F,MAAM,QAAQ,GAAG,IAAI,CAAC,+BAA+B,EAAE,MAAM,CAAC;gBAC9D,IAAI,GAA6B,CAAC;gBAClC,QAAQ,QAAQ,EAAE,CAAC;oBACjB,KAAK,UAAU,CAAC,QAAQ,CAAC;wBACvB,GAAG,GAAG,QAAQ,CAAC;wBACf,MAAM;oBACR,KAAK,UAAU,CAAC,UAAU,CAAC;wBACzB,GAAG,GAAG,UAAU,CAAC;wBACjB,MAAM;oBACR;wBACE,GAAG,GAAG,IAAI,CAAC;gBACf,CAAC;gBACD,IAAI,GAAG,EAAE,CAAC;oBACR,MAAM,KAAK,GAAG,IAAI,0BAAM,CAAC,IAAI,CAAC,IAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;oBAC/E,IAAI,YAAY,GAA6B,IAAI,CAAC;oBAClD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC,EAAE,CAAC;wBAC9D,YAAY,GAAI,IAAI,CAAC,+BAA+B,CAAC,KAAoB,CAAC,MAAM,CAAoB,CAAC,MAAM,EAAE,IAAS,EAAE,EAAE;4BACxH,MAAM,KAAK,GAAG,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC;4BACjD,MAAM,KAAK,GAAG,IAAI,CAAC,uBAAuB,EAAE,KAAK,CAAC;4BAClD,IAAI,KAAK,IAAI,KAAK,EAAE,CAAC;gCACnB,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;4BAChC,CAAC;4BACD,OAAO,MAAM,CAAC;wBAChB,CAAC,EAAE,EAAE,CAAC,CAAC;oBACT,CAAC;oBACD,IAAI,KAAK,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACrD,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC;oBACxC,CAAC;gBACH,CAAC;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,MAAM,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;YACxD,MAAM,MAAM,GAAgB;gBAC1B,MAAM,EAAE,SAAS,CAAC,MAAM,IAAI,kBAAkB,CAAC,MAAM;gBACrD,QAAQ,EAAE,SAAS,CAAC,QAAQ,IAAI,kBAAkB,CAAC,QAAQ;aAC5D,CAAC;YACF,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;gBAC3C,wBAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;YAC3C,CAAC;YAED,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,OAAO,EAAE,GAAG,IAAI,CAAC,qBAAqB,EAAE,EAAE,CAAC;IAC7C,CAAC;IAED,UAAU;QACR,wBAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAkCD,qBAAqB;QACnB,OAAO;YACL,MAAM,EAAE;gBACN,KAAK,EAAE,wBAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;gBACxC,YAAY,EAAE;oBACZ,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE;iBACxC;aACF;YACD,QAAQ,EAAE;gBACR,KAAK,EAAE,wBAAO,CAAC,OAAO,CAAC,kBAAkB,CAAC;gBAC1C,YAAY,EAAE;oBACZ,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,IAAI,EAAE;iBACvC;aACF;SACF,CAAC;IACJ,CAAC;CACF;yEAhDC,KAAK;IACH,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;IAEhD,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,SAAS;KAClB,CAAC;IAEF,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,EAAE;YAC1E,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YACjC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;SACF,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3C,CAAC;IACD,OAAO,KAAK,EAAE,CAAC;QACb,wBAAO,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,wBAAO,CAAC,eAAe,CAAC,uDAAuD,EAAE,KAAK,CAAC,CAAC,CAAC;QACnH,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,+GAEoC,YAAoB,EAAE,QAAa;IACtE,MAAM,UAAU,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;IAC9C,IAAI,UAAU,EAAE,CAAC;QACf,OAAO,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,iCAAiC,EAAE,UAAU,KAAK,UAAU,CAAC,CAAC,iCAAiC,IAAI,IAAI,CAAC;IAC3J,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;kBA9FkB,WAAW","sourcesContent":["import { Misc as YTMisc } from 'volumio-youtubei.js';\nimport ytmusic from '../YTMusicContext';\nimport { type I18nOptionValue, type I18nOptions, type PluginConfigSchema } from '../types/PluginConfig';\nimport { BaseModel } from './BaseModel';\n\nconst CATEGORY_IDS: Record<string, string> = {\n  'i18n': 'SETTING_CAT_I18N'\n};\n\nconst OPTION_IDS: Record<string, string> = {\n  'region': 'I18N_REGION',\n  'language': 'I18N_LANGUAGE'\n};\n\nexport const PLUGIN_CONFIG_SCHEMA: PluginConfigSchema = {\n  region: { defaultValue: 'US', json: false },\n  language: { defaultValue: 'en', json: false },\n  loadFullPlaylists: { defaultValue: false, json: false },\n  autoplay: { defaultValue: false, json: false },\n  autoplayClearQueue: { defaultValue: false, json: false },\n  addToHistory: { defaultValue: true, json: false },\n  prefetch: { defaultValue: true, json: false },\n  preferOpus: { defaultValue: false, json: false },\n  cookie: { defaultValue: '', json: false },\n  activeChannelHandle: { defaultValue: '', json: false }\n};\n\nexport default class ConfigModel extends BaseModel {\n\n  async getI18nOptions() {\n    const cached = ytmusic.get<I18nOptions>('configI18nOptions');\n    if (cached) {\n      return cached;\n    }\n\n    const response = await this.#fetchSettingsPage();\n    const settings = this.#getCategoryFromSettingsPageResponse('i18n', response);\n\n    if (Array.isArray(settings?.items)) {\n      const tmpResult = (settings.items as Array<any>).reduce<Partial<I18nOptions>>((result, item) => {\n        const optionId = item.settingSingleOptionMenuRenderer?.itemId;\n        let key: keyof I18nOptions | null;\n        switch (optionId) {\n          case OPTION_IDS['region']:\n            key = 'region';\n            break;\n          case OPTION_IDS['language']:\n            key = 'language';\n            break;\n          default:\n            key = null;\n        }\n        if (key) {\n          const label = new YTMisc.Text(item.settingSingleOptionMenuRenderer.title).text;\n          let optionValues: I18nOptionValue[] | null = null;\n          if (Array.isArray(item.settingSingleOptionMenuRenderer.items)) {\n            optionValues = (item.settingSingleOptionMenuRenderer.items as Array<any>).reduce<I18nOptionValue[]>((result, item: any) => {\n              const label = item.settingMenuItemRenderer?.name;\n              const value = item.settingMenuItemRenderer?.value;\n              if (label && value) {\n                result.push({ label, value });\n              }\n              return result;\n            }, []);\n          }\n          if (label && optionValues && optionValues.length > 0) {\n            result[key] = { label, optionValues };\n          }\n        }\n        return result;\n      }, {});\n\n      const defaultI18nOptions = this.getDefaultI18nOptions();\n      const result: I18nOptions = {\n        region: tmpResult.region || defaultI18nOptions.region,\n        language: tmpResult.language || defaultI18nOptions.language\n      };\n      if (tmpResult.region && tmpResult.language) {\n        ytmusic.set('configI18nOptions', result);\n      }\n\n      return result;\n    }\n\n    return { ...this.getDefaultI18nOptions() };\n  }\n\n  clearCache() {\n    ytmusic.set('configI18nOptions', null);\n  }\n\n  async #fetchSettingsPage() {\n    const { innertube } = await this.getInnertube();\n\n    const requestData = {\n      client: 'YTMUSIC'\n    };\n\n    try {\n      const response = await innertube.session.http.fetch('/account/get_setting', {\n        method: 'POST',\n        body: JSON.stringify(requestData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      return JSON.parse(await response.text());\n    }\n    catch (error) {\n      ytmusic.getLogger().error(ytmusic.getErrorMessage('[ytmusic] Error in ConfigModel._fetchSettingsPage(): ', error));\n      return null;\n    }\n  }\n\n  #getCategoryFromSettingsPageResponse(categoryName: string, response: any) {\n    const categoryId = CATEGORY_IDS[categoryName];\n    if (categoryId) {\n      return response?.items?.find((item: any) => item.settingCategoryCollectionRenderer?.categoryId === categoryId).settingCategoryCollectionRenderer || null;\n    }\n    return null;\n  }\n\n  getDefaultI18nOptions(): I18nOptions {\n    return {\n      region: {\n        label: ytmusic.getI18n('YTMUSIC_REGION'),\n        optionValues: [\n          { label: 'United States', value: 'US' }\n        ]\n      },\n      language: {\n        label: ytmusic.getI18n('YTMUSIC_LANGUAGE'),\n        optionValues: [\n          { label: 'English (US)', value: 'en' }\n        ]\n      }\n    };\n  }\n}\n"]}