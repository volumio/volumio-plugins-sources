{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lib/api/lrclib/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport { MetadataLyrics, MetadataSyncedLyrics } from 'now-playing-common';\nimport np from '../../NowPlayingContext';\n\nconst API_GET_URL = 'https://lrclib.net/api/get';\n\nexport interface LRCLibAPIGetParams {\n  songTitle: string;\n  artistName: string;\n  albumTitle: string;\n  duration: number;\n}\n\ninterface LRCLibAPIGetResult {\n  id: number,\n  trackName: string,\n  artistName: string,\n  albumName: string,\n  duration: number,\n  instrumental: boolean,\n  plainLyrics?: string,\n  syncedLyrics?: string\n}\n\nasync function apiGet(params: LRCLibAPIGetParams): Promise<LRCLibAPIGetResult | null> {\n  const urlObj = new URL(API_GET_URL);\n  urlObj.searchParams.set('track_name', params.songTitle);\n  urlObj.searchParams.set('artist_name', params.artistName);\n  urlObj.searchParams.set('album_name', params.albumTitle);\n  urlObj.searchParams.set('duration', params.duration.toString());\n  np.getLogger().info(`[now-playing] LRCLIB getLyrics() API URL: ${urlObj.toString()}`);\n  try {\n    const response = await fetch(urlObj, { method: 'GET' });\n    if (response.ok) {\n      return response.json();\n    }\n    throw Error(`Response error: ${response.status} - ${response.statusText}`);\n  }\n  catch (error) {\n    np.getLogger().error(np.getErrorMessage(`[now-playing] Error fetching lyrics from LRCLIB (URL: ${urlObj.toString()}):`, error));\n    return null;\n  }\n}\n\nexport default class LRCLibAPI {\n\n  static async getLyrics(songTitle: string, albumTitle?: string, artistName?: string, duration?: number): Promise<MetadataLyrics | null> {\n    if (!albumTitle || !artistName || !duration) {\n      return null;\n    }\n    np.getLogger().info(`[now-playing] LRCLIB getLyrics(): song: \"${songTitle}\" album: \"${albumTitle}\" artist: \"${artistName}\" duration: \"${duration}\"`);\n    const result = await apiGet({ songTitle, artistName, albumTitle, duration });\n    if (result?.syncedLyrics) {\n      const lines = result.syncedLyrics.split('\\n').reduce<MetadataSyncedLyrics['lines']>((r, l) => {\n        const regex = /\\[(\\d+):(\\d+)\\.(\\d+)\\](.+)/gm;\n        const matches = regex.exec(l);\n        if (matches) {\n          // Simple LRC format\n          const min = matches[1];\n          const sec = matches[2];\n          const fsec = matches[3]; // 100th of a second\n          const text = matches[4]?.trim();\n          if (min !== undefined && sec !== undefined && fsec !== undefined && text) {\n            const ts = (((Number(min) * 60) + Number(sec)) * 1000) + (Number(fsec) * 10);\n            if (!isNaN(ts)) {\n              r.push({\n                start: ts,\n                text\n              });\n            }\n          }\n        }\n        return r;\n      }, []);\n      return {\n        type: 'synced',\n        lines\n      };\n    }\n    if (result?.plainLyrics) {\n      return {\n        type: 'plain',\n        lines: result.plainLyrics.split('\\n')\n      };\n    }\n    return null;\n  }\n}\n"]}