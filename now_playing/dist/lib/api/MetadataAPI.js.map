{"version":3,"file":"MetadataAPI.js","sourceRoot":"","sources":["../../../src/lib/api/MetadataAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import md5 from 'md5';\nimport np from '../NowPlayingContext';\nimport Cache from '../utils/Cache';\nimport { assignObjectEmptyProps, removeSongNumber } from '../utils/Misc';\nimport { Metadata, NowPlayingMetadataProvider, NowPlayingPluginSupport } from 'now-playing-common';\nimport { MetadataServiceOptions } from '../config/PluginConfig';\nimport { escapeRegExp } from 'lodash';\nimport DefaultMetadataProvider from './DefaultMetadataProvider';\nimport escapeHTML from 'escape-html';\nimport semver from 'semver';\n\ntype ItemType = 'song' | 'album' | 'artist';\n\nexport interface MetadataAPIFetchInfoParams {\n  type: ItemType;\n  name: string;\n  album?: string;\n  artist?: string;\n  duration?: number;\n  uri?: string;\n  service?: string;\n}\n\nconst REQUIRED_PROVIDER_VERSION = '1.x';\n\nclass MetadataAPI {\n\n  #fetchPromises: Record<string, Promise<Metadata>>;\n  #defaultMetadataProvider: DefaultMetadataProvider;\n  #settings: MetadataServiceOptions | null;\n  #cache: Cache;\n\n  constructor() {\n    this.#fetchPromises = {};\n    this.#defaultMetadataProvider = new DefaultMetadataProvider();\n    this.#settings = null;\n    this.#cache = new Cache(\n      { song: 3600, album: 3600, artist: 3600 },\n      { song: 200, album: 200, artist: 200 });\n  }\n\n  clearCache() {\n    this.#defaultMetadataProvider.clearCache();\n    this.#cache.clear();\n  }\n\n  updateSettings(settings: MetadataServiceOptions) {\n    const tokenChanged = !this.#settings || settings.geniusAccessToken !== this.#settings.geniusAccessToken;\n\n    this.#settings = settings;\n    if (tokenChanged) {\n      this.#defaultMetadataProvider.config({ accessToken: settings.geniusAccessToken });\n      this.clearCache();\n    }\n  }\n\n  #getFetchPromise(key: string, callback: () => Promise<Metadata>) {\n    if (Object.keys(this.#fetchPromises).includes(key)) {\n      return this.#fetchPromises[key];\n    }\n    const promise = callback();\n    this.#fetchPromises[key] = promise;\n    promise.finally(() => {\n      delete this.#fetchPromises[key];\n    });\n    return promise;\n  }\n\n  async fetchInfo(params: MetadataAPIFetchInfoParams) {\n    const { info, provider } = await this.#doFetchInfo(params);\n    if (!(provider instanceof DefaultMetadataProvider)) {\n      let needFillInfo = false;\n      switch (params.type) {\n        case 'song':\n          needFillInfo = !this.#isSongInfoComplete(info);\n          break;\n        case 'album':\n          needFillInfo = !this.#isBasicAlbumInfoComplete(info);\n          break;\n        case 'artist':\n          needFillInfo = !this.#isBasicArtistInfoComplete(info);\n          break;\n      }\n      if (needFillInfo) {\n        try {\n          const { info: fillInfo } = await this.#doFetchInfo(params, true, info);\n          return assignObjectEmptyProps({}, info, fillInfo);\n        }\n        catch (error) {\n          // Do nothing\n        }\n      }\n    }\n    if (info.song?.lyrics?.type === 'synced' && !np.getConfigValue('metadataService').enableSyncedLyrics) {\n      info.song.lyrics = {\n        type: 'plain',\n        lines: info.song.lyrics.lines.map((line) => escapeHTML(line.text))\n      };\n    }\n    return info;\n  }\n\n  #isSongInfoComplete(info?: Metadata | null) {\n    return !!(info?.song && info.song.description && info.song.lyrics && this.#isBasicAlbumInfoComplete(info));\n  }\n\n  #isBasicAlbumInfoComplete(info?: Metadata | null) {\n    return !!(info?.album && info.album.description && this.#isBasicArtistInfoComplete(info));\n  }\n\n  #isBasicArtistInfoComplete(info?: Metadata | null) {\n    return !!(info?.artist && info.artist.description && info.artist.image);\n  }\n\n  async #doFetchInfo(params: MetadataAPIFetchInfoParams, useDefaultProvider: true, fillTarget?: Metadata): Promise<{ info: Metadata; provider: NowPlayingMetadataProvider<any>; }>;\n  async #doFetchInfo(params: MetadataAPIFetchInfoParams, useDefaultProvider?: false): Promise<{ info: Metadata; provider: NowPlayingMetadataProvider<any>; }>;\n  async #doFetchInfo(params: MetadataAPIFetchInfoParams, useDefaultProvider = false, fillTarget?: Metadata): Promise<{ info: Metadata; provider: NowPlayingMetadataProvider<any>; }> {\n    const isTrackNumberEnabled = np.getPluginSetting('music_service', 'mpd', 'tracknumbers');\n    const { provider, service: providerSource } = useDefaultProvider ? {\n      provider: this.#defaultMetadataProvider,\n      service: ''\n    } : this.#getProvider(params.uri, params.service);\n    try {\n      params = {\n        type: params.type,\n        ...this.#excludeParenthesis(params),\n        duration: params.duration,\n        uri: params.uri,\n        service: providerSource\n      };\n      const providerStr = providerSource ? `(${providerSource} plugin)` : '(DefaultMetadataProvider)';\n      np.getLogger().info(`[now-playing] Fetch metadata ${providerStr}: ${JSON.stringify(params)}`);\n      const cacheKey = md5(JSON.stringify({...params, providerSource}));\n      const info = await this.#getFetchPromise(cacheKey, async () => {\n        if (params.type === 'song') {\n          const name = isTrackNumberEnabled ? removeSongNumber(params.name) : params.name;\n          let songInfo;\n          switch (provider.version) {\n            case '1.0.0':\n              songInfo = await this.#cache.getOrSet('song', cacheKey, () => provider.getSongInfo(name, params.album, params.artist, params.uri));\n              break;\n            case '1.1.0':\n              if (provider instanceof DefaultMetadataProvider && fillTarget) {\n                songInfo = await this.#cache.getOrSet('song', cacheKey, () => provider.getSongInfo(name, params.album, params.artist, Number(params.duration), params.uri, fillTarget['song']));\n              }\n              else {\n                songInfo = await this.#cache.getOrSet('song', cacheKey, () => provider.getSongInfo(name, params.album, params.artist, Number(params.duration), params.uri));\n              }\n              break;\n          }\n          return {\n            song: songInfo || null,\n            album: songInfo?.album || null,\n            artist: songInfo?.artist || null\n          };\n        }\n        else if (params.type === 'album') {\n          const albumInfo = await this.#cache.getOrSet('album', cacheKey, () => provider.getAlbumInfo(params.name, params.artist, params.uri));\n          return {\n            album: albumInfo || null,\n            artist: albumInfo?.artist || null\n          };\n        }\n        else if (params.type === 'artist') {\n          const artistInfo = await this.#cache.getOrSet('artist', cacheKey, () => provider.getArtistInfo(params.name, params.uri));\n          return {\n            artist: artistInfo || null\n          };\n        }\n\n        throw Error(`Unknown metadata type ${params.type}`);\n\n      });\n      return {\n        info,\n        provider\n      };\n    }\n    catch (e: any) {\n      if (!(provider instanceof DefaultMetadataProvider)) {\n        np.getLogger().error(`[now_playing] Error fetching metdata using ${providerSource} plugin: ${e instanceof Error ? e.message : e}`);\n        np.getLogger().error('[now_playing] Falling back to DefaultMetadataProvider');\n        return this.#doFetchInfo(params, true);\n      }\n      const { message, statusCode, statusMessage } = e;\n      const status = (statusCode && statusMessage) ? `${statusCode} - ${statusMessage}` : (statusCode || statusMessage);\n      let msg;\n      if (status) {\n        msg = `${np.getI18n('NOW_PLAYING_ERR_METADATA_FETCH')}: ${status}`;\n      }\n      else {\n        msg = np.getI18n('NOW_PLAYING_ERR_METADATA_FETCH') + (message ? `: ${message}` : '');\n      }\n      throw Error(msg);\n    }\n  }\n\n  #excludeParenthesis(params: { name: string; album?: string; artist?: string; }) {\n    if (!this.#settings || !this.#settings.excludeParenthesized) {\n      return params;\n    }\n\n    const __strip = (s: string | undefined, parentheses: Array<'()' | '[]'>) => {\n      if (!s) {\n        return s;\n      }\n      let result = s;\n      for (const p of parentheses) {\n        const [ opening, closing ] = p;\n        const regexStr = `(${escapeRegExp(opening)}.*?${escapeRegExp(closing)})`;\n        result = result.replace(new RegExp(regexStr, 'gm'), '');\n      }\n      return result;\n    };\n\n    let parentheses: Array<'()' | '[]'>;\n    switch (this.#settings.parenthesisType) {\n      case 'round':\n        parentheses = [ '()' ];\n        break;\n      case 'square':\n        parentheses = [ '[]' ];\n        break;\n      case 'round+square':\n        parentheses = [ '()', '[]' ];\n        break;\n    }\n\n    return {\n      name: __strip(params.name, parentheses)?.trim() || params.name,\n      album: __strip(params.album, parentheses)?.trim() || params.album,\n      artist: __strip(params.artist, parentheses)?.trim() || params.artist\n    };\n  }\n\n  #getProvider(uri?: string, service?: string) {\n    if (np.getConfigValue('metadataService').queryMusicServices) {\n      /**\n       * Always get service by URI if possible.\n       * Volumio has this long-standing bug where the MPD plugin sets service as 'mpd' even when\n       * consume state is on (consuming on behalf of another service).\n       */\n      if (uri) {\n        const _service = uri.split('/')[0];\n        if (_service) {\n          service = _service;\n        }\n      }\n      if (service) {\n        const plugin = np.getMusicServicePlugin(service);\n        if (this.#hasNowPlayingMetadataProvider(plugin)) {\n          const provider = plugin.getNowPlayingMetadataProvider<any>();\n          if (provider && this.#validateNowPlayingMetadataProvider(provider, service)) {\n            return {\n              provider,\n              service\n            };\n          }\n        }\n      }\n    }\n    return {\n      provider: this.#defaultMetadataProvider,\n      service: ''\n    };\n  }\n\n  #hasNowPlayingMetadataProvider(plugin: any): plugin is { getNowPlayingMetadataProvider: NowPlayingPluginSupport['getNowPlayingMetadataProvider'] } {\n    return plugin && typeof plugin['getNowPlayingMetadataProvider'] === 'function';\n  }\n\n  #validateNowPlayingMetadataProvider(provider: any, service: string) {\n    const logPrefix = `[now-playing] NowPlayingPluginMetadataProvider for '${service}' plugin`;\n    if (typeof provider !== 'object') {\n      np.getLogger().error(`${logPrefix} has wrong type`);\n      return false;\n    }\n    if (!Reflect.has(provider, 'version')) {\n      np.getLogger().warn(`${logPrefix} is missing version number`);\n    }\n    else if (!semver.satisfies(provider.version, REQUIRED_PROVIDER_VERSION)) {\n      np.getLogger().warn(`${logPrefix} has version '${provider.version}' which does not satisfy '${REQUIRED_PROVIDER_VERSION}'`);\n    }\n    const fns = [\n      'getSongInfo',\n      'getAlbumInfo',\n      'getArtistInfo'\n    ];\n    if (!fns.every((fn) => Reflect.has(provider, fn) && typeof provider[fn] === 'function')) {\n      np.getLogger().error(`${logPrefix} is missing one of the following functions: ${fns.map((fn) => `${fn}()`).join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n}\n\nconst metadataAPI = new MetadataAPI();\n\nexport default metadataAPI;\n"]}