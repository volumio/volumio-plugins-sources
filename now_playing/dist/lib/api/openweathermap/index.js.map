{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lib/api/openweathermap/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport np from '../../NowPlayingContext';\n\nconst BASE_URL = 'https://openweathermap.org';\nconst API_URL = 'https://api.openweathermap.org';\nconst ONECALL_PATH = '/data/2.5/onecall';\nconst WEATHER_PATH = '/data/2.5/weather';\n\nasync function fetchPage(url: string, json = false) {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return json ? response.json() : response.text();\n    }\n    throw Error(`Response error: ${response.status} - ${response.statusText}`);\n  }\n  catch (error) {\n    np.getLogger().error(np.getErrorMessage(`[now-playing] Error fetching ${url}:`, error));\n    throw error;\n  }\n}\n\nexport interface OpenWeatherMapAPIConstructorOptions {\n  lat?: number;\n  lon?: number;\n  lang?: string;\n  units?: string;\n}\n\nexport interface OpenWeatherMapAPIGetWeatherResult {\n  location: {\n    name?: string;\n    country?: string;\n  };\n  current: {\n    temp: {\n      now?: number;\n      min?: number;\n      max?: number;\n    };\n    humidity?: number;\n    windSpeed?: number;\n    icon?: string;\n  };\n  daily: {\n    temp: {\n      min?: number;\n      max?: number;\n    };\n    humidity?: number;\n    windSpeed?: number;\n    icon?: string;\n    dateTimeMillis?: number;\n  }[];\n  hourly: {\n    temp?: number;\n    humidity?: number;\n    windSpeed?: number;\n    icon?: string;\n    dateTimeMillis?: number;\n  }[];\n}\n\nexport default class OpenWeatherMapAPI {\n\n  #apiKey: string | null;\n  #apiKeyPromise: Promise<any> | null;\n  #coordinates: { lat: number, lon: number } | null;\n  #lang: string | null;\n  #units: string | null;\n\n  constructor(args?: OpenWeatherMapAPIConstructorOptions) {\n    this.#apiKey = null;\n    this.#apiKeyPromise = null;\n    this.#coordinates = null;\n    this.#lang = null;\n    this.#units = null;\n\n    if (args?.lat !== undefined && args?.lon !== undefined && !isNaN(args.lat) && !isNaN(args.lon)) {\n      this.setCoordinates(args.lat, args.lon);\n    }\n    if (args?.lang) {\n      this.setLang(args.lang);\n    }\n    if (args?.units) {\n      this.setUnits(args.units);\n    }\n  }\n\n  setCoordinates(lat: number, lon: number) {\n    if (typeof lat === 'number' && typeof lon === 'number' && -90 <= lat && lat <= 90 && -180 <= lon && lon <= 180) {\n      this.#coordinates = { lat, lon };\n      return;\n    }\n\n    throw Error('Invalid coordinates');\n  }\n\n  setLang(lang: string) {\n    this.#lang = lang;\n  }\n\n  setUnits(units: string) {\n    this.#units = units;\n  }\n\n  async #getApiKey() {\n    if (this.#apiKey) {\n      return this.#apiKey;\n    }\n\n    if (this.#apiKeyPromise) {\n      return this.#apiKeyPromise;\n    }\n\n    const doGet = async () => {\n      np.getLogger().info('[now-playing] Fetching API key...');\n      const widgetPathRegExp = /<script(?:\\s+)src=['\"]((?:.+)weather-app.(?:.+).js)['\"]><\\/script>/gm;\n      const appIdRegExp = /appid:\"(.+?)\"/gm;\n\n      const page = await fetchPage(BASE_URL);\n      const widgetPath = page ? widgetPathRegExp.exec(page)?.[1] : null;\n      const widgetSrc = widgetPath ? await fetchPage(new URL(widgetPath, BASE_URL).toString()) : Promise.resolve(null);\n      const appId = widgetSrc ? appIdRegExp.exec(widgetSrc)?.[1] : null;\n\n      if (!appId) {\n        throw Error('Could not obtain API key');\n      }\n\n      return appId;\n    };\n\n    this.#apiKeyPromise = doGet()\n      .then((appId) => {\n        this.#apiKey = appId;\n        np.getLogger().info('[now-playing] OpenWeatherMap API key obtained.');\n        return appId;\n      })\n      .finally(() => {\n        this.#apiKeyPromise = null;\n      });\n\n    return this.#apiKeyPromise;\n  }\n\n  async getWeather(): Promise<OpenWeatherMapAPIGetWeatherResult> {\n    const fetchData = async (forceRefreshApiKey = false): Promise<any> => {\n      if (forceRefreshApiKey) {\n        this.#apiKey = null;\n      }\n\n      const [ oneCallUrl, weatherUrl ] = await Promise.all([\n        this.#createApiUrl(ONECALL_PATH),\n        this.#createApiUrl(WEATHER_PATH)\n      ]);\n\n      // Note that location data is actually resolved from\n      // WeatherUrl, whereas the rest is from onecall.\n      try {\n        return await Promise.all([\n          fetchPage(oneCallUrl, true),\n          fetchPage(weatherUrl, true)\n        ]);\n      }\n      catch (error) {\n        if (!forceRefreshApiKey) {\n          // Retry with forceRefreshApiKey\n          return fetchData(true);\n        }\n\n        throw error;\n      }\n    };\n\n    const [ weatherData, locationData ] = await fetchData();\n    const result = {\n      location: this.#parseLocation(locationData),\n      current: this.#parseCurrent(weatherData),\n      daily: this.#parseDaily(weatherData),\n      hourly: this.#parseHourly(weatherData)\n    };\n    return result;\n  }\n\n  async #createApiUrl(path = ONECALL_PATH) {\n    if (!this.#coordinates) {\n      throw Error('No coordinates specified');\n    }\n    const url = new URL(path, API_URL);\n    url.searchParams.append('appid', await this.#getApiKey());\n    url.searchParams.append('lat', this.#coordinates.lat.toString());\n    url.searchParams.append('lon', this.#coordinates.lon.toString());\n\n    if (this.#lang) {\n      url.searchParams.append('lang', this.#lang);\n    }\n    if (this.#units) {\n      url.searchParams.append('units', this.#units);\n    }\n\n    return url.toString();\n  }\n\n  #parseLocation(data: any) {\n    return {\n      name: data.name,\n      country: data.sys?.country\n    };\n  }\n\n  #parseCurrent(data: any): OpenWeatherMapAPIGetWeatherResult['current'] {\n    const current = data.current || {};\n    const parsed: OpenWeatherMapAPIGetWeatherResult['current'] = {\n      temp: {\n        now: current.temp,\n        // First day of daily forecast is current day\n        min: data.daily?.[0]?.temp?.min,\n        max: data.daily?.[0]?.temp?.max\n      },\n      humidity: current.humidity,\n      windSpeed: current.wind_speed,\n      icon: current.weather?.[0]?.icon\n    };\n    return parsed;\n  }\n\n  #parseDaily(data: any): OpenWeatherMapAPIGetWeatherResult['daily'] {\n    return data.daily?.map((daily: any) => {\n      const parsed: OpenWeatherMapAPIGetWeatherResult['daily'][number] = {\n        temp: {\n          min: daily.temp?.min,\n          max: daily.temp?.max\n        },\n        humidity: daily.humidity,\n        windSpeed: daily.wind_speed,\n        icon: daily.weather?.[0]?.icon,\n        dateTimeMillis: daily.dt * 1000\n      };\n      return parsed;\n    }) || [];\n  }\n\n  #parseHourly(data: any): OpenWeatherMapAPIGetWeatherResult['hourly'] {\n    return data.hourly?.map((hourly: any) => {\n      const parsed: OpenWeatherMapAPIGetWeatherResult['hourly'][number] = {\n        temp: hourly.temp,\n        humidity: hourly.humidity,\n        windSpeed: hourly.wind_speed,\n        icon: hourly.weather?.[0]?.icon,\n        dateTimeMillis: hourly.dt * 1000\n      };\n      return parsed;\n    }) || [];\n  }\n}\n"]}