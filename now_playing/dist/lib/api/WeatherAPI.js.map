{"version":3,"file":"WeatherAPI.js","sourceRoot":"","sources":["../../../src/lib/api/WeatherAPI.ts"],"names":[],"mappings":"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","sourcesContent":["import OpenWeatherMapAPI, { OpenWeatherMapAPIGetWeatherResult } from './openweathermap';\nimport md5 from 'md5';\nimport np from '../NowPlayingContext';\nimport Cache from '../utils/Cache';\nimport ConfigHelper from '../config/ConfigHelper';\nimport { DeepRequired } from 'now-playing-common';\nimport { getPluginInfo } from '../utils/System';\nimport { WeatherData, WeatherDataCurrent, WeatherDataForecastDay, WeatherDataHourly, WeatherDataLocation } from 'now-playing-common';\n\nconst WEATHER_ICONS_BASE_PATH = '/assets/weather-icons';\nconst ICON_CODE_MAPPINGS: Record<string, string> = {\n  '01d': 'clear-day.svg',\n  '01n': 'clear-night.svg',\n  '02d': 'partly-cloudy-day.svg',\n  '02n': 'partly-cloudy-night.svg',\n  '03d': 'cloudy.svg',\n  '03n': 'cloudy.svg',\n  '04d': 'overcast-day.svg',\n  '04n': 'overcast-night.svg',\n  '09d': 'partly-cloudy-day-drizzle.svg',\n  '09n': 'partly-cloudy-night-drizzle.svg',\n  '10d': 'partly-cloudy-day-rain.svg',\n  '10n': 'partly-cloudy-night-rain.svg',\n  '11d': 'thunderstorms-day.svg',\n  '11n': 'thunderstorms-night.svg',\n  '13d': 'partly-cloudy-day-snow.svg',\n  '13n': 'partly-cloudy-night-snow.svg',\n  '50d': 'mist.svg',\n  '50n': 'mist.svg',\n  '_humidity': 'humidity.svg',\n  '_windSpeed': 'wind.svg'\n};\n\nexport interface WeatherAPIConfig {\n  coordinates: string;\n  units: 'imperial' | 'metric' | 'standard';\n}\n\nexport interface WeatherAPIParsedConfig {\n  coordinates?: {\n    lon: number;\n    lat: number;\n  };\n  units?: 'imperial' | 'metric' | 'standard';\n}\n\nclass WeatherAPI {\n\n  #api: OpenWeatherMapAPI;\n  #fetchPromises: {\n    [key: string]: Promise<WeatherData>;\n  };\n  #cache: Cache;\n  #config: WeatherAPIParsedConfig;\n\n  constructor() {\n    this.#api = new OpenWeatherMapAPI();\n    this.#fetchPromises = {};\n    this.#cache = new Cache({ weather: 600 }, { weather: 10 });\n    this.#config = {};\n  }\n\n  clearCache() {\n    this.#cache.clear();\n  }\n\n  setConfig(opts: WeatherAPIConfig) {\n    const { coordinates, units } = opts;\n    const coord = ConfigHelper.parseCoordinates(coordinates);\n    let configChanged = false;\n    const {coordinates: currentCoordinates, units: currentUnits} = this.#config;\n    if (coord && (coord.lat !== currentCoordinates?.lat || coord.lon !== currentCoordinates?.lon)) {\n      this.#api.setCoordinates(coord.lat, coord.lon);\n      this.#config.coordinates = coord;\n      configChanged = true;\n    }\n    if (currentUnits !== units) {\n      this.#api.setUnits(units);\n      this.#config.units = units;\n      configChanged = true;\n    }\n    if (configChanged) {\n      this.fetchInfo().then((refreshedInfo) => {\n        np.broadcastMessage('npPushWeatherOnServiceChange', {\n          success: true,\n          data: refreshedInfo\n        });\n      })\n        .catch((e) => {\n          np.broadcastMessage('npPushWeatherOnServiceChange', {\n            success: false,\n            error: e.message || e\n          });\n        });\n    }\n  }\n\n  #getFetchPromise(callback: () => Promise<WeatherData>): Promise<WeatherData> {\n    const key = md5(JSON.stringify(this.#config));\n    if (Object.keys(this.#fetchPromises).includes(key)) {\n      return this.#fetchPromises[key];\n    }\n\n    const promise = callback();\n    this.#fetchPromises[key] = promise;\n    promise.finally(() => {\n      delete this.#fetchPromises[key];\n    });\n    return promise;\n\n  }\n\n  #getWeatherIconPath(iconCode: string, style: string, animated: boolean) {\n    if (ICON_CODE_MAPPINGS[iconCode]) {\n      return `${WEATHER_ICONS_BASE_PATH}/${style}/svg${(!animated ? '-static' : '')}/${ICON_CODE_MAPPINGS[iconCode]}`;\n    }\n\n    return null;\n\n  }\n\n  #getWeatherIconUrls(appUrl: string, iconCode?: string) {\n    if (!iconCode) {\n      iconCode = '';\n    }\n    return {\n      'filledStatic': appUrl + this.#getWeatherIconPath(iconCode, 'fill', false),\n      'filledAnimated': appUrl + this.#getWeatherIconPath(iconCode, 'fill', true),\n      'outlineStatic': appUrl + this.#getWeatherIconPath(iconCode, 'line', false),\n      'outlineAnimated': appUrl + this.#getWeatherIconPath(iconCode, 'line', true),\n      'monoStatic': appUrl + this.#getWeatherIconPath(iconCode, 'monochrome', false),\n      'monoAnimated': appUrl + this.#getWeatherIconPath(iconCode, 'monochrome', true)\n    };\n  }\n\n  #getTemperatureText(value?: number, short = false) {\n    if (value === undefined) {\n      return 'NaN';\n    }\n    const valueText = value.toFixed(0);\n    if (short) {\n      return `${valueText}°`;\n    }\n    switch (this.#config.units) {\n      case 'metric':\n        return `${valueText}°C`;\n      case 'imperial':\n        return `${valueText}°F`;\n      default: // 'standard'\n        return `${valueText}K`;\n    }\n  }\n\n  #getWindSpeedText(value?: number) {\n    if (value === undefined) {\n      return 'NaN';\n    }\n    const valueText = value.toFixed(1);\n    switch (this.#config.units) {\n      case 'metric': // Meter/s\n        return `${valueText} m/s`;\n      case 'imperial': // Miles per hour\n        return `${valueText} mph`;\n      default: // 'standard' - meter/s\n        return `${valueText} m/s`;\n    }\n  }\n\n  #getHumidityText(value?: number) {\n    if (value === undefined) {\n      return 'NaN';\n    }\n    return `${value.toFixed(0)}%`;\n  }\n\n  #parseLocation(data: OpenWeatherMapAPIGetWeatherResult): WeatherDataLocation {\n    const locationData = data.location;\n    return {\n      name: locationData.name || '',\n      country: locationData.country || ''\n    };\n  }\n\n  #parseCurrent(data: OpenWeatherMapAPIGetWeatherResult) {\n    const currentData = data.current;\n    const appUrl = getPluginInfo().appUrl;\n    const temp = currentData.temp.now;\n    const humidity = currentData.humidity;\n    const windSpeed = currentData.windSpeed;\n    const tempMin = currentData.temp.min;\n    const tempMax = currentData.temp.max;\n    const result: WeatherDataCurrent = {\n      temp: {\n        now: {\n          value: temp || NaN,\n          text: this.#getTemperatureText(temp),\n          shortText: this.#getTemperatureText(temp, true)\n        },\n        min: {\n          value: tempMin || NaN,\n          text: this.#getTemperatureText(tempMin),\n          shortText: this.#getTemperatureText(tempMin, true)\n        },\n        max: {\n          value: tempMax || NaN,\n          text: this.#getTemperatureText(tempMax),\n          shortText: this.#getTemperatureText(tempMax, true)\n        }\n      },\n      humidity: {\n        value: humidity || NaN,\n        text: this.#getHumidityText(humidity)\n      },\n      windSpeed: {\n        value: windSpeed || NaN,\n        text: this.#getWindSpeedText(windSpeed)\n      },\n      iconUrl: {\n        condition: this.#getWeatherIconUrls(appUrl, currentData.icon),\n        humidity: this.#getWeatherIconUrls(appUrl, '_humidity'),\n        windSpeed: this.#getWeatherIconUrls(appUrl, '_windSpeed')\n      }\n    };\n    return result;\n  }\n\n  #parseForecast(data: OpenWeatherMapAPIGetWeatherResult) {\n    const appUrl = getPluginInfo().appUrl;\n    const forecast: WeatherDataForecastDay[] = [];\n    for (const dailyWeather of data.daily) {\n      const tempMin = dailyWeather.temp.min;\n      const tempMax = dailyWeather.temp.max;\n      const humidity = dailyWeather.humidity;\n      const windSpeed = dailyWeather.windSpeed;\n      forecast.push({\n        temp: {\n          min: {\n            value: tempMin || NaN,\n            text: this.#getTemperatureText(tempMin),\n            shortText: this.#getTemperatureText(tempMin, true)\n          },\n          max: {\n            value: tempMax || NaN,\n            text: this.#getTemperatureText(tempMax),\n            shortText: this.#getTemperatureText(tempMax, true)\n          }\n        },\n        humidity: {\n          value: humidity || NaN,\n          text: this.#getHumidityText(humidity)\n        },\n        windSpeed: {\n          value: windSpeed || NaN,\n          text: this.#getWindSpeedText(windSpeed)\n        },\n        iconUrl: {\n          condition: this.#getWeatherIconUrls(appUrl, dailyWeather.icon),\n          humidity: this.#getWeatherIconUrls(appUrl, '_humidity'),\n          windSpeed: this.#getWeatherIconUrls(appUrl, '_windSpeed')\n        },\n        dateTimeMillis: dailyWeather.dateTimeMillis || NaN\n      });\n    }\n    return forecast.slice(1); // First day of forecast is actually current day\n  }\n\n  #parseHourly(data: OpenWeatherMapAPIGetWeatherResult) {\n    const appUrl = getPluginInfo().appUrl;\n    const hourly: WeatherDataHourly[] = [];\n    for (const hourlyWeather of data.hourly) {\n      const temp = hourlyWeather.temp;\n      const humidity = hourlyWeather.humidity;\n      const windSpeed = hourlyWeather.windSpeed;\n      hourly.push({\n        temp: {\n          value: temp || NaN,\n          text: this.#getTemperatureText(temp),\n          shortText: this.#getTemperatureText(temp, true)\n        },\n        humidity: {\n          value: humidity || NaN,\n          text: this.#getHumidityText(humidity)\n        },\n        windSpeed: {\n          value: windSpeed || NaN,\n          text: this.#getWindSpeedText(windSpeed)\n        },\n        iconUrl: {\n          condition: this.#getWeatherIconUrls(appUrl, hourlyWeather.icon),\n          humidity: this.#getWeatherIconUrls(appUrl, '_humidity'),\n          windSpeed: this.#getWeatherIconUrls(appUrl, '_windSpeed')\n        },\n        dateTimeMillis: hourlyWeather.dateTimeMillis || NaN\n      });\n    }\n    return hourly;\n  }\n\n  async #doFetchInfo(config: DeepRequired<WeatherAPIParsedConfig>): Promise<WeatherData> {\n    return this.#getFetchPromise(async() => {\n      const weather = await this.#api.getWeather();\n\n      return {\n        location: this.#parseLocation(weather),\n        current: this.#parseCurrent(weather),\n        forecast: this.#parseForecast(weather),\n        hourly: this.#parseHourly(weather),\n        units: config.units\n      };\n    });\n  }\n\n  async fetchInfo() {\n    const config = this.#config;\n    if (!this.#isConfigValid(config)) {\n      throw Error(np.getI18n('NOW_PLAYING_ERR_WEATHER_MISCONFIG'));\n    }\n    try {\n      const cacheKey = md5(JSON.stringify(this.#config));\n      return await this.#cache.getOrSet('weather', cacheKey, () => this.#doFetchInfo(config));\n    }\n    catch (e: any) {\n      const msg = np.getI18n('NOW_PLAYING_ERR_WEATHER_FETCH') + (e.message ? `: ${e.message}` : '');\n      throw Error(msg);\n    }\n  }\n\n  #isConfigValid(config: WeatherAPIParsedConfig): config is DeepRequired<WeatherAPIParsedConfig> {\n    return !!(config.coordinates && config.units);\n  }\n}\n\nconst weatherAPI = new WeatherAPI();\n\nexport default weatherAPI;\n"]}