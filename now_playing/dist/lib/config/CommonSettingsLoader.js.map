{"version":3,"file":"CommonSettingsLoader.js","sourceRoot":"","sources":["../../../src/lib/config/CommonSettingsLoader.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6EAAsC;AACtC,kEAA0C;AAC1C,2DAA8E;AAE9E,MAAqB,oBAAoB;IAEvC,MAAM,CAAC,GAAG,CAAmC,QAAW;QACtD,IAAI,QAAQ,KAAK,2CAAsB,CAAC,YAAY,EAAE;YACpD,OAAO,uBAAA,IAAI,yDAAyB,MAA7B,IAAI,CAA6D,CAAC;SAC1E;QAED,OAAO,2BAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CA+BF;AAvCD,uCAuCC;;IA5BG,MAAM,YAAY,GAAG,2BAAE,CAAC,cAAc,CAAC,2CAAsB,CAAC,YAAY,CAAC,CAAC;IAE5E,QAAQ,YAAY,CAAC,MAAM,EAAE;QAC3B,KAAK,cAAc;YACjB,YAAY,CAAC,cAAc,GAAG,sBAAY,CAAC,gBAAgB,EAAE,CAAC;YAC9D,MAAM;QACR,KAAK,aAAa,CAAC;QACnB,KAAK,mBAAmB;YACtB,YAAY,CAAC,cAAc,GAAG,IAAI,CAAC;YACnC,MAAM;QACR;YACE,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC;KACrD;IAED,QAAQ,YAAY,CAAC,QAAQ,EAAE;QAC7B,KAAK,aAAa,CAAC;QACnB,KAAK,qBAAqB;YACxB,YAAY,CAAC,gBAAgB,GAAG,IAAI,CAAC;YACrC,MAAM;QACR,KAAK,qBAAqB;YACxB,YAAY,CAAC,gBAAgB,GAAG,YAAY,CAAC,WAAW,IAAI,IAAI,CAAC;YACjE,MAAM;QACR;YACE,YAAY,CAAC,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC;KACzD;IAED,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import np from '../NowPlayingContext';\nimport ConfigHelper from './ConfigHelper';\nimport { CommonSettingsCategory, CommonSettingsOf } from 'now-playing-common';\n\nexport default class CommonSettingsLoader {\n\n  static get<T extends CommonSettingsCategory>(category: T): CommonSettingsOf<T> {\n    if (category === CommonSettingsCategory.Localization) {\n      return this.#getLocalizationSettings() as unknown as CommonSettingsOf<T>;\n    }\n\n    return np.getConfigValue(category);\n  }\n\n  static #getLocalizationSettings() {\n    const localization = np.getConfigValue(CommonSettingsCategory.Localization);\n\n    switch (localization.locale) {\n      case 'matchVolumio':\n        localization.resolvedLocale = ConfigHelper.getVolumioLocale();\n        break;\n      case 'matchClient':\n      case 'localeListDivider':\n        localization.resolvedLocale = null;\n        break;\n      default:\n        localization.resolvedLocale = localization.locale;\n    }\n\n    switch (localization.timezone) {\n      case 'matchClient':\n      case 'timezoneListDivider':\n        localization.resolvedTimezone = null;\n        break;\n      case 'matchGeoCoordinates':\n        localization.resolvedTimezone = localization.geoTimezone || null;\n        break;\n      default:\n        localization.resolvedTimezone = localization.timezone;\n    }\n\n    return localization;\n  }\n}\n"]}