{"version":3,"file":"Handler.js","sourceRoot":"","sources":["../../src/app/Handler.ts"],"names":[],"mappings":"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","sourcesContent":["import ejs from 'ejs';\nimport express from 'express';\nimport fs from 'fs';\nimport np from '../lib/NowPlayingContext';\nimport { PluginInfo, getPluginInfo } from '../lib/utils/System';\nimport metadataAPI from '../lib/api/MetadataAPI';\nimport settingsAPI from '../lib/api/SettingsAPI';\nimport weatherAPI from '../lib/api/WeatherAPI';\nimport unsplashAPI from '../lib/api/UnsplashAPI';\nimport CommonSettingsLoader from '../lib/config/CommonSettingsLoader';\nimport { CommonSettingsCategory } from 'now-playing-common';\nimport myBackgroundMonitor from '../lib/utils/MyBackgroundMonitor';\nimport { rnd } from '../lib/utils/Misc';\nimport * as SystemUtils from '../lib/utils/System';\nimport { FONT_DIR } from '../lib/utils/FontHelper';\n\ninterface RenderViewData {\n  i18n?: typeof np['getI18n'];\n  host?: string;\n  pluginInfo?: PluginInfo;\n  [k: string]: any;\n}\n\nconst APIs: Record<string, any> = {\n  metadata: metadataAPI,\n  settings: settingsAPI,\n  weather: weatherAPI,\n  unsplash: unsplashAPI\n};\n\nexport async function index(req: express.Request, res: express.Response) {\n  const html = await renderView('index', req, {\n    settings: {\n      [CommonSettingsCategory.Startup]: CommonSettingsLoader.get(CommonSettingsCategory.Startup),\n      [CommonSettingsCategory.ContentRegion]: CommonSettingsLoader.get(CommonSettingsCategory.ContentRegion),\n      [CommonSettingsCategory.NowPlayingScreen]: CommonSettingsLoader.get(CommonSettingsCategory.NowPlayingScreen),\n      [CommonSettingsCategory.IdleScreen]: CommonSettingsLoader.get(CommonSettingsCategory.IdleScreen),\n      [CommonSettingsCategory.Background]: CommonSettingsLoader.get(CommonSettingsCategory.Background),\n      [CommonSettingsCategory.ActionPanel]: CommonSettingsLoader.get(CommonSettingsCategory.ActionPanel),\n      [CommonSettingsCategory.Theme]: CommonSettingsLoader.get(CommonSettingsCategory.Theme),\n      [CommonSettingsCategory.Performance]: CommonSettingsLoader.get(CommonSettingsCategory.Performance),\n      [CommonSettingsCategory.Localization]: CommonSettingsLoader.get(CommonSettingsCategory.Localization)\n    }\n  });\n  res.send(html);\n}\n\nexport async function preview(req: express.Request, res: express.Response) {\n  const html = await renderView('preview', req, {\n    nowPlayingUrl: getNowPlayingURL(req)\n  });\n  res.send(html);\n}\n\nexport async function myBackground(params: Record<string, any>, res: express.Response) {\n  const images = myBackgroundMonitor.getImages();\n  if (images.length === 0) {\n    np.getLogger().error('[now-playing] No images found in My Backgrounds');\n    res.send(404);\n    return;\n  }\n  let targetImage: typeof images[number] | undefined;\n  const { file } = params;\n  if (file) {\n    targetImage = images.find((img) => img.name === file);\n    if (!targetImage) {\n      np.getLogger().error(`[now-playing] Image '${file}' not found in My Backgrounds`);\n      res.send(404);\n      return;\n    }\n  }\n  else {\n    const rndIndex = rnd(0, images.length);\n    targetImage = images[rndIndex];\n    np.getLogger().info(`[now-playing] Random My Background image: '${targetImage.name}'`);\n  }\n  if (!SystemUtils.fileExists(targetImage.path)) {\n    np.getLogger().error(`[now-playing] Path to My Background image '${targetImage.path}' not found`);\n    res.send(404);\n    return;\n  }\n  try {\n    fs.createReadStream(targetImage.path).pipe(res);\n  }\n  catch (error: any) {\n    np.getLogger().error(np.getErrorMessage(`[now-playing] Error piping ${targetImage.path} to response`, error, true));\n    res.send(400);\n\n  }\n}\n\nexport async function api(apiName: string, method: string, params: Record<string, any>, res: express.Response) {\n  const api = apiName && method ? APIs[apiName] as any : null;\n  const fn = api && typeof api[method] === 'function' ? api[method] : null;\n  if (fn) {\n    try {\n      const result = await fn.call(api, params);\n      res.json({\n        success: true,\n        data: result\n      });\n    }\n    catch (e: any) {\n      np.getLogger().error(np.getErrorMessage(`[now-playing] API endpoint ${apiName}/${method} returned error:`, e, true));\n      res.json({\n        success: false,\n        error: e.message || e\n      });\n    }\n  }\n  else {\n    res.json({\n      success: false,\n      error: `Invalid API endpoint ${apiName}/${method}`\n    });\n  }\n}\n\nexport async function font(filename: string, res: express.Response) {\n  const assetPath = `${FONT_DIR}/${filename}`;\n  if (!SystemUtils.fileExists(assetPath)) {\n    return res.send(404);\n  }\n  try {\n    fs.createReadStream(assetPath).pipe(res);\n  }\n  catch (error: any) {\n    np.getLogger().error(np.getErrorMessage(`[now-playing] Error piping ${assetPath} to response`, error, true));\n    return res.send(400);\n  }\n}\n\nfunction getNowPlayingURL(req: express.Request) {\n  return `${req.protocol}://${req.hostname}:${np.getConfigValue('port')}`;\n}\n\nfunction renderView(name: string, req: express.Request, data: RenderViewData = {}) {\n  if (!data.i18n) {\n    data.i18n = np.getI18n.bind(np);\n  }\n  if (!data.host) {\n    data.host = `${req.protocol}://${req.hostname}:3000`;\n  }\n  if (!data.pluginInfo) {\n    data.pluginInfo = getPluginInfo();\n  }\n  return new Promise((resolve, reject) => {\n    ejs.renderFile(`${__dirname}/views/${name}.ejs`, data, {}, (err, str) => {\n      if (err) {\n        reject(err);\n      }\n      else {\n        resolve(str);\n      }\n    });\n  });\n}\n"]}