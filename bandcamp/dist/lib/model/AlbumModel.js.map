{"version":3,"file":"AlbumModel.js","sourceRoot":"","sources":["../../../src/lib/model/AlbumModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oEAAgD;AAChD,yEAA0C;AAC1C,4DAAoC;AAEpC,8EAAsD;AAEtD,MAAqB,UAAW,SAAQ,mBAAS;IAAjD;;;IAkCA,CAAC;IAhCC,KAAK,CAAC,QAAQ,CAAC,QAAgB;QAC7B,MAAM,WAAW,GAAG;YAClB,QAAQ;YACR,gBAAgB,EAAE,IAAI,CAAC,mBAAmB,EAAE;YAC5C,iBAAiB,EAAE,IAAI,CAAC,oBAAoB,EAAE;YAC9C,cAAc,EAAE,KAAK;SACtB,CAAC;QACF,MAAM,KAAK,GAAG,MAAM,yBAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC9C,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,WAAW,CAAC,EAC9C,GAAG,EAAE,CAAC,wBAAO,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;QAEpD,MAAM,WAAW,GAAG,uBAAA,IAAI,qEAA4B,MAAhC,IAAI,EAA6B,KAAK,CAAC,CAAC;QAE5D,uBAAA,IAAI,sDAAa,MAAjB,IAAI,EAAc,WAAW,CAAC,MAAM,CAAC,CAAC;QAEtC,OAAO,WAAW,CAAC;IACrB,CAAC;CAgBF;AAlCD,6BAkCC;kGAdc,MAAuB;IAClC,IAAI,CAAC,MAAM,EAAE;QACX,OAAO;KACR;IACD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;QACvB,IAAI,KAAK,CAAC,GAAG,EAAE;YACb,yBAAQ,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;SAC5F;IACH,CAAC,CAAC,CAAC;AACL,CAAC,2FAE2B,IAAW;IACrC,OAAO,yBAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import bcfetch, { Album } from 'bandcamp-fetch';\nimport bandcamp from '../BandcampContext';\nimport BaseModel from './BaseModel';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport EntityConverter from '../util/EntityConverter';\n\nexport default class AlbumModel extends BaseModel {\n\n  async getAlbum(albumUrl: string): Promise<AlbumEntity> {\n    const queryParams = {\n      albumUrl,\n      albumImageFormat: this.getAlbumImageFormat(),\n      artistImageFormat: this.getArtistImageFormat(),\n      includeRawData: false\n    };\n    const album = await bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('album', queryParams),\n      () => bcfetch.limiter.album.getInfo(queryParams));\n\n    const albumEntity = this.#converFetchedAlbumToEntity(album);\n\n    this.#cacheTracks(albumEntity.tracks);\n\n    return albumEntity;\n  }\n\n  #cacheTracks(tracks: Album['tracks']) {\n    if (!tracks) {\n      return;\n    }\n    tracks.forEach((track) => {\n      if (track.url) {\n        bandcamp.getCache().put(this.getCacheKeyForFetch('track', { trackUrl: track.url }), track);\n      }\n    });\n  }\n\n  #converFetchedAlbumToEntity(item: Album): AlbumEntity {\n    return EntityConverter.convertAlbum(item);\n  }\n}\n"]}