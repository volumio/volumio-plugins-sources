{"version":3,"file":"TagModel.js","sourceRoot":"","sources":["../../../src/lib/model/TagModel.ts"],"names":[],"mappings":"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","sourcesContent":["import bcfetch, { Album, ReleasesByTag, TagAPIGetReleasesParams, Track } from 'bandcamp-fetch';\nimport bandcamp from '../BandcampContext';\nimport BaseModel, { LoopFetchCallbackParams, LoopFetchResult } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport TrackEntity from '../entities/TrackEntity';\n\nexport interface TagModelGetReleasesParams {\n  tagUrl: string;\n  filters: TagAPIGetReleasesParams['filters'];\n  pageToken?: string;\n  pageOffset?: number;\n  limit: number;\n}\n\ninterface GetReleasesLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  tagUrl: string;\n  filters: TagAPIGetReleasesParams['filters'];\n}\n\nexport interface ReleasesLoopFetchResult extends LoopFetchResult<AlbumEntity | TrackEntity> {\n  filters: ReleasesByTag['filters'];\n}\n\nexport default class TagModel extends BaseModel {\n\n  getReleases(params: TagModelGetReleasesParams) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getReleasesFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getReleasesFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromReleasesFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedReleaseToEntity.bind(this),\n      onEnd: this.#onGetReleasesLoopFetchEnd.bind(this),\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getReleasesFetchPromise(params: GetReleasesLoopFetchCallbackParams) {\n    const page = params.pageToken ? parseInt(params.pageToken, 10) : 1;\n    const queryParams = {\n      tagUrl: params.tagUrl,\n      page,\n      filters: params.filters,\n      imageFormat: this.getAlbumImageFormat()\n    };\n    return bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('releasesByTag', queryParams),\n      () => bcfetch.limiter.tag.getReleases(queryParams));\n  }\n\n  #getReleasesFromFetchResult(result: ReleasesByTag) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromReleasesFetchResult(result: ReleasesByTag, params: GetReleasesLoopFetchCallbackParams) {\n    const page = params.pageToken ? parseInt(params.pageToken) : 1;\n    if (result.items.length > 0 && result.hasMore) {\n      return (page + 1).toString();\n    }\n\n    return null;\n\n  }\n\n  #convertFetchedReleaseToEntity(item: Album | Track): AlbumEntity | TrackEntity {\n    if (item.type === 'album') {\n      return EntityConverter.convertAlbum(item);\n    }\n\n    return EntityConverter.convertTrack(item);\n  }\n\n  #onGetReleasesLoopFetchEnd(result: LoopFetchResult<AlbumEntity| TrackEntity>, lastFetchResult: ReleasesByTag) {\n    const r: ReleasesLoopFetchResult = {\n      ...result,\n      filters: lastFetchResult.filters\n    };\n    return r;\n  }\n\n  async getTag(tagUrl: string) {\n    const tag = await bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('tag', { tagUrl }),\n      () => bcfetch.limiter.tag.getInfo(tagUrl));\n\n    return EntityConverter.convertTag(tag);\n  }\n\n  async getTags() {\n    const tags = await bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('tags'),\n      () => bcfetch.limiter.tag.list());\n\n    return {\n      tags: tags.tags.map((tag) => EntityConverter.convertTag({ ...tag, type: 'tag' })),\n      locations: tags.locations.map((tag) => EntityConverter.convertTag({ ...tag, type: 'tag' }))\n    };\n  }\n\n  getReleasesAvailableFilters(tagUrl: string) {\n    return bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('releasesByTagFilterOptions', { tagUrl }),\n      () => bcfetch.limiter.tag.getReleasesAvailableFilters(tagUrl));\n  }\n}\n"]}