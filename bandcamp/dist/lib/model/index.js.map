{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/model/index.ts"],"names":[],"mappings":";;;;;;AAAA,oEAAqC;AACrC,8DAAsC;AACtC,kEAA0C;AAC1C,4DAAoC;AACpC,oEAA4C;AAC5C,0DAAkC;AAClC,gEAAwC;AACxC,4DAAoC;AACpC,0DAAkC;AAClC,8DAAsC;AAEtC,IAAY,SAUX;AAVD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,gCAAmB,CAAA;IACnB,0BAAa,CAAA;IACb,kCAAqB,CAAA;IACrB,wBAAW,CAAA;IACX,8BAAiB,CAAA;IACjB,0BAAa,CAAA;IACb,wBAAW,CAAA;IACX,4BAAe,CAAA;AACjB,CAAC,EAVW,SAAS,yBAAT,SAAS,QAUpB;AAED,MAAM,mBAAmB,GAAqB;IAC5C,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,oBAAU;IAC7B,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,sBAAY;IACjC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAS;IAC3B,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,kBAAQ;IACzB,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,qBAAW;IAC/B,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAS;IAC3B,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,kBAAQ;IACzB,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,oBAAU;CAC9B,CAAC;AAEF,MAAqB,KAAK;IAWxB,MAAM,CAAC,WAAW,CAAC,IAAe;QAChC,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,CAAC;QACD,MAAM,KAAK,CAAC,4BAA4B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,KAAqB;QACpC,wBAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,MAAM,KAAK,MAAM;QACf,OAAO,wBAAO,CAAC,MAAM,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,KAAK;QACV,wBAAO,CAAC,SAAS,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,aAAa;QAClB,wBAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,GAAW;QACtC,MAAM,UAAU,GAAG,MAAM,wBAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,UAAU,CAAC,EAAE,EAAE,CAAC;YAClB,OAAO,GAAG,CAAC;QACb,CAAC;QACD,OAAO,MAAM,wBAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC3C,CAAC;CACF;AA1CD,wBA0CC","sourcesContent":["import bcfetch from 'bandcamp-fetch';\nimport AlbumModel from './AlbumModel';\nimport ArticleModel from './ArticleModel';\nimport BandModel from './BandModel';\nimport DiscoverModel from './DiscoverModel';\nimport FanModel from './FanModel';\nimport SearchModel from './SearchModel';\nimport ShowModel from './ShowModel';\nimport TagModel from './TagModel';\nimport TrackModel from './TrackModel';\n\nexport enum ModelType {\n  Album = 'Album',\n  Article = 'Article',\n  Band = 'Band',\n  Discover = 'Discover',\n  Fan = 'Fan',\n  Search = 'Search',\n  Show = 'Show',\n  Tag = 'Tag',\n  Track = 'Track'\n}\n\nconst MODEL_TYPE_TO_CLASS: Record<any, any> = {\n  [ModelType.Album]: AlbumModel,\n  [ModelType.Article]: ArticleModel,\n  [ModelType.Band]: BandModel,\n  [ModelType.Discover]: DiscoverModel,\n  [ModelType.Fan]: FanModel,\n  [ModelType.Search]: SearchModel,\n  [ModelType.Show]: ShowModel,\n  [ModelType.Tag]: TagModel,\n  [ModelType.Track]: TrackModel\n};\n\nexport default class Model {\n\n  static getInstance(type: ModelType.Album): AlbumModel;\n  static getInstance(type: ModelType.Article): ArticleModel;\n  static getInstance(type: ModelType.Band): BandModel;\n  static getInstance(type: ModelType.Discover): DiscoverModel;\n  static getInstance(type: ModelType.Fan): FanModel;\n  static getInstance(type: ModelType.Search): SearchModel;\n  static getInstance(type: ModelType.Show): ShowModel;\n  static getInstance(type: ModelType.Tag): TagModel;\n  static getInstance(type: ModelType.Track): TrackModel;\n  static getInstance(type: ModelType) {\n    if (MODEL_TYPE_TO_CLASS[type]) {\n      return new MODEL_TYPE_TO_CLASS[type]();\n    }\n    throw Error(`Model not found for type ${String(type)}`);\n  }\n\n  static setCookie(value?: string | null) {\n    bcfetch.setCookie(value);\n  }\n\n  static get cookie() {\n    return bcfetch.cookie;\n  }\n\n  static reset() {\n    bcfetch.setCookie();\n    this.clearLibCache();\n  }\n\n  static clearLibCache() {\n    bcfetch.cache.clear();\n  }\n\n  static async ensureStreamURL(url: string) {\n    const testResult = await bcfetch.stream.test(url);\n    if (testResult.ok) {\n      return url;\n    }\n    return await bcfetch.stream.refresh(url);\n  }\n}\n"]}