{"version":3,"file":"FanModel.js","sourceRoot":"","sources":["../../../src/lib/model/FanModel.ts"],"names":[],"mappings":"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","sourcesContent":["import bcfetch, { Album, FanContinuationItemsResult, FanPageItemsResult, Tag, Track, UserKind } from 'bandcamp-fetch';\nimport bandcamp from '../BandcampContext';\nimport BaseModel, { LoopFetchCallbackParams, LoopFetchResult } from './BaseModel';\nimport BandEntity from '../entities/BandEntity';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport TrackEntity from '../entities/TrackEntity';\nimport TagEntity from '../entities/TagEntity';\nimport EntityConverter from '../util/EntityConverter';\n\nenum FanItemType {\n  Collection = 'Collection',\n  Wishlist = 'Wishlist',\n  FollowingArtistsAndLabels = 'FollowingArtistsAndLabels',\n  FollowingGenres = 'FollowingGenres'\n}\n\nexport interface FanModelGetFanItemsParams {\n  username: string;\n  pageToken?: string;\n  pageOffset?: number;\n  limit: number;\n}\n\ninterface GetFanItemsLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  username: string;\n  itemType: FanItemType;\n}\n\ntype FanItem = Album | Track | UserKind | Tag;\n\nexport default class FanModel extends BaseModel {\n\n  getInfo(username: string) {\n    const queryParams = {\n      username,\n      imageFormat: this.getArtistImageFormat()\n    };\n    return bandcamp.getCache().getOrSet(\n      this.getCacheKeyForFetch('fanInfo', queryParams),\n      () => bcfetch.limiter.fan.getInfo(queryParams));\n  }\n\n  getCollection(params: FanModelGetFanItemsParams) {\n    return this.#getFanItems(params, FanItemType.Collection);\n  }\n\n  getWishlist(params: FanModelGetFanItemsParams) {\n    return this.#getFanItems(params, FanItemType.Wishlist);\n  }\n\n  getFollowingArtistsAndLabels(params: FanModelGetFanItemsParams) {\n    return this.#getFanItems(params, FanItemType.FollowingArtistsAndLabels);\n  }\n\n  getFollowingGenres(params: FanModelGetFanItemsParams) {\n    return this.#getFanItems(params, FanItemType.FollowingGenres);\n  }\n\n  #getFanItems(params: FanModelGetFanItemsParams, itemType: FanItemType.Collection): Promise<LoopFetchResult<AlbumEntity | TrackEntity>>;\n  #getFanItems(params: FanModelGetFanItemsParams, itemType: FanItemType.Wishlist): Promise<LoopFetchResult<AlbumEntity | TrackEntity>>;\n  #getFanItems(params: FanModelGetFanItemsParams, itemType: FanItemType.FollowingArtistsAndLabels): Promise<LoopFetchResult<BandEntity>>;\n  #getFanItems(params: FanModelGetFanItemsParams, itemType: FanItemType.FollowingGenres): Promise<LoopFetchResult<TagEntity>>;\n  #getFanItems(params: FanModelGetFanItemsParams, itemType: FanItemType): Promise<LoopFetchResult<any>> {\n    return this.loopFetch({\n      callbackParams: { ...params, itemType },\n      getFetchPromise: this.#getFanItemsFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getFanItemsFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromFanItemsFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedFanItemToEntity.bind(this),\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getFanItemsFetchPromise(params: GetFanItemsLoopFetchCallbackParams): Promise<FanPageItemsResult<FanItem> | FanContinuationItemsResult<FanItem>> {\n    const continuationToken = params.pageToken ? JSON.parse(params.pageToken) : null;\n    const cacheKeyParams: Record<string, string> = {\n      username: params.username\n    };\n    if (continuationToken) {\n      cacheKeyParams.continuationToken = JSON.stringify(continuationToken);\n    }\n    const target = continuationToken || params.username;\n    switch (params.itemType) {\n      case FanItemType.Collection:\n        return bandcamp.getCache().getOrSet(\n          this.getCacheKeyForFetch('fanCollection', cacheKeyParams),\n          () => bcfetch.limiter.fan.getCollection({\n            target,\n            imageFormat: this.getAlbumImageFormat()\n          }));\n\n      case FanItemType.Wishlist:\n        return bandcamp.getCache().getOrSet(\n          this.getCacheKeyForFetch('fanWishlist', cacheKeyParams),\n          () => bcfetch.limiter.fan.getWishlist({\n            target,\n            imageFormat: this.getAlbumImageFormat()\n          }));\n\n      case FanItemType.FollowingArtistsAndLabels:\n        return bandcamp.getCache().getOrSet(\n          this.getCacheKeyForFetch('fanFollowingArtistsAndLabels', cacheKeyParams),\n          () => bcfetch.limiter.fan.getFollowingArtistsAndLabels({\n            target,\n            imageFormat: this.getArtistImageFormat()\n          }));\n\n      default:\n      case FanItemType.FollowingGenres:\n        return bandcamp.getCache().getOrSet(\n          this.getCacheKeyForFetch('fanFollowingGenres', cacheKeyParams),\n          () => bcfetch.limiter.fan.getFollowingGenres({\n            target,\n            imageFormat: this.getAlbumImageFormat()\n          }));\n    }\n  }\n\n  #getFanItemsFromFetchResult(result: FanPageItemsResult<FanItem> | FanContinuationItemsResult<FanItem>) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromFanItemsFetchResult(result: FanPageItemsResult<FanItem> | FanContinuationItemsResult<FanItem>) {\n    return result.continuation ? JSON.stringify(result.continuation) : null;\n  }\n\n  #convertFetchedFanItemToEntity(item: FanItem): BandEntity | AlbumEntity | TrackEntity | TagEntity {\n    switch ((item as any).type) {\n      case 'album':\n        return EntityConverter.convertAlbum(item as Album);\n      case 'track':\n        return EntityConverter.convertTrack(item as Track);\n      case 'tag': // Following genres are tags\n        return EntityConverter.convertTag(item as Tag);\n      default: // UserKind (following artists / labels) does not have 'tag'\n        return EntityConverter.convertBand(item as UserKind);\n    }\n  }\n}\n"]}