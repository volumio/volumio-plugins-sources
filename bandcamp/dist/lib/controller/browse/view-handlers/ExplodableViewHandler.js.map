{"version":3,"file":"ExplodableViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ExplodableViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,wEAAgD;AAEhD,sEAA8C;AAG9C,8DAAsC;AActC,MAA8B,qBAA2E,SAAQ,yBAAkB;IAEjI,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC1D,OAAO,SAAS,CAAC,CAAC,CAAC,CAAE,SAAS,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACxC,CAAC;QAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAwB,CAAC;IAC9F,CAAC;IAES,oBAAoB,CAAC,KAAQ;QACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC;QACD,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzF,OAAO,OAAO,CAAC,OAAO,CAAC;YACrB,OAAO,EAAE,UAAU;YACnB,GAAG,EAAE,QAAQ;YACb,QAAQ,EAAE,KAAK,CAAC,SAAS;YACzB,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,IAAI;YAC1B,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI;YACxB,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ;SACzB,CAAC,CAAC;IACL,CAAC;IAID;;;OAGG;IACO,WAAW,CAAC,KAAQ;QAC5B,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC;QAC5C,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,EAAE,GAAG,IAAI,SAAS,CAAC;QAC/C,MAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,KAAK,CAAC,GAAG;SACpB,CAAC;QACF,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;QAClC,CAAC;QACD,IAAI,QAAQ,EAAE,CAAC;YACb,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAChC,CAAC;QAED,OAAO,YAAY,oBAAU,CAAC,2BAA2B,CAAC,SAAS,CAAC,EAAE,CAAC;IACzE,CAAC;CACF;AA7DD,wCA6DC","sourcesContent":["import BaseViewHandler from './BaseViewHandler';\nimport type View from './View';\nimport UIHelper from '../../../util/UIHelper';\nimport type TrackEntity from '../../../entities/TrackEntity';\nimport { type TrackView } from './TrackViewHandler';\nimport ViewHelper from './ViewHelper';\n\nexport interface ExplodedTrackInfo {\n  service: 'bandcamp';\n  uri: string;\n  albumart?: string;\n  artist?: string;\n  album?: string;\n  name: string;\n  title: string;\n  duration?: number;\n  samplerate?: string;\n}\n\nexport default abstract class ExplodableViewHandler<V extends View, E extends TrackEntity = TrackEntity> extends BaseViewHandler<V> {\n\n  async explode(): Promise<ExplodedTrackInfo[]> {\n    const view = this.currentView;\n    if (view.noExplode) {\n      return [];\n    }\n\n    const tracks = await this.getTracksOnExplode();\n    if (!Array.isArray(tracks)) {\n      const trackInfo = await this.parseTrackForExplode(tracks);\n      return trackInfo ? [ trackInfo ] : [];\n    }\n\n    const trackInfoPromises = tracks.map((track) => this.parseTrackForExplode(track));\n    return (await Promise.all(trackInfoPromises)).filter((song) => song) as ExplodedTrackInfo[];\n  }\n\n  protected parseTrackForExplode(track: E): Promise<ExplodedTrackInfo | null> {\n    const trackUri = this.getTrackUri(track);\n    if (!trackUri) {\n      return Promise.resolve(null);\n    }\n    const trackName = track.streamUrl ? track.name : UIHelper.addNonPlayableText(track.name);\n    return Promise.resolve({\n      service: 'bandcamp',\n      uri: trackUri,\n      albumart: track.thumbnail,\n      artist: track.artist?.name,\n      album: track.album?.name,\n      name: trackName,\n      title: trackName,\n      duration: track.duration\n    });\n  }\n\n  protected abstract getTracksOnExplode(): Promise<E | E[]>;\n\n  /**\n   * Track uri:\n   * bandcamp/track@trackUrl={trackUrl}@artistUrl={...}@albumUrl={...}\n   */\n  protected getTrackUri(track: E) {\n    if (!track.url) {\n      return null;\n    }\n    const artistUrl = track.artist?.url || null;\n    const albumUrl = track.album?.url || artistUrl;\n    const trackView: TrackView = {\n      name: 'track',\n      trackUrl: track.url\n    };\n    if (artistUrl) {\n      trackView.artistUrl = artistUrl;\n    }\n    if (albumUrl) {\n      trackView.albumUrl = albumUrl;\n    }\n\n    return `bandcamp/${ViewHelper.constructUriSegmentFromView(trackView)}`;\n  }\n}\n"]}