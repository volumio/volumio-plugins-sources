import { ModelType } from '../../../model';
import AlbumModel from '../../../model/AlbumModel';
import ArticleModel from '../../../model/ArticleModel';
import BandModel from '../../../model/BandModel';
import DiscoverModel from '../../../model/DiscoverModel';
import FanModel from '../../../model/FanModel';
import SearchModel from '../../../model/SearchModel';
import ShowModel from '../../../model/ShowModel';
import TagModel from '../../../model/TagModel';
import TrackModel from '../../../model/TrackModel';
import { ExplodedTrackInfo } from './ExplodableViewHandler';
import View, { PageRef } from './View';
import ViewHandler, { RenderedPage } from './ViewHandler';
import { RendererType } from './renderers';
import AlbumRenderer from './renderers/AlbumRenderer';
import ArticleRenderer from './renderers/ArticleRenderer';
import BandRenderer from './renderers/BandRenderer';
import { RenderedListItem } from './renderers/BaseRenderer';
import SearchResultRenderer from './renderers/SearchResultParser';
import ShowRenderer from './renderers/ShowRenderer';
import TagRenderer from './renderers/TagRenderer';
import TrackRenderer from './renderers/TrackRenderer';
export default class BaseViewHandler<V extends View> implements ViewHandler {
    #private;
    constructor(uri: string, currentView: V, previousViews: View[]);
    browse(): Promise<RenderedPage>;
    explode(): Promise<ExplodedTrackInfo[]>;
    get uri(): string;
    get currentView(): V;
    get previousViews(): View[];
    getModel(type: ModelType.Album): AlbumModel;
    getModel(type: ModelType.Article): ArticleModel;
    getModel(type: ModelType.Band): BandModel;
    getModel(type: ModelType.Discover): DiscoverModel;
    getModel(type: ModelType.Fan): FanModel;
    getModel(type: ModelType.Search): SearchModel;
    getModel(type: ModelType.Show): ShowModel;
    getModel(type: ModelType.Tag): TagModel;
    getModel(type: ModelType.Track): TrackModel;
    getRenderer(type: RendererType.Album): AlbumRenderer;
    getRenderer(type: RendererType.Band): BandRenderer;
    getRenderer(type: RendererType.Article): ArticleRenderer;
    getRenderer(type: RendererType.SearchResult): SearchResultRenderer;
    getRenderer(type: RendererType.Show): ShowRenderer;
    getRenderer(type: RendererType.Tag): TagRenderer;
    getRenderer(type: RendererType.Track): TrackRenderer;
    constructPrevUri(): string;
    constructNextUri(nextPageRef: PageRef): string;
    constructNextPageItem(nextUri: string, title?: string): RenderedListItem;
    constructPageRef(pageToken?: string | null, pageOffset?: number): PageRef | null;
}
//# sourceMappingURL=BaseViewHandler.d.ts.map