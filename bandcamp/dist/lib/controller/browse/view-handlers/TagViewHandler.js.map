{"version":3,"file":"TagViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/TagViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,+EAAgD;AAEhD,0CAA2C;AAC3C,sEAA6D;AAI7D,2CAA2C;AAM3C,wEAAgD;AAEhD,MAAM,YAAY,GAA2B;IAC3C,IAAI,EAAE,YAAY;IAClB,QAAQ,EAAE,kBAAkB;IAC5B,MAAM,EAAE,eAAe;CACxB,CAAC;AACF,MAAM,YAAY,GAAG,CAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAE,CAAC;AAQtD,MAAqB,cAAe,SAAQ,yBAAwB;IAApE;;;QAsCE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAqDG;QAEH;;;;;;WAMG;QACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAmCG;IACL,CAAC;IAtIC,KAAK,CAAC,MAAM;QACV,OAAO,uBAAA,IAAI,6DAAY,MAAhB,IAAI,CAAc,CAAC;IAC5B,CAAC;CAoIF;wEAlIC,KAAK;IACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;IAC1D,MAAM,KAAK,GAAG;QACZ,uBAAA,IAAI,8DAAa,MAAjB,IAAI,EAAc,IAAI,EAAE,MAAM,EAAE,yBAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,WAAW,CAAC;QAC/E,uBAAA,IAAI,8DAAa,MAAjB,IAAI,EAAc,IAAI,EAAE,WAAW,EAAE,yBAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE,kBAAkB,CAAC;KACjG,CAAC;IAEF,OAAO;QACL,UAAU,EAAE;YACV,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACtC,KAAK;SACN;KACF,CAAC;AACJ,CAAC,qEAEY,IAAiC,EAAE,GAAW,EAAE,KAAa,EAAE,IAAY;IACtF,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,GAAG,CAAC,CAAC;IACvD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QACrE,MAAM,QAAQ,GAAG,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO;QACL,KAAK,EAAE,kBAAQ,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC;QAC/C,kBAAkB,EAAE,CAAE,MAAM,CAAE;QAC9B,KAAK,EAAE,SAAS;KACjB,CAAC;AACJ,CAAC;kBApCkB,cAAc","sourcesContent":["import bandcamp from '../../../BandcampContext';\nimport type TagEntity from '../../../entities/TagEntity';\nimport { ModelType } from '../../../model';\nimport UIHelper, { UI_STYLES } from '../../../util/UIHelper';\nimport type View from './View';\nimport { type RenderedList, type RenderedPage } from './ViewHandler';\nimport ViewHelper from './ViewHelper';\nimport { RendererType } from './renderers';\nimport { type RenderedListItem } from './renderers/BaseRenderer';\nimport TrackEntity from '../../../entities/TrackEntity';\nimport ExplodableViewHandler from './ExplodableViewHandler';\nimport { AlbumView } from './AlbumViewHandler';\nimport { TrackView } from './TrackViewHandler';\nimport BaseViewHandler from './BaseViewHandler';\n\nconst FILTER_ICONS: Record<string, string> = {\n  sort: 'fa fa-sort',\n  location: 'fa fa-map-marker',\n  format: 'fa fa-archive'\n};\nconst FILTER_NAMES = [ 'format', 'location', 'sort' ];\n\nexport interface TagView extends View {\n  name: 'tag';\n  tagUrl: string;\n  select?: string;\n}\n\nexport default class TagViewHandler extends BaseViewHandler<TagView> {\n\n  async browse(): Promise<RenderedPage> {\n    return this.#browseTags();\n  }\n\n  async #browseTags(): Promise<RenderedPage> {\n    const tags = await this.getModel(ModelType.Tag).getTags();\n    const lists = [\n      this.#getTagsList(tags, 'tags', bandcamp.getI18n('BANDCAMP_TAGS'), 'fa fa-tag'),\n      this.#getTagsList(tags, 'locations', bandcamp.getI18n('BANDCAMP_LOCATIONS'), 'fa fa-map-marker')\n    ];\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        lists\n      }\n    };\n  }\n\n  #getTagsList(tags: Record<string, TagEntity[]>, key: string, title: string, icon: string): RenderedList {\n    const tagRenderer = this.getRenderer(RendererType.Tag);\n    const listItems = tags[key].reduce<RenderedListItem[]>((result, tag) => {\n      const rendered = tagRenderer.renderToListItem(tag);\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n\n    return {\n      title: UIHelper.addIconToListTitle(icon, title),\n      availableListViews: [ 'list' ],\n      items: listItems\n    };\n  }\n\n  /*  Async getTracksOnExplode() {\n    throw Error('not supported');\n    /*const view = this.currentView;\n    const tagUrl = view.tagUrl;\n\n    if (!tagUrl) {\n      throw Error('Tag URL missing');\n    }\n\n    const modelParams: TagModelGetReleasesParams = {\n      tagUrl,\n      limit: bandcamp.getConfigValue('itemsPerPage', 47),\n      filters: await this.#getReleasesFiltersFromUriAndDefault()\n    };\n\n    if (view.pageRef) {\n      modelParams.pageToken = view.pageRef.pageToken;\n      modelParams.pageOffset = view.pageRef.pageOffset;\n    }\n\n    const releases = await this.getModel(ModelType.Tag).getReleases(modelParams);\n    const tracks = releases.items.reduce<TrackEntity[]>((result, release) => {\n      if (release.type === 'album' && release.featuredTrack?.streamUrl) {\n        const track: TrackEntity = {\n          type: 'track',\n          name: release.featuredTrack.name,\n          thumbnail: release.thumbnail,\n          artist: release.artist,\n          album: {\n            type: 'album',\n            name: release.name,\n            url: release.url\n          },\n          position: release.featuredTrack.position,\n          streamUrl: release.featuredTrack.streamUrl\n        };\n        result.push(track);\n      }\n      else if (release.type === 'track') {\n        const track: TrackEntity = {\n          type: 'track',\n          name: release.name,\n          url: release.url,\n          thumbnail: release.thumbnail,\n          artist: release.artist,\n          streamUrl: release.streamUrl\n        };\n        result.push(track);\n      }\n      return result;\n    }, []);\n\n    return tracks;\n  }*/\n\n  /**\n   * Override\n   *\n   * Track uri - one of:\n   * - bandcamp/album@albumUrl={...}@track={...}@artistUrl={...}\n   * - bandcamp/track@trackUrl={...}@artistUrl={...}@albumurl={...}\n   */\n  /*GetTrackUri(track: TrackEntity) {\n    const artistUrl = track.artist?.url || null;\n    const albumUrl = track.album?.url || artistUrl;\n    const trackUrl = track.url || null;\n\n    if (track.album && albumUrl) {\n      const albumView: AlbumView = {\n        name: 'album',\n        albumUrl\n      };\n      if (track.position) {\n        albumView.track = track.position.toString();\n      }\n      if (artistUrl) {\n        albumView.artistUrl = artistUrl;\n      }\n\n      return `bandcamp/${ViewHelper.constructUriSegmentFromView(albumView)}`;\n    }\n\n    if (trackUrl) {\n      const trackView: TrackView = {\n        name: 'track',\n        trackUrl\n      };\n      if (artistUrl) {\n        trackView.artistUrl = artistUrl;\n      }\n      if (albumUrl) {\n        trackView.albumUrl = albumUrl;\n      }\n      return `bandcamp/${ViewHelper.constructUriSegmentFromView(trackView)}`;\n    }\n\n    return null;\n  }*/\n}\n"]}