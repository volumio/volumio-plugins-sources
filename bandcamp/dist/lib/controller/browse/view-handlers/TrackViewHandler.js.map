{"version":3,"file":"TrackViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/TrackViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,+EAAgD;AAChD,0CAA2C;AAC3C,sEAA0D;AAE1D,oFAA4D;AAG5D,8EAAsD;AACtD,8DAAsC;AACtC,2CAA2C;AAW3C,MAAqB,gBAAiB,SAAQ,+BAAgC;IAA9E;;;IA4DA,CAAC;IA1DC,KAAK,CAAC,MAAM;QACV,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAE3C,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAClC;QAED,OAAO,uBAAA,IAAI,kEAAa,MAAjB,IAAI,EAAc,QAAQ,CAAC,CAAC;IACrC,CAAC;IA0CD,kBAAkB;QAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QAC3C,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;SAClC;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC;CACF;AA5DD,mCA4DC;6EAhDC,KAAK,wCAAc,QAAgB;IACjC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC1E,IAAI,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE;QACxB,MAAM,SAAS,GAAc;YAC3B,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,SAAS,CAAC,KAAK,CAAC,GAAG;SAC9B,CAAC;QACF,MAAM,YAAY,GAAG,oBAAU,CAAC,qBAAqB,CAAC;YACpD,GAAG,IAAI,CAAC,aAAa;YACrB,SAAS;SACV,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,4BAAkB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACrE,OAAO,gBAAgB,CAAC,MAAM,EAAE,CAAC;KAClC;IAED,MAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,KAAK,CAAC,CAAC;IAC3D,MAAM,QAAQ,GAAG,aAAa,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAC3D,MAAM,SAAS,GAAuB,QAAQ,CAAC,CAAC,CAAC,CAAE,QAAQ,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACnE,MAAM,qBAAqB,GAAW;QACpC,GAAG,EAAE,QAAQ;QACb,IAAI,EAAE,yBAAQ,CAAC,OAAO,CAAC,0BAA0B,CAAC;QAClD,IAAI,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;QAC1B,MAAM,EAAE,QAAQ;KACjB,CAAC;IAEF,OAAO;QACL,UAAU,EAAE;YACV,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACtC,IAAI,EAAE,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC;YAC7C,KAAK,EAAE;gBACL;oBACE,KAAK,EAAE,kBAAQ,CAAC,0BAA0B,CAAC,EAAE,EAAE,qBAAqB,EAAE,IAAI,CAAC;oBAC3E,kBAAkB,EAAE,CAAE,MAAM,CAAE;oBAC9B,KAAK,EAAE,SAAS;iBACjB;aACF;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import bandcamp from '../../../BandcampContext';\nimport { ModelType } from '../../../model';\nimport UIHelper, { UILink } from '../../../util/UIHelper';\nimport { AlbumView } from './AlbumViewHandler';\nimport ExplodableViewHandler from './ExplodableViewHandler';\nimport View from './View';\nimport { RenderedPage } from './ViewHandler';\nimport ViewHandlerFactory from './ViewHandlerFactory';\nimport ViewHelper from './ViewHelper';\nimport { RendererType } from './renderers';\nimport { RenderedListItem } from './renderers/BaseRenderer';\n\nexport interface TrackView extends View {\n  name: 'track';\n  trackUrl: string;\n  // For explode track URIs (used by `goto()`)\n  artistUrl?: string;\n  albumUrl?: string;\n}\n\nexport default class TrackViewHandler extends ExplodableViewHandler<TrackView> {\n\n  async browse(): Promise<RenderedPage> {\n    const trackUrl = this.currentView.trackUrl;\n\n    if (!trackUrl) {\n      throw Error('Track URL missing');\n    }\n\n    return this.#browseTrack(trackUrl);\n  }\n\n  async #browseTrack(trackUrl: string): Promise<RenderedPage> {\n    const trackInfo = await this.getModel(ModelType.Track).getTrack(trackUrl);\n    if (trackInfo.album?.url) {\n      const albumView: AlbumView = {\n        name: 'album',\n        albumUrl: trackInfo.album.url\n      };\n      const albumViewUri = ViewHelper.constructUriFromViews([\n        ...this.previousViews,\n        albumView\n      ]);\n      const albumViewHandler = ViewHandlerFactory.getHandler(albumViewUri);\n      return albumViewHandler.browse();\n    }\n\n    const trackRenderer = this.getRenderer(RendererType.Track);\n    const rendered = trackRenderer.renderToListItem(trackInfo);\n    const listItems: RenderedListItem[] = rendered ? [ rendered ] : [];\n    const viewTrackExternalLink: UILink = {\n      url: trackUrl,\n      text: bandcamp.getI18n('BANDCAMP_VIEW_LINK_TRACK'),\n      icon: { type: 'bandcamp' },\n      target: '_blank'\n    };\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        info: trackRenderer.renderToHeader(trackInfo),\n        lists: [\n          {\n            title: UIHelper.constructListTitleWithLink('', viewTrackExternalLink, true),\n            availableListViews: [ 'list' ],\n            items: listItems\n          }\n        ]\n      }\n    };\n  }\n\n  getTracksOnExplode() {\n    const trackUrl = this.currentView.trackUrl;\n    if (!trackUrl) {\n      throw Error('Track URL missing');\n    }\n\n    return this.getModel(ModelType.Track).getTrack(trackUrl);\n  }\n}\n"]}