{"version":3,"file":"SearchResultParser.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/SearchResultParser.ts"],"names":[],"mappings":";;;;;AAQA,+DAAuC;AACvC,kEAAgE;AAIhE,MAAqB,oBAAqB,SAAQ,sBAAgC;IAEhF,gBAAgB,CAAC,IAAwB;QACvC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACb,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAqB;YAC/B,OAAO,EAAE,UAAU;YACnB,GAAG,EAAE,EAAE;YACP,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;YACzC,QAAQ,EAAE,IAAI,CAAC,SAAS;SACzB,CAAC;QAEF,IAAI,IAAU,CAAC;QACf,QAAQ,IAAI,CAAC,IAAI,EAAE;YACjB,KAAK,QAAQ;gBACX,IAAI,GAAG;oBACL,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,IAAI,CAAC,GAAG;iBACN,CAAC;gBACd,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACvB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC9B,MAAM;YAER,KAAK,OAAO;gBACV,IAAI,GAAG;oBACL,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,IAAI,CAAC,GAAG;iBACN,CAAC;gBACd,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACvB,MAAM;YAER,KAAK,OAAO;gBACV,IAAI,GAAG;oBACL,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,IAAI,CAAC,GAAG;iBACN,CAAC;gBACf,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACvB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;gBAClC,MAAM;YAER,KAAK,OAAO;gBACV,IAAI,GAAG;oBACL,IAAI,EAAE,OAAO;oBACb,QAAQ,EAAE,IAAI,CAAC,GAAG;iBACN,CAAC;gBACf,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;gBACvB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;gBAClC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC;SACnC;QAED,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE,CAAC;QAE3E,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AAxDD,uCAwDC","sourcesContent":["import AlbumEntity from '../../../../entities/AlbumEntity';\nimport ArtistEntity from '../../../../entities/ArtistEntity';\nimport LabelEntity from '../../../../entities/LabelEntity';\nimport TrackEntity from '../../../../entities/TrackEntity';\nimport { AlbumView } from '../AlbumViewHandler';\nimport { BandView } from '../BandViewHandler';\nimport { TrackView } from '../TrackViewHandler';\nimport View from '../View';\nimport ViewHelper from '../ViewHelper';\nimport BaseRenderer, { RenderedListItem } from './BaseRenderer';\n\ntype SearchResultEntity = ArtistEntity | LabelEntity | AlbumEntity | TrackEntity;\n\nexport default class SearchResultRenderer extends BaseRenderer<SearchResultEntity> {\n\n  renderToListItem(data: SearchResultEntity): RenderedListItem | null {\n    if (!data.url) {\n      return null;\n    }\n    const result: RenderedListItem = {\n      service: 'bandcamp',\n      uri: '',\n      type: 'folder',\n      title: this.addType(data.type, data.name),\n      albumart: data.thumbnail\n    };\n\n    let view: View;\n    switch (data.type) {\n      case 'artist':\n        view = {\n          name: 'band',\n          bandUrl: data.url\n        } as BandView;\n        result.type = 'folder';\n        result.artist = data.location;\n        break;\n\n      case 'label':\n        view = {\n          name: 'band',\n          bandUrl: data.url\n        } as BandView;\n        result.type = 'folder';\n        break;\n\n      case 'album':\n        view = {\n          name: 'album',\n          albumUrl: data.url\n        } as AlbumView;\n        result.type = 'folder';\n        result.artist = data.artist?.name;\n        break;\n\n      case 'track':\n        view = {\n          name: 'track',\n          trackUrl: data.url\n        } as TrackView;\n        result.type = 'folder';\n        result.artist = data.artist?.name;\n        result.album = data.album?.name;\n    }\n\n    result.uri = `${this.uri}/${ViewHelper.constructUriSegmentFromView(view)}`;\n\n    return result;\n  }\n}\n"]}