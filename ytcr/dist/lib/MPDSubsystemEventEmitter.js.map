{"version":3,"file":"MPDSubsystemEventEmitter.js","sourceRoot":"","sources":["../../src/lib/MPDSubsystemEventEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { type MPDApi } from 'mpd-api';\nimport { type Logger } from 'yt-cast-receiver';\n\nexport type SubsystemName = 'database' |\n                            'update' |\n                            'stored_playlist' |\n                            'playlist' |\n                            'player' |\n                            'mixer' |\n                            'output' |\n                            'options' |\n                            'partition' |\n                            'sticker' |\n                            'subscription' |\n                            'message' |\n                            'neighbor' |\n                            'mount';\n\ninterface SubsystemEventListener {\n  (event: SubsystemEvent): Promise<void>;\n}\n\ninterface __SubsystemEventListener {\n  once: boolean;\n  callback: SubsystemEventListener;\n}\n\nexport class SubsystemEvent {\n  #name: string;\n  #propagate: boolean;\n\n  constructor(name: string, propagate = true) {\n    this.#name = name;\n    this.#propagate = propagate;\n  }\n\n  stopPropagation() {\n    this.#propagate = false;\n  }\n\n  get propagate(): boolean {\n    return this.#propagate;\n  }\n\n  get name(): string {\n    return this.#name;\n  }\n}\n\nexport default class MPDSubsystemEventEmitter {\n\n  #status: 'running' | 'stopped' | 'destroyed';\n  #mpdClient: MPDApi.ClientAPI | null;\n  #logger: Logger;\n  #systemEventListener: (subsystem: SubsystemName) => void;\n  #subsystemEventListeners: {[subsystem: string]: __SubsystemEventListener[]};\n\n  constructor(logger: Logger) {\n    this.#logger = logger;\n    this.#status = 'stopped';\n    this.#mpdClient = null;\n    this.#systemEventListener = this.#handleSystemEvent.bind(this);\n    this.#subsystemEventListeners = {};\n  }\n\n  static instance(mpdClient: MPDApi.ClientAPI, logger: Logger) {\n    const emitter = new MPDSubsystemEventEmitter(logger);\n    emitter.#mpdClient = mpdClient;\n    return emitter;\n  }\n\n  #assertOK(c: MPDApi.ClientAPI | null): c is MPDApi.ClientAPI {\n    if (this.#status === 'destroyed') {\n      throw Error('Instance destroyed');\n    }\n    if (!this.#mpdClient) {\n      throw Error('MPD client not set');\n    }\n    return true;\n  }\n\n  enable() {\n    if (this.#assertOK(this.#mpdClient) && this.#status === 'stopped') {\n      this.#mpdClient.on('system', this.#systemEventListener);\n      this.#status = 'running';\n      this.#logger.debug('[ytcr] MPDSubsystemEventEmitter enabled.');\n    }\n  }\n\n  disable() {\n    if (this.#assertOK(this.#mpdClient)) {\n      this.#status = 'stopped';\n      this.#mpdClient?.removeListener('system', this.#systemEventListener);\n      this.#logger.debug('[ytcr] MPDSubsystemEventEmitter disabled.');\n    }\n  }\n\n  #addSubsystemEventListener(event: SubsystemName, listener: SubsystemEventListener, once = false, prepend = false) {\n    if (!this.#subsystemEventListeners[event]) {\n      this.#subsystemEventListeners[event] = [];\n    }\n    const wrapped = {\n      once,\n      callback: listener\n    };\n    if (prepend) {\n      this.#subsystemEventListeners[event].unshift(wrapped);\n    }\n    else {\n      this.#subsystemEventListeners[event].push(wrapped);\n    }\n  }\n\n  on(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener);\n    return this;\n  }\n\n\n  once(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener, true);\n    return this;\n  }\n\n  off(event: SubsystemName, listener: SubsystemEventListener): this {\n    const listeners = this.#subsystemEventListeners[event];\n    if (!listeners) {\n      return this;\n    }\n\n    this.#subsystemEventListeners[event] = listeners.filter((l) => l.callback !== listener);\n    return this;\n  }\n\n  prependOnceListener(event: SubsystemName, listener: SubsystemEventListener): this {\n    this.#addSubsystemEventListener(event, listener, true, true);\n    return this;\n  }\n\n  destroy() {\n    if (this.#status === 'destroyed') {\n      return;\n    }\n    this.#status = 'destroyed';\n    this.#mpdClient?.removeListener('system', this.#systemEventListener);\n    this.#subsystemEventListeners = {};\n    this.#mpdClient = null;\n    this.#logger.debug('[ytcr] MPDSubsystemEventEmitter destroyed.');\n  }\n\n  #handleSystemEvent(subsystem: SubsystemName) {\n    void (async () => {\n      if (this.#status === 'running') {\n        const listeners = this.#subsystemEventListeners[subsystem];\n        if (!listeners) {\n          return;\n        }\n  \n        this.#logger.debug(`[ytcr] MPDSubsystemEventEmitter invoking ${listeners.length} SubsystemEventListener callbacks for: ${subsystem}`);\n  \n        for (let i = 0; i < listeners.length; i++) {\n          const l = listeners[i];\n          const event = new SubsystemEvent(subsystem);\n          try {\n            const callbackResult = l.callback(event);\n            if (callbackResult.then !== undefined) {\n              await callbackResult;\n            }\n          }\n          catch (error) {\n            this.#logger.debug('[ytcr] MPDSubsystemEventEmitter handleSystemEvent error:', error);\n          }\n          if (!event.propagate) {\n            this.#logger.debug('[ytcr] SubsystemEvent.propagate: false. Event propagation stopped.');\n            break;\n          }\n        }\n  \n        this.#subsystemEventListeners[subsystem] = listeners.filter((l) => !l.once);\n      }\n    })();\n  }\n}\n"]}