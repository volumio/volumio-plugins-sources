{"version":3,"file":"MPDPlayer.js","sourceRoot":"","sources":["../../src/lib/MPDPlayer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Constants, PLAYLIST_EVENT_TYPES, Player, PlayerState, Video, Volume } from 'yt-cast-receiver';\nimport mpdApi, { MPDApi } from 'mpd-api';\nimport { MPD } from 'mpd2';\nimport AbortController from 'abort-controller';\nimport MPDSubsystemEventEmitter, { SubsystemEvent, SubsystemName } from './MPDSubsystemEventEmitter.js';\nimport VolumeControl from './VolumeControl.js';\nimport VideoLoader, { VideoInfo } from './VideoLoader.js';\nimport ytcr from './YTCRContext.js';\nimport VideoPrefetcher from './VideoPrefetcher.js';\n\nexport interface MPDPlayerError {\n  message: string;\n}\n\nexport interface ActionEvent {\n  name: 'play' | 'pause' | 'resume' | 'stop' | 'seek' | 'setVolume';\n  data?: Record<string, any>;\n}\n\nexport interface MPDPlayerConfig {\n  mpd: MPD.Config;\n  volumeControl: VolumeControl;\n  videoLoader: VideoLoader;\n  prefetch: boolean;\n}\n\nexport interface MPDPlayerVideoInfo extends VideoInfo {\n  mpdSongId: string;\n}\n\ninterface MPDStatus {\n  repeat: boolean,\n  random: boolean,\n  single: boolean,\n  consume: boolean,\n  playlist: number,\n  playlistlength: number,\n  mixrampdb: number,\n  state: 'play' | 'pause' | 'stop',\n  song: number,\n  songid: number,\n  time: { elapsed: number, total: number },\n  elapsed: number,\n  bitrate: string,\n  duration: number,\n  audio: {\n    sample_rate: number,\n    bits: string,\n    channels: number,\n    sample_rate_short: { value: number, unit: string },\n    original_value: string\n  }\n}\n\nexport interface VolumioState {\n  service: string;\n  status: 'play' | 'pause' | 'stop';\n  title?: string;\n  artist?: string;\n  album?: string;\n  albumart: string;\n  uri: string;\n  trackType: string;\n  seek?: number;\n  duration: number;\n  samplerate?: string;\n  bitdepth?: string;\n  bitrate?: string;\n  channels?: number;\n  volume: number;\n  mute: boolean;\n  isStreaming?: boolean;\n}\n\nexport default class MPDPlayer extends Player {\n\n  #config: MPDPlayerConfig;\n  #currentVideoInfo: MPDPlayerVideoInfo | null;\n  #prefetchedAndQueuedVideoInfo: MPDPlayerVideoInfo | null;\n  #prefetchedVideoExpiryTimer: NodeJS.Timeout | null;\n  #mpdClient: MPDApi.ClientAPI | null;\n  #mpdClientInitTimer: NodeJS.Timeout | null;\n  #volumeControl: VolumeControl;\n  #videoLoader: VideoLoader;\n  #loadVideoAbortController: AbortController | null;\n  #videoPrefetcher: VideoPrefetcher | null;\n  #playlistEventListener: () => void;\n  #autoplayModeChangeListener: () => void;\n\n  #subsystemEventEmitter: MPDSubsystemEventEmitter | null;\n  #destroyed: boolean;\n  #asleep: boolean;\n\n  constructor(config: MPDPlayerConfig) {\n    super();\n    this.#config = config;\n    this.#mpdClientInitTimer = null;\n  }\n\n  // Must be called after receiver started, not before.\n  async init() {\n    this.#currentVideoInfo = null;\n    this.#destroyed = false;\n    this.#videoLoader = this.#config.videoLoader;\n    this.#videoPrefetcher = this.#config.prefetch ? new VideoPrefetcher(this.#videoLoader, this.logger) : null;\n    this.#volumeControl = this.#config.volumeControl;\n\n    this.#initMPDClient();\n\n    this.#playlistEventListener = this.#handlePlaylistEvent.bind(this);\n    Object.values(PLAYLIST_EVENT_TYPES).forEach((event: any) => {\n      this.queue.on(event, this.#playlistEventListener);\n    });\n\n    this.#autoplayModeChangeListener = this.#handleAutoplayModeChange.bind(this);\n    this.queue.on('autoplayModeChange', this.#autoplayModeChangeListener);\n  }\n\n  #clearMPDClientInitTimer() {\n    if (this.#mpdClientInitTimer) {\n      clearTimeout(this.#mpdClientInitTimer);\n      this.#mpdClientInitTimer = null;\n    }\n  }\n\n  async #initMPDClient() {\n    this.#clearMPDClientInitTimer();\n    if (this.#mpdClient) {\n      return;\n    }\n    try {\n      this.#mpdClient = await mpdApi.connect(this.#config.mpd);\n    }\n    catch (error) {\n      this.logger.error('[ytcr] Error connecting MPD:', error, ' Retrying in 5 seconds...');\n      this.#mpdClientInitTimer = setTimeout(() => {\n        if (!this.#destroyed) {\n          this.#initMPDClient();\n        }\n      }, 5000);\n      return;\n    }\n\n    this.logger.debug('[ytcr] MPD connected');\n\n    this.#mpdClient.once('close', async () => {\n      this.#mpdClient = null;\n      this.#subsystemEventEmitter?.destroy();\n      if (this.#destroyed) {\n        return;\n      }\n      await this.#clearPrefetch();\n      this.#currentVideoInfo = null;\n      await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.STOPPED);\n      this.sleep();\n      this.logger.debug('[ytcr] MPD disconnected. Reconnecting...');\n      this.#initMPDClient();\n    });\n\n    const externalMPDEventListener = this.#handleExternalMPDEvent.bind(this);\n    this.#subsystemEventEmitter = MPDSubsystemEventEmitter.instance(this.#mpdClient, this.logger);\n    this.#subsystemEventEmitter.on('player', externalMPDEventListener);\n    this.#subsystemEventEmitter.on('mixer', externalMPDEventListener);\n    this.#subsystemEventEmitter.enable();\n  }\n\n  #abortLoadVideo() {\n    if (this.#loadVideoAbortController) {\n      this.#loadVideoAbortController.abort();\n      this.#loadVideoAbortController = null;\n    }\n  }\n\n  protected async doPlay(video: Video, position: number): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient) {\n      return false;\n    }\n\n    await this.#clearPrefetch();\n\n    this.emit('action', { name: 'play', data: { videoId: video.id, position } });\n    this.logger.debug(`[ytcr] MPDPlayer: play ${video.id} at position ${position}s`);\n\n    this.#abortLoadVideo();\n    this.#loadVideoAbortController = new AbortController();\n    let videoInfo;\n    try {\n      videoInfo = await this.#videoLoader.getInfo(video, this.#loadVideoAbortController.signal) as MPDPlayerVideoInfo;\n    }\n    catch (error: any) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        this.logger.debug('[ytcr] AbortError:', error);\n        return false;\n      }\n      throw error;\n    }\n    finally {\n      this.#loadVideoAbortController = null;\n    }\n    this.logger.debug(`[ytcr] MPDPLayer obtained info for ${video.id}:`, videoInfo);\n\n    await this.#mpdClient.api.queue.clear();\n\n    if (videoInfo) {\n      const songId = await this.#addToMPDQueue(videoInfo);\n      if (songId) {\n        videoInfo.mpdSongId = songId;\n        await this.#mpdClient.api.playback.seekid(songId, position.toString());\n\n        this.wake();\n\n        const resolved = await this.resolveOnMPDStatusChanged(\n          this.#mpdClient.api.playback.playid.bind(this, songId), 'player',\n          { state: 'play', songid: videoInfo.mpdSongId }\n        );\n\n        if (resolved.result) { // Playback successful\n          this.#currentVideoInfo = videoInfo;\n          this.#checkAndStartPrefetch(resolved.mpdStatus);\n        }\n\n        return resolved.result;\n      }\n    }\n\n    this.logger.debug(`[ytcr] MPDPlayer failed to play ${video.id}: ${videoInfo.errMsg}`);\n    this.emit('error', {\n      message: ytcr.getI18n('YTCR_START_PLAYBACK_FAILED', videoInfo.title || videoInfo.id, videoInfo.errMsg)\n    } as MPDPlayerError);\n\n    // Check if video was in fact loaded (just that it's unplayable) - this affects whether we're going to play next.\n    if (videoInfo?.title) {\n      this.logger.debug('[ytcr] Video unplayable; proceeding to next in queue...');\n      return this.next();\n    }\n\n    return false;\n  }\n\n  async #addToMPDQueue(videoInfo: VideoInfo): Promise<string | null> {\n    if (this.#destroyed || !this.#mpdClient) {\n      return null;\n    }\n    if (videoInfo.streamUrl) {\n      const songId = (await this.#mpdClient.api.queue.addid(videoInfo.streamUrl)).toString();\n      if (videoInfo.title) {\n        await this.#mpdClient.api.queue.addtagid(songId, 'title', videoInfo.title);\n      }\n      const album = videoInfo.album || videoInfo.channel;\n      if (album) {\n        await this.#mpdClient.api.queue.addtagid(songId, 'album', album);\n      }\n      await this.#mpdClient.api.queue.addtagid(songId, 'artist', videoInfo.artist || 'YouTube Cast');\n      await this.#mpdClient.api.playback.consume('1');\n\n      return songId;\n    }\n\n    return null;\n  }\n\n  // Overrides\n  async next(AID?: number | null | undefined): Promise<boolean> {\n    // If prefetched video already added to MPD queue, tell MPD to play it instead of going through the original next() workflow.\n    // This will trigger an external MPD event which will be dealt with in #handleExternalMPDEvent().\n    const queueState = this.queue.getState();\n    const nextVideo = queueState.next || queueState.autoplay;\n    if (nextVideo && this.#prefetchedAndQueuedVideoInfo?.id === nextVideo.id && this.#mpdClient) {\n      this.logger.debug(`[ytcr] Playing prefetched video from MPD queue: ${nextVideo.id}`);\n      await this.#mpdClient.api.playback.playid(this.#prefetchedAndQueuedVideoInfo.mpdSongId);\n      return true;\n    }\n\n    // Original workflow\n    await this.#clearPrefetch();\n    return super.next(AID);\n  }\n\n  protected async doPause(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    await this.#cancelPrefetch();\n\n    this.emit('action', { name: 'pause' });\n\n    this.logger.debug('[ytcr] MPDPlayer: pause');\n\n    const resolve = await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.pause.bind(this), 'player',\n      { state: 'pause', songid: this.#currentVideoInfo.mpdSongId }\n    );\n\n    return resolve.result;\n  }\n\n  protected async doResume(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    this.emit('action', { name: 'resume' });\n\n    this.logger.debug('[ytcr] MPDPlayer: resume');\n\n    const resolve = await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.resume.bind(this), 'player',\n      { state: 'play', songid: this.#currentVideoInfo.mpdSongId }\n    );\n\n    if (resolve.result) {\n      this.#checkAndStartPrefetch(resolve.mpdStatus);\n    }\n\n    return resolve.result;\n  }\n\n  protected async doStop(): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient) {\n      return true;\n    }\n\n    await this.#clearPrefetch();\n\n    if (this.status === Constants.PLAYER_STATUSES.LOADING) {\n      this.#abortLoadVideo();\n      return true;\n    }\n\n    this.emit('action', { name: 'stop' });\n\n    this.logger.debug('[ytcr] MPDPlayer: stop');\n\n    const resolved = await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.stop.bind(this), 'player',\n      { state: 'stop' }\n    );\n\n    if (resolved.result) { // Stopped\n      this.#currentVideoInfo = null;\n    }\n\n    return resolved.result;\n  }\n\n  protected async doSeek(position: number): Promise<boolean> {\n    if (this.#destroyed || !this.#mpdClient || !this.#currentVideoInfo?.mpdSongId) {\n      return false;\n    }\n\n    await this.#cancelPrefetch();\n\n    // Seeking not supported for livestreams\n    if (this.#currentVideoInfo.isLive) {\n      this.logger.debug('[ytcr] MPDPlayer playing livestream; seek request ignored.');\n      return false;\n    }\n\n    this.emit('action', { name: 'seek', data: { position } });\n\n    this.logger.debug(`[ytcr] MPDPlayer: seek to ${position}s`);\n\n    const resolve = await this.resolveOnMPDStatusChanged(\n      this.#mpdClient.api.playback.seekcur.bind(this, position.toString()), 'player',\n      { songid: this.#currentVideoInfo.mpdSongId }\n    );\n\n    if (resolve.result) {\n      this.#checkAndStartPrefetch(resolve.mpdStatus);\n    }\n\n    return resolve.result;\n  }\n\n  protected async doSetVolume(volume: Volume): Promise<boolean> {\n    if (this.#asleep || this.#destroyed) {\n      return false;\n    }\n\n    this.emit('action', { name: 'setVolume', data: { volume } });\n\n    if (this.#asleep || this.#destroyed) {\n      return false;\n    }\n\n    this.logger.debug('[ytcr] MPDPlayer: set volume to:', volume);\n    this.#volumeControl.setVolume(volume);\n\n    return true;\n  }\n\n  protected doGetVolume(): Promise<Volume> {\n    return this.#volumeControl.getVolume();\n  }\n\n  protected async doGetPosition(): Promise<number> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return 0;\n    }\n\n    if (this.#currentVideoInfo?.isLive) {\n      return 600;\n    }\n\n    const mpdStatus = await this.#mpdClient.api.status.get<MPDStatus>();\n    return mpdStatus.elapsed || 0;\n  }\n\n  protected async doGetDuration(): Promise<number> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return 0;\n    }\n\n    if (this.#currentVideoInfo?.isLive) {\n      return 600;\n    }\n\n    const mpdStatus = await this.#mpdClient.api.status.get<MPDStatus>();\n    return mpdStatus.duration || 0;\n  }\n\n  async enablePrefetch(value: boolean) {\n    if (value === this.#config.prefetch) {\n      return;\n    }\n\n    if (value) {\n      this.#videoPrefetcher = new VideoPrefetcher(this.#videoLoader, this.logger);\n      if ((this.status === Constants.PLAYER_STATUSES.PAUSED || this.status === Constants.PLAYER_STATUSES.PLAYING) && this.#mpdClient) {\n        const mpdStatus = await this.#mpdClient.api.status.get<MPDStatus>();\n        this.#checkAndStartPrefetch(mpdStatus);\n      }\n    }\n    else {\n      await this.#clearPrefetch();\n      this.#videoPrefetcher = null;\n    }\n\n    this.#config.prefetch = value;\n  }\n\n  async #handlePlaylistEvent() {\n    const queueState = this.queue.getState();\n    if (!queueState.current?.id || this.#currentVideoInfo?.id !== queueState.current.id) {\n      // Skip handling if:\n      // 1. Current video is `null`, meaning doStop() will be called if player is playing. We will clear prefetching there; or\n      // 2. Current video has changed, meaning doPlay() will be called. We will handle prefetching there.\n      return;\n    }\n    // Same video so doPlay() / doStop() will not be called.\n    // But playlist could have been updated so that the next / autoplay video is different. Need to refresh prefetch as ncessary.\n    await this.#refreshPrefetch();\n  }\n\n  async #handleAutoplayModeChange() {\n    await this.#refreshPrefetch();\n  }\n\n  async #refreshPrefetch() {\n    const queueState = this.queue.getState();\n    if (this.#videoPrefetcher) {\n      const nextVideo = queueState.next || queueState.autoplay;\n      const prefetcherTarget = this.#prefetchedAndQueuedVideoInfo || this.#videoPrefetcher.getCurrentTarget();\n      if (!nextVideo || prefetcherTarget?.id !== nextVideo.id) {\n        await this.#clearPrefetch();\n        if (nextVideo && this.#mpdClient) {\n          this.logger.debug(`[ytcr] Refreshing prefetcher (previous target -> current: ${prefetcherTarget?.id} -> ${nextVideo.id})`);\n          const mpdStatus = await this.#mpdClient.api.status.get<MPDStatus>();\n          this.#checkAndStartPrefetch(mpdStatus);\n        }\n      }\n    }\n  }\n\n  #checkAndStartPrefetch(mpdStatus: MPDStatus) {\n    if (!this.#videoPrefetcher || !this.#currentVideoInfo || this.#currentVideoInfo.isLive) {\n      return;\n    }\n    if (this.#prefetchedAndQueuedVideoInfo || this.#videoPrefetcher.isPrefetching()) {\n      return;\n    }\n    const timeRemaining = mpdStatus.duration - mpdStatus.elapsed;\n    if (timeRemaining > 10) {\n      const queueState = this.queue.getState();\n      const nextVideo = queueState.next || queueState.autoplay;\n      if (nextVideo) {\n        this.#videoPrefetcher.removeAllListeners('prefetch');\n        this.#videoPrefetcher.once('prefetch', this.#handlePrefetchedVideo.bind(this));\n        this.#videoPrefetcher.startPrefetchOnTimeout(nextVideo, timeRemaining - 10);\n      }\n    }\n  }\n\n  async #cancelPrefetch(abortIfPrefetching = false, clearIfPrefetched = false) {\n    if (!this.#videoPrefetcher) { // Prefetch disabled\n      return;\n    }\n\n    this.logger.debug(`[ytcr] Cancelling prefetch (abortIfPrefetching: ${abortIfPrefetching}, clearIfPrefetched: ${clearIfPrefetched})`);\n\n    if (!this.#videoPrefetcher.isPrefetching() || abortIfPrefetching) {\n      this.#videoPrefetcher.abortPrefetch();\n      this.#videoPrefetcher.removeAllListeners('prefetch');\n    }\n\n    if (this.#prefetchedAndQueuedVideoInfo?.mpdSongId && this.#mpdClient && clearIfPrefetched) {\n      try {\n        await this.#mpdClient.api.queue.deleteid(this.#prefetchedAndQueuedVideoInfo.mpdSongId);\n      }\n      catch (error: any) {\n        this.logger.error(`[ytcr] Failed to remove prefetched song from MPD queue (song Id ${this.#prefetchedAndQueuedVideoInfo.mpdSongId}):`, error);\n      }\n      finally {\n        this.#clearPrefetchedVideoExpiryTimer();\n      }\n    }\n\n    if (clearIfPrefetched) {\n      this.#prefetchedAndQueuedVideoInfo = null;\n    }\n  }\n\n  #clearPrefetch() {\n    return this.#cancelPrefetch(true, true);\n  }\n\n  #clearPrefetchedVideoExpiryTimer() {\n    if (this.#prefetchedVideoExpiryTimer) {\n      clearTimeout(this.#prefetchedVideoExpiryTimer);\n      this.#prefetchedVideoExpiryTimer = null;\n    }\n  }\n\n  async #handlePrefetchedVideo(videoInfo: VideoInfo) {\n    if (this.#destroyed || !this.#mpdClient) {\n      return;\n    }\n    const queueState = this.queue.getState();\n    const nextVideo = queueState.next || queueState.autoplay;\n    if (nextVideo?.id === videoInfo.id) {\n      if (videoInfo) {\n        const songId = await this.#addToMPDQueue(videoInfo);\n        if (songId) {\n          this.#prefetchedAndQueuedVideoInfo = {\n            ...videoInfo,\n            mpdSongId: songId\n          };\n          this.logger.debug(`[ytcr] Prefetched video ${videoInfo.id} added to MPD queue with song Id: ${songId}`);\n\n          if (videoInfo.streamExpires) {\n            const expiryMS = videoInfo.streamExpires.getTime() - Date.now();\n            if (expiryMS > 0) {\n              this.logger.debug(`[ytcr] Stream URL of prefetched video ${videoInfo.id} is going to expire in ${expiryMS / 1000}s`);\n              this.#prefetchedVideoExpiryTimer = setTimeout(async () => {\n                this.logger.debug(`[ytcr] Stream URL of prefetched video ${videoInfo.id} is about to expire.`);\n                if (this.#mpdClient) {\n                  this.logger.debug(`[ytcr] Removing it from MPD queue (song Id: ${songId})...`);\n                  try {\n                    await this.#mpdClient.api.queue.deleteid(songId);\n                  }\n                  catch (error: any) {\n                    this.logger.error(`[ytcr] Failed to remove expired prefetched song from MPD queue (song Id ${songId}):`, error);\n                  }\n                  finally {\n                    this.#prefetchedVideoExpiryTimer = null;\n                  }\n                }\n              }, expiryMS - 60000);\n            }\n          }\n        }\n        else {\n          this.logger.debug(`[ytcr] Failed to add prefetched video ${videoInfo.id} to MPD queue: MPD did not return a song Id.`);\n        }\n      }\n    }\n    else {\n      this.logger.debug(`[ytcr] Prefetched video Id ${videoInfo.id} does not match next in queue (${nextVideo?.id})`);\n    }\n  }\n\n  async destroy() {\n    this.#destroyed = true;\n    this.#clearMPDClientInitTimer();\n    this.#subsystemEventEmitter?.destroy();\n    await this.stop();\n    await this.#mpdClient?.disconnect();\n    this.removeAllListeners();\n\n    Object.values(PLAYLIST_EVENT_TYPES).forEach((event: any) => {\n      this.queue.off(event, this.#playlistEventListener);\n    });\n\n    this.queue.off('autoplayModeChange', this.#autoplayModeChangeListener);\n\n    this.#subsystemEventEmitter = null;\n    this.#mpdClient = null;\n    this.#currentVideoInfo = null;\n    this.#asleep = true;\n  }\n\n  sleep() {\n    if (!this.#asleep) {\n      this.logger.debug('[ytcr] MPDPlayer going to sleep...');\n      this.#asleep = true;\n    }\n  }\n\n  wake() {\n    if (this.#asleep) {\n      this.logger.debug('[ytcr] MPDPlayer waking up...');\n      this.#asleep = false;\n    }\n  }\n\n  async #handleExternalMPDEvent(event: SubsystemEvent) {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return;\n    }\n\n    this.logger.debug(`[ytcr] MPDPlayer received external MPD event for subsystem: ${event.name}.`);\n\n    const mpdStatus = await this.#mpdClient.api.status.get<MPDStatus>();\n    this.logger.debug('[ytcr] MPD status for subsystem event:', mpdStatus);\n\n    // Prefetched video added to MPD queue and is now being played automatically by MPD when previous one has ended\n    if (mpdStatus.state === 'play' && this.#prefetchedAndQueuedVideoInfo && mpdStatus.songid.toString() === this.#prefetchedAndQueuedVideoInfo.mpdSongId) {\n      this.logger.debug('[ytcr] Playback of prefetched video started');\n      this.#currentVideoInfo = this.#prefetchedAndQueuedVideoInfo;\n      this.#clearPrefetchedVideoExpiryTimer();\n      this.#prefetchedAndQueuedVideoInfo = null;\n      await this.queue.next();\n      await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.PLAYING);\n      this.#checkAndStartPrefetch(mpdStatus);\n      return;\n    }\n\n    if (!this.#currentVideoInfo || (this.#currentVideoInfo.mpdSongId !== mpdStatus.songid?.toString() && mpdStatus.state !== 'stop')) {\n      this.logger.debug('[ytcr] MPD subsystem event does not match current song. Putting player to sleep...');\n      await this.#clearPrefetch();\n      this.#currentVideoInfo = null;\n      await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.STOPPED);\n      this.sleep();\n      return;\n    }\n\n    if (event.name === 'mixer') {\n      this.logger.debug('[ytcr] MPD subsystem event indicated volume change. Notifying senders of change...');\n      await this.notifyExternalStateChange();\n      //This.emit('volumeChanged', mpdStatus.volume)\n      return;\n    }\n\n    if (event.name === 'player') {\n      switch (mpdStatus.state) {\n        case 'pause':\n          await this.#cancelPrefetch();\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.PAUSED);\n          break;\n        case 'stop':\n          await this.#clearPrefetch();\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.STOPPED);\n          break;\n        default:\n          this.#checkAndStartPrefetch(mpdStatus);\n          await this.notifyExternalStateChange(Constants.PLAYER_STATUSES.PLAYING);\n      }\n\n      //Let playerState = await this.getState(mpdStatus);\n      if (mpdStatus.state === 'stop') {\n        // In play(), we set consume on for mpd. If song is no longer in the queue,\n        // That means it has finished playing\n        let songIdInfo;\n        try {\n          if (this.#currentVideoInfo.mpdSongId) {\n            songIdInfo = await this.#mpdClient.api.queue.id(this.#currentVideoInfo.mpdSongId);\n          }\n        }\n        catch (error) {\n          songIdInfo = null;\n        }\n        this.#currentVideoInfo = null;\n        //Let playbackFinished = false;\n        if (!songIdInfo) {\n          this.logger.debug('[ytcr] Current playback finished.');\n          await this.next();\n        }\n      }\n    }\n  }\n\n  resolveOnMPDStatusChanged(action: () => Promise<void>, subsystem: SubsystemName, resolveOn: Record<string, string> = {}): Promise<{result: boolean, mpdStatus: MPDStatus}> {\n    return new Promise((resolve) => {\n      this.#subsystemEventEmitter?.prependOnceListener(subsystem,\n        async (event) => {\n          const mpdStatus: any = await this.#mpdClient?.api.status.get();\n          let shouldResolve = true;\n          for (const [ key, value ] of Object.entries(resolveOn)) {\n            if (mpdStatus[key] === undefined || mpdStatus[key].toString() !== value.toString()) {\n              shouldResolve = false;\n              break;\n            }\n          }\n          event.stopPropagation();\n          if (shouldResolve) {\n            this.logger.debug('[ytcr] Condition for resolveOnMPDStatusChanged() satisfied. Resolving Promise...');\n            resolve({ result: true, mpdStatus });\n          }\n          else {\n            this.logger.debug('[ytcr] MPD status:', mpdStatus, 'does not match condition:', resolveOn);\n            this.logger.debug('[ytcr] Condition for resolveOnMPDStatusChanged() failed. Rejecting Promise...');\n            resolve({ result: false, mpdStatus });\n          }\n        }\n      );\n\n      action();\n    });\n  }\n\n  async getVolumioState(): Promise<VolumioState | null> {\n    if (this.#asleep || this.#destroyed || !this.#mpdClient) {\n      return null;\n    }\n\n    const mpdStatus: any = await this.#mpdClient.api.status.get<MPDStatus>();\n    const volume: Volume = await this.#volumeControl.getVolume();\n\n    if (!mpdStatus) {\n      return null;\n    }\n\n    const state: VolumioState = {\n      status: mpdStatus.state,\n      service: 'ytcr',\n      albumart: this.#currentVideoInfo?.thumbnail || '/albumart',\n      uri: '',\n      trackType: 'YouTube',\n      seek: Math.round((mpdStatus.elapsed || 0) * 1000),\n      duration: Math.round(mpdStatus.time?.total || 0),\n      volume: volume.level,\n      mute: volume.muted\n    };\n\n    const audio = mpdStatus?.audio;\n    if (audio && !this.#currentVideoInfo?.bitrate) {\n      if (audio.bits && audio.bits !== 'f') {\n        state.bitdepth = `${audio.bits.toString()} bit`;\n      }\n      if (audio.sample_rate_short) {\n        state.samplerate = `${audio.sample_rate_short.value} ${audio.sample_rate_short.unit}`;\n      }\n    }\n\n    if (this.#currentVideoInfo) {\n      state.title = this.#currentVideoInfo.title;\n      state.artist = this.#currentVideoInfo.channel || this.#currentVideoInfo.artist;\n      if (this.#currentVideoInfo.album) {\n        state.album = this.#currentVideoInfo.album;\n      }\n      if (this.#currentVideoInfo.bitrate) {\n        state.bitrate = this.#currentVideoInfo.bitrate;\n      }\n      if (this.#currentVideoInfo.channels) {\n        state.channels = this.#currentVideoInfo.channels;\n      }\n      state.isStreaming = this.#currentVideoInfo.isLive;\n      if (this.#currentVideoInfo.isLive) {\n        state.duration = 0;\n        state.seek = undefined;\n      }\n\n      const youtubeCastText = `YouTube Cast${this.#currentVideoInfo.isLive ? ' (Live)' : ''}`;\n      if (state.bitdepth) {\n        state.bitdepth = `${state.bitdepth} - ${youtubeCastText}`;\n      }\n      else if (state.samplerate) {\n        state.samplerate = `${state.samplerate} - ${youtubeCastText}`;\n      }\n      else if (state.bitrate) {\n        state.samplerate = `${state.bitrate} - ${youtubeCastText}`;\n      }\n      else {\n        state.samplerate = youtubeCastText;\n      }\n      delete state.bitrate;\n    }\n\n    return state;\n  }\n\n  get videoLoader(): VideoLoader {\n    return this.#videoLoader;\n  }\n\n  get currentVideo() {\n    return this.#currentVideoInfo;\n  }\n\n  on(event: string | symbol, listener: (...args: any[]) => void): this;\n  on(event: 'action', listener: (args: ActionEvent) => void): this;\n  on(event: 'error', listener: (args: MPDPlayerError) => void): this;\n  on(event: 'state', listener: (data: { AID: string; current: PlayerState; previous: PlayerState | null; }) => void): this;\n  on(event: any, listener: any): this {\n    super.on(event, listener);\n    return this;\n  }\n}\n"]}