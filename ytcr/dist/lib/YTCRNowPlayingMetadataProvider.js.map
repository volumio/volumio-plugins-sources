{"version":3,"file":"YTCRNowPlayingMetadataProvider.js","sourceRoot":"","sources":["../../src/lib/YTCRNowPlayingMetadataProvider.ts"],"names":[],"mappings":"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","sourcesContent":["import { MetadataAlbumInfo, MetadataArtistInfo, MetadataSongInfo, NowPlayingMetadataProvider, NowPlayingPluginSupport } from 'now-playing-common';\nimport ytcr, { PluginInfo } from './YTCRContext';\nimport MPDPlayer, { MPDPlayerVideoInfo } from './MPDPlayer';\nimport { Logger } from 'yt-cast-receiver';\nimport semver from 'semver';\n\n// From YouTube Music plugin; includes only the necessary fields\ninterface YTMusicExplodedTrackInfo {\n  type: 'song';\n  title: string;\n  artist: string;\n  album: string;\n  albumart: string;\n  endpoint: {\n    type: 'watch';\n    payload: {\n      videoId: string;\n    };\n  };\n}\n\n// From YouTube2 plugin; includes only the necessary fields\ninterface YouTube2ExplodedTrackInfo {\n  title: string;\n  artist: string;\n  albumart: string;\n  endpoint: {\n    type: 'watch';\n    payload: {\n      videoId: string;\n    };\n  };\n}\n\nconst REQUIRED_YTMUSIC_PLUGIN_VERSION = '>=1.1.0';\nconst REQUIRED_YOUTUBE2_PLUGIN_VERSION = '>=1.2.0';\n\nexport default class YTCRNowPlayingMetadataProvider implements NowPlayingMetadataProvider {\n\n  version: '1.0.0';\n\n  #player: MPDPlayer;\n  #logger: Logger;\n\n  constructor(player: MPDPlayer, logger: Logger) {\n    this.version = '1.0.0';\n    this.#player = player;\n    this.#logger = logger;\n  }\n\n  async getSongInfo(songTitle: string, albumTitle?: string, artistName?: string): Promise<MetadataSongInfo | null> {\n    const current = this.#player.currentVideo;\n    switch (current?.src) {\n      case 'yt':\n        return this.#getSongInfoWithYouTube2Plugin(current, songTitle, albumTitle, artistName);\n      case 'ytmusic':\n        return this.#getSongInfoWithYTMusicPlugin(current, songTitle, albumTitle, artistName);\n      default:\n        return null;\n    }\n  }\n\n  async getAlbumInfo(): Promise<MetadataAlbumInfo | null> {\n    return null;\n  }\n\n  async getArtistInfo(): Promise<MetadataArtistInfo | null> {\n    return null;\n  }\n\n  async #getMusicServicePlugin(pluginName: string, pluginPrettyName: string, requiredVersion: string) {\n    this.#logger.debug(`[ytcr] Obtaining ${pluginPrettyName} plugin instance`);\n    const plugin = ytcr.getMusicServicePlugin(pluginName);\n    if (!this.#hasNowPlayingMetadataProvider(plugin)) {\n      return null;\n    }\n    let pluginInfo: PluginInfo | null = null;\n    try {\n      pluginInfo = await ytcr.getPluginInfo(pluginName, 'music_service');\n    }\n    catch (error) {\n      this.#logger.warn(`[ytcr] Error getting ${pluginPrettyName} plugin info`, error);\n    }\n    if (pluginInfo?.version) {\n      if (!semver.satisfies(pluginInfo.version, requiredVersion)) {\n        this.#logger.warn(`[ytcr] ${pluginPrettyName} plugin version '${pluginInfo.version}' does not satisfy '${requiredVersion}'`);\n      }\n      else {\n        this.#logger.debug(`[ytcr] ${pluginPrettyName} plugin version is ${pluginInfo.version}`);\n      }\n    }\n    else {\n      this.#logger.warn(`[ytcr] ${pluginPrettyName} plugin version unavailable`);\n    }\n    return plugin;\n  }\n\n  async #getSongInfoWithYTMusicPlugin(target: MPDPlayerVideoInfo, songTitle: string, albumTitle?: string, artistName?: string) {\n    const plugin = await this.#getMusicServicePlugin('ytmusic', 'YouTube Music', REQUIRED_YTMUSIC_PLUGIN_VERSION);\n    if (!plugin) {\n      return null;\n    }\n    this.#logger.info('[ytcr] Delegating getSongInfo() to YouTube Music plugin');\n    const uri = this.#getYTMusicTrackURI(target, { songTitle, albumTitle, artistName });\n    const provider = plugin.getNowPlayingMetadataProvider();\n    if (provider) {\n      return provider.getSongInfo(songTitle, albumTitle, artistName, uri);\n    }\n    return null;\n  }\n\n  #getYTMusicTrackURI(info: MPDPlayerVideoInfo, params: { songTitle: string; artistName?: string; albumTitle?: string; }) {\n    // Ytmusic URI: ytmusic/[song/video]@explodeTrackData={...}\n    const { songTitle, artistName, albumTitle } = params;\n    const explodedTrackInfo: YTMusicExplodedTrackInfo = {\n      type: 'song',\n      title: info.title || songTitle || '',\n      artist: info.artist || artistName || '',\n      album: info.album || albumTitle || '',\n      albumart: info.thumbnail || '',\n      endpoint: {\n        type: 'watch',\n        payload: {\n          videoId: info.id\n        }\n      }\n    };\n    return `ytmusic/song@explodeTrackData:o=${encodeURIComponent(JSON.stringify(explodedTrackInfo))}`;\n  }\n\n  async #getSongInfoWithYouTube2Plugin(target: MPDPlayerVideoInfo, songTitle: string, albumTitle?: string, artistName?: string) {\n    const plugin = await this.#getMusicServicePlugin('youtube2', 'YouTube2', REQUIRED_YOUTUBE2_PLUGIN_VERSION);\n    if (!plugin) {\n      return null;\n    }\n    this.#logger.info('[ytcr] Delegating getSongInfo() to YouTube2 plugin');\n    const uri = this.#getYouTube2TrackURI(target, { songTitle, albumTitle, artistName });\n    const provider = plugin.getNowPlayingMetadataProvider();\n    if (provider) {\n      return provider.getSongInfo(songTitle, albumTitle, artistName, uri);\n    }\n    return null;\n  }\n\n  #getYouTube2TrackURI(info: MPDPlayerVideoInfo, params: { songTitle: string; artistName?: string; albumTitle?: string; }) {\n    // YouTube2 URI: youtube2/video@endpoint={...}@explodeTrackData={...}\n    const { songTitle, artistName } = params;\n    const endpoint: YouTube2ExplodedTrackInfo['endpoint'] = {\n      type: 'watch',\n      payload: {\n        videoId: info.id\n      }\n    };\n    const explodedTrackInfo: YouTube2ExplodedTrackInfo = {\n      title: info.title || songTitle || '',\n      artist: info.artist || artistName || '',\n      albumart: info.thumbnail || '',\n      endpoint\n    };\n    return `youtube2/video@endpoint:o=${encodeURIComponent(JSON.stringify(endpoint))}@explodeTrackData:o=${encodeURIComponent(JSON.stringify(explodedTrackInfo))}`;\n  }\n\n  #hasNowPlayingMetadataProvider(plugin: any): plugin is { getNowPlayingMetadataProvider: NowPlayingPluginSupport['getNowPlayingMetadataProvider'] } {\n    return plugin && typeof plugin['getNowPlayingMetadataProvider'] === 'function';\n  }\n}\n"]}