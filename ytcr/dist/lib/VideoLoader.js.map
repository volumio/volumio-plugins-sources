{"version":3,"file":"VideoLoader.js","sourceRoot":"","sources":["../../src/lib/VideoLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nimport { AbortSignal } from 'abort-controller';\nimport type Innertube from 'volumio-youtubei.js';\nimport * as InnertubeLib from 'volumio-youtubei.js';\nimport { type VideoInfo as InnertubeVideoInfo } from 'volumio-youtubei.js/dist/src/parser/youtube/index.js';\nimport type Format from 'volumio-youtubei.js/dist/src/parser/classes/misc/Format.js';\nimport { DataError, type Logger, type Video } from 'yt-cast-receiver';\nimport ytcr from './YTCRContext.js';\nimport InnertubeLoader from './InnertubeLoader.js';\n\n// https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2\nconst ITAG_TO_BITRATE = {\n  '139': '48',\n  '140': '128',\n  '141': '256',\n  '171': '128',\n  '249': 'VBR 50',\n  '250': 'VBR 70',\n  '251': 'VBR 160',\n  '774': 'VBR 256'\n} as Record<string, string>;\n\nconst BEST_AUDIO_FORMAT = {\n  type: 'audio',\n  format: 'any',\n  quality: 'best'\n} as InnertubeLib.Types.FormatOptions;\n\ninterface BasicInfo {\n  id: string;\n  src?: 'yt' | 'ytmusic';\n  title?: string;\n  channel?: string;\n  artist?: string;\n  album?: string;\n  isLive?: boolean;\n}\n\nexport interface VideoInfo extends BasicInfo {\n  errMsg?: string;\n  thumbnail?: string;\n  isLive?: boolean;\n  streamUrl?: string | null;\n  duration?: number;\n  bitrate?: string;\n  samplerate?: number;\n  channels?: number;\n  streamExpires?: Date;\n}\n\ninterface StreamInfo {\n  url: string | null;\n  mimeType?: string;\n  bitrate?: string | null;\n  sampleRate?: number;\n  channels?: number;\n}\n\nexport default class VideoLoader {\n\n  #logger: Logger;\n  #defaultInnertubeLoader: InnertubeLoader;\n  #tvInnertubeLoader: InnertubeLoader;\n\n  constructor(logger: Logger) {\n    this.#logger = logger;\n    this.#defaultInnertubeLoader = new InnertubeLoader(this.#logger);\n    this.#tvInnertubeLoader = new InnertubeLoader(this.#logger, this.#setTVClientContext.bind(this));\n  }\n\n  async #getInnertubeInstances() {\n    return {\n      defaultInnertube: (await this.#defaultInnertubeLoader.getInstance()).innertube,\n      tvInnertube: (await this.#tvInnertubeLoader.getInstance()).innertube\n    };\n  }\n\n  #setTVClientContext(innertube: Innertube) {\n    innertube.session.context.client = {\n      ...innertube.session.context.client,\n      clientName: 'TVHTML5',\n      clientVersion: '7.20230405.08.01',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36; SMART-TV; Tizen 4.0,gzip(gfe)'\n    };\n  }\n\n  refreshI18nConfig() {\n    this.#defaultInnertubeLoader.applyI18nConfig();\n    this.#tvInnertubeLoader.applyI18nConfig();\n  }\n\n  async getInfo(video: Video, abortSignal: AbortSignal): Promise<VideoInfo> {\n    const { defaultInnertube, tvInnertube } = await this.#getInnertubeInstances();\n    \n    const checkAbortSignal = () => {\n      if (abortSignal.aborted) {\n        const msg = `VideoLoader.getInfo() aborted for video Id: ${video.id}`;\n        this.#logger.debug(`[ytcr] ${msg}.`);\n        const abortError = Error(msg);\n        abortError.name = 'AbortError';\n        throw abortError;\n      }\n    };\n\n    this.#logger.debug(`[ytcr] VideoLoader.getInfo: ${video.id}`);\n\n    checkAbortSignal();\n\n    // Configure Innertube instances\n    const __prepInnertubeAndPayload = (innertube: Innertube) => {\n      const cpn = InnertubeLib.Utils.generateRandomString(16);\n\n      // Prepare request payload\n      const payload = {\n        videoId: video.id,\n        enableMdxAutoplay: true,\n        isMdxPlayback: true,\n        playbackContext: {\n          contentPlaybackContext: {\n            signatureTimestamp: tvInnertube.session.player?.sts || 0\n          }\n        }\n      } as any;\n      if (video.context?.playlistId) {\n        payload.playlistId = video.context.playlistId;\n      }\n      if (video.context?.params) {\n        payload.params = video.context.params;\n      }\n      if (video.context?.index !== undefined) {\n        payload.index = video.context.index;\n      }\n\n      // Modify innertube's session context to include `ctt` param\n      if (video.context?.ctt) {\n        innertube.session.context.user = {\n          enableSafetyMode: false,\n          lockedSafetyMode: false,\n          credentialTransferTokens: [\n            {\n              'scope': 'VIDEO',\n              'token': video.context?.ctt\n            }\n          ]\n        } as any;\n      }\n      else {\n        delete (innertube.session.context.user as any)?.credentialTransferTokens;\n      }\n\n      return [payload, cpn];\n    }\n\n    const [defaultPayload, cpn] = __prepInnertubeAndPayload(defaultInnertube);\n    const [tvPayload] = __prepInnertubeAndPayload(tvInnertube);\n\n    try {\n      // There are two endpoints we need to fetch data from:\n      // 1. '/next': for metadata (title, channel for video, artist / album for music...)\n      // 2. '/player': for streaming data\n\n      const nextResponse = await tvInnertube.actions.execute('/next', tvPayload) as any;\n      checkAbortSignal();\n\n      let basicInfo: BasicInfo | null = null;\n\n      // We cannot use innertube to parse `nextResponse`, because it doesn't\n      // Have `SingleColumnWatchNextResults` parser class. We would have to do it ourselves.\n\n      const singleColumnContents = nextResponse.data?.contents?.singleColumnWatchNextResults?.\n        results?.results?.contents?.[0]?.itemSectionRenderer?.contents?.[0];\n\n      const videoMetadata = singleColumnContents?.videoMetadataRenderer;\n      const songMetadata = singleColumnContents?.musicWatchMetadataRenderer;\n\n      if (videoMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'yt',\n          title: new InnertubeLib.Misc.Text(videoMetadata.title).toString(),\n          channel: new InnertubeLib.Misc.Text(videoMetadata.owner?.videoOwnerRenderer?.title).toString(),\n          isLive: videoMetadata.viewCount.videoViewCountRenderer.isLive\n        };\n      }\n      else if (songMetadata) {\n        basicInfo = {\n          id: video.id,\n          src: 'ytmusic',\n          title: new InnertubeLib.Misc.Text(songMetadata.title).toString(),\n          artist: new InnertubeLib.Misc.Text(songMetadata.byline).toString(),\n          album: songMetadata.albumName ? new InnertubeLib.Misc.Text(songMetadata.albumName).toString() : ''\n        };\n      }\n\n      if (!basicInfo) {\n        throw new DataError('Metadata not found in response');\n      }\n\n      // Fetch response from '/player' endpoint. But first, specify client in payload.\n      // Innertube will modify 'context.client' before submitting request.\n      if (basicInfo.src === 'ytmusic') {\n        // YouTube Music\n        defaultPayload.client = 'YTMUSIC';\n      }\n      else if (!basicInfo.isLive) {\n        // For non-live streams, we must use 'TV' client, otherwise streams will return 403 error.\n        // For livestreams, we can use default 'WEB' client. If we use 'TV' client, we will only get\n        // DASH manifest URL - what we need is the HLS manifest URL.\n        defaultPayload.client = 'TV';\n      }\n      const playerResponse = await defaultInnertube.actions.execute('/player', defaultPayload) as any;\n      checkAbortSignal();\n\n      // Wrap it in innertube VideoInfo.\n      const innertubeVideoInfo = new InnertubeLib.YT.VideoInfo([ playerResponse ], defaultInnertube.actions, cpn);\n\n      const thumbnail = this.#getThumbnail(innertubeVideoInfo.basic_info.thumbnail);\n      const isLive = !!innertubeVideoInfo.basic_info.is_live;\n\n      // Retrieve stream info\n      let playable = false;\n      let errMsg = null;\n      let streamInfo = null;\n      if (innertubeVideoInfo.playability_status?.status === 'UNPLAYABLE') {\n        if (innertubeVideoInfo.has_trailer) {\n          const trailerInfo = innertubeVideoInfo.getTrailerInfo();\n          if (trailerInfo) {\n            streamInfo = await this.#chooseFormat(trailerInfo);\n          }\n        }\n        else {\n          errMsg = innertubeVideoInfo.playability_status.reason;\n        }\n      }\n      else if (!isLive) {\n        streamInfo = await this.#chooseFormat(innertubeVideoInfo);\n      }\n      else if (innertubeVideoInfo.streaming_data?.hls_manifest_url) {\n        const targetQuality = ytcr.getConfigValue('liveStreamQuality');\n        streamInfo = {\n          url: await this.#getStreamUrlFromHLS(innertubeVideoInfo.streaming_data.hls_manifest_url, targetQuality)\n        };\n      }\n\n      playable = !!streamInfo?.url;\n\n      if (!playable && !errMsg) {\n        errMsg = ytcr.getI18n('YTCR_STREAM_NOT_FOUND');\n      }\n\n      checkAbortSignal();\n\n      return {\n        ...basicInfo,\n        errMsg: errMsg || undefined,\n        thumbnail,\n        isLive,\n        streamUrl: streamInfo?.url,\n        duration: innertubeVideoInfo.basic_info.duration || 0,\n        bitrate: streamInfo?.bitrate || undefined,\n        samplerate: streamInfo?.sampleRate,\n        channels: streamInfo?.channels,\n        streamExpires: innertubeVideoInfo.streaming_data?.expires\n      };\n\n    }\n    catch (error: any) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw error;\n      }\n      this.#logger.error(`[ytcr] Error in VideoLoader.getInfo(${video.id}):`, error);\n      return {\n        id: video.id,\n        errMsg: error instanceof Error ? error.message : '(Check logs for errors)'\n      };\n    }\n  }\n\n  #getThumbnail(data: any): string {\n    const url = data?.[0]?.url;\n    if (url?.startsWith('//')) {\n      return `https:${url}`;\n    }\n    return url;\n  }\n\n  async #chooseFormat(videoInfo: InnertubeVideoInfo) {\n    const { defaultInnertube: innertube } = await this.#getInnertubeInstances();\n\n    const preferredFormat = {\n      ...BEST_AUDIO_FORMAT\n    };\n    const prefetch = ytcr.getConfigValue('prefetch');\n    const preferOpus = prefetch && ytcr.getConfigValue('preferOpus');\n    if (preferOpus) {\n      this.#logger.debug('[ytcr] Preferred format is Opus');\n      preferredFormat.format = 'opus';\n    }\n    let format;\n    try {\n      format = videoInfo?.chooseFormat(preferredFormat);\n    }\n    catch (error) {\n      if (preferOpus && videoInfo) {\n        this.#logger.debug('[ytcr] No matching format for Opus. Falling back to any audio format ...');\n        try {\n          format = videoInfo.chooseFormat(BEST_AUDIO_FORMAT);\n        }\n        catch (error) {\n          this.#logger.debug('[ytcr] Failed to obtain audio format:', error);\n          format = null;\n        }\n      }\n      else {\n        throw error;\n      }\n    }\n\n    const streamUrl = format ? format.decipher(innertube.session.player) : null;\n    const streamData = format ? { ...format, url: streamUrl } as Format : null;\n    if (streamData) {\n      return this.#parseStreamData(streamData);\n    }\n    return null;\n  }\n\n  #parseStreamData(data: Format): StreamInfo {\n    const audioBitrate = ITAG_TO_BITRATE[`${data.itag}`];\n\n    return {\n      url: data.url || null,\n      mimeType: data.mime_type,\n      bitrate: audioBitrate ? `${audioBitrate} kbps` : null,\n      sampleRate: data.audio_sample_rate,\n      channels: data.audio_channels\n    };\n  }\n\n  async #getStreamUrlFromHLS(manifestUrl: string, targetQuality?: string): Promise<string | null> {\n    if (!targetQuality || targetQuality === 'auto') {\n      return manifestUrl;\n    }\n\n    const res = await fetch(manifestUrl);\n    const manifestContents = await res.text();\n\n    // Match Resolution and Url\n    const regex = /#EXT-X-STREAM-INF.*RESOLUTION=(\\d+x\\d+).*[\\r\\n](.+)/gm;\n\n    const playlistVariants = [];\n\n    // Modified from regex101's code generator :)\n    let m;\n    while ((m = regex.exec(manifestContents)) !== null) {\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      const variant: any = {};\n      playlistVariants.push(variant);\n\n      m.forEach((match, groupIndex) => {\n        if (groupIndex === 1) { // Resolution\n          variant.quality = `${match.split('x')[1]}p`;\n        }\n        if (groupIndex === 2) {\n          variant.url = match;\n        }\n      });\n    }\n\n    // Find matching variant or closest one that is lower than targetQuality\n    const targetQualityInt = parseInt(targetQuality);\n    const diffs = playlistVariants.map((variant) => ({\n      variant,\n      qualityDelta: targetQualityInt - parseInt(variant.quality)\n    }));\n    const closest = diffs.filter((v) => v.qualityDelta >= 0).sort((v1, v2) => v1.qualityDelta - v2.qualityDelta)[0];\n\n    return closest?.variant.url || playlistVariants[0]?.url || null;\n  }\n}\n"]}