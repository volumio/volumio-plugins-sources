{"version":3,"file":"System.js","sourceRoot":"","sources":["../../src/lib/System.ts"],"names":[],"mappings":"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","sourcesContent":["import js from './JellyfinServerContext';\nimport xml2js from 'xml2js';\nimport { parseBooleans } from 'xml2js/lib/processors';\nimport { exec } from 'child_process';\nimport * as fs from 'fs';\n\nconst CONFIG_FILE = '/opt/jellyfin/config/network.xml';\n\nfunction execCommand(cmd: string, sudo = false) {\n  return new Promise<string>((resolve, reject) => {\n    js.getLogger().info(`[jellyfin_server] Executing ${cmd}`);\n    exec(sudo ? `echo volumio | sudo -S ${cmd}` : cmd, { uid: 1000, gid: 1000 }, function (error, stdout, stderr) {\n      if (error) {\n        js.getLogger().error(js.getErrorMessage(`[jellyfin_server] Failed to execute ${cmd}: ${stderr.toString()}`, error));\n        reject(error);\n      }\n      else {\n        resolve(stdout.toString());\n      }\n    });\n  });\n}\n\nfunction systemctl(cmd: string, service = '') {\n  const fullCmd = `/usr/bin/sudo /bin/systemctl ${cmd} ${service} || true`;\n  return execCommand(fullCmd);\n}\n\nfunction resolveOnServiceStatusMatch(status: string | string[], matchConsecutive = 1, retries = 5) {\n  let consecutiveCount = 0;\n  let tryCount = 0;\n\n  const startCheckTimer = (resolve: (value?: unknown) => void, reject: () => void) => {\n    setTimeout(async () => {\n      const _status = await getServiceStatus();\n      if (Array.isArray(status) ? status.includes(_status) : _status === status) {\n        consecutiveCount++;\n        if (consecutiveCount === matchConsecutive) {\n          resolve();\n        }\n        else {\n          startCheckTimer(resolve, reject);\n        }\n      }\n      else if (_status === 'failed') {\n        reject();\n      }\n      else if (_status === 'activating') {\n        consecutiveCount = 0;\n        startCheckTimer(resolve, reject);\n      }\n      else if (tryCount < retries - 1) {\n        consecutiveCount = 0;\n        tryCount++;\n        startCheckTimer(resolve, reject);\n      }\n      else {\n        reject();\n      }\n    }, 500);\n  };\n\n\n  return new Promise((resolve, reject) => {\n    startCheckTimer(resolve, reject);\n  });\n}\n\nexport async function startService() {\n  await systemctl('start', 'jellyfin');\n  await resolveOnServiceStatusMatch('active', 5);\n}\n\nexport async function stopService() {\n  await systemctl('stop', 'jellyfin');\n  return resolveOnServiceStatusMatch([ 'inactive', 'failed' ]);\n}\n\nexport async function getServiceStatus() {\n  const recognizedStatuses = [ 'inactive', 'active', 'activating', 'failed' ];\n  const regex = /Active: (.*) \\(.*\\)/gm;\n  const out = await systemctl('status', 'jellyfin');\n  const matches = [ ...out.matchAll(regex) ];\n  if (matches[0] && matches[0][1] && recognizedStatuses.includes(matches[0][1])) {\n    return matches[0][1];\n  }\n\n  return 'inactive';\n}\n\n\nexport async function getConfig() {\n  try {\n    if (fs.existsSync(CONFIG_FILE)) {\n      const data = fs.readFileSync(CONFIG_FILE).toString();\n      return xml2js.parseStringPromise(data, {\n        explicitArray: false,\n        valueProcessors: [ parseBooleans ]\n      });\n    }\n\n    return null;\n\n  }\n  catch (error) {\n    js.getLogger().error(js.getErrorMessage('[jellyfin_server] Failed to read config:', error));\n    return null;\n  }\n}\n"]}