{"version":3,"file":"JellyfinServerContext.js","sourceRoot":"","sources":["../../src/lib/JellyfinServerContext.ts"],"names":[],"mappings":"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","sourcesContent":["import I18nSchema from '../i18n/strings_en.json';\nimport format from 'string-format';\nimport fs from 'fs-extra';\nimport winston from 'winston';\n\nexport type I18nKey = keyof typeof I18nSchema;\n\nclass JellyfinServerContext {\n\n  #pluginContext?: any;\n\n  #i18n: Record<string, string | Record<string, string>>;\n  #i18nDefaults: Record<string, string | Record<string, string>>;\n  #i18CallbackRegistered: boolean;\n\n  constructor() {\n    this.#i18n = {};\n    this.#i18nDefaults = {};\n    this.#i18CallbackRegistered = false;\n  }\n\n  init(pluginContext: any) {\n    this.#pluginContext = pluginContext;\n\n    this.#loadI18n();\n    if (!this.#i18CallbackRegistered) {\n      this.#pluginContext.coreCommand.sharedVars.registerCallback('language_code', this.#onSystemLanguageChanged.bind(this));\n      this.#i18CallbackRegistered = true;\n    }\n  }\n\n  toast(type: 'success' | 'info' | 'error' | 'warning', message: string, title = 'Jellyfin Server') {\n    this.#pluginContext.coreCommand.pushToastMessage(type, title, message);\n  }\n\n  getLogger(): winston.Logger {\n    return this.#pluginContext.logger;\n  }\n\n  getErrorMessage(message: string, error: any, stack = true): string {\n    let result = message;\n    if (typeof error == 'object') {\n      if (error.message) {\n        result += ` ${error.message}`;\n      }\n      if (stack && error.stack) {\n        result += ` ${error.stack}`;\n      }\n    }\n    else if (typeof error == 'string') {\n      result += ` ${error}`;\n    }\n    return result.trim();\n  }\n\n  reset() {\n    this.#pluginContext = null;\n  }\n\n  getI18n(key: I18nKey, ...formatValues: any[]): string {\n    let str: string;\n    if (key.indexOf('.') > 0) {\n      const mainKey = key.split('.')[0];\n      const secKey = key.split('.')[1];\n      str = (this.#i18n[mainKey] as Record<string, string>)?.[secKey] ||\n        (this.#i18nDefaults[mainKey] as Record<string, string>)?.[secKey] ||\n        key;\n    }\n    else {\n      str = (this.#i18n[key] || this.#i18nDefaults[key] || key) as string;\n    }\n\n    if (str && formatValues.length) {\n      str = format(str, ...formatValues);\n    }\n\n    return str;\n  }\n\n  getDeviceInfo() {\n    return this.#pluginContext.coreCommand.executeOnPlugin('system_controller', 'volumiodiscovery', 'getThisDevice');\n  }\n\n  #loadI18n() {\n    if (this.#pluginContext) {\n      const i18nPath = `${__dirname}/../i18n`;\n\n      try {\n        this.#i18nDefaults = fs.readJsonSync(`${i18nPath}/strings_en.json`);\n      }\n      catch (e) {\n        this.#i18nDefaults = {};\n      }\n\n      try {\n        const language_code = this.#pluginContext.coreCommand.sharedVars.get('language_code');\n        this.#i18n = fs.readJsonSync(`${i18nPath}/strings_${language_code}.json`);\n      }\n      catch (e) {\n        this.#i18n = this.#i18nDefaults;\n      }\n    }\n  }\n\n  #onSystemLanguageChanged() {\n    this.#loadI18n();\n  }\n\n  get volumioCoreCommand(): any {\n    return this.#pluginContext?.coreCommand || null;\n  }\n}\n\nexport default new JellyfinServerContext();\n"]}