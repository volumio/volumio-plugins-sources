{"version":3,"file":"prog.js","sourceRoot":"","sources":["../../src/lib/prog.ts"],"names":[],"mappings":"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","sourcesContent":["import { format } from 'date-fns';\nimport got from 'got';\nimport Datastore from 'nedb-promises';\nimport { XMLParser } from 'fast-xml-parser';\nimport { format as utilFormat } from 'util';\nimport pLimit from 'p-limit';\n\nimport { PROG_URL } from './consts/radikoUrls';\nimport type { RadikoProgramData } from './models/RadikoProgramModel';\nimport type { RadikoXMLData } from './models/RadikoXMLStationModel';\n\nconst EMPTY_PROGRAM: RadikoProgramData = {\n  station: '',\n  id: '',\n  ft: '',\n  tt: '',\n  title: '',\n  pfm: '',\n};\n\nexport default class RdkProg {\n  private readonly logger: Console;\n  private readonly db = Datastore.create({ inMemoryOnly: true });\n\n  private lastStation = '';\n  private lastTime = '';\n  private cachedProgram: RadikoProgramData = { ...EMPTY_PROGRAM };\n\n  constructor(logger: Console) {\n    this.logger = logger;\n    this.initDBIndexes();\n  }\n\n  async getCurProgram(station: string): Promise<RadikoProgramData | undefined> {\n    const currentTime = this.getCurrentTime();\n\n    if (station !== this.lastStation || currentTime !== this.lastTime) {\n      try {\n        const result = await this.db.findOne({\n          station,\n          ft: { $lte: currentTime },\n          tt: { $gte: currentTime },\n        });\n\n        if (isRadikoProgramData(result)) {\n          this.cachedProgram = result;\n        } else {\n          this.cachedProgram = { ...EMPTY_PROGRAM };\n        }\n\n        this.lastStation = station;\n        this.lastTime = currentTime;\n      } catch (error) {\n        this.logger.error(`JP_Radio::DB find error for station ${station}`, error);\n      }\n    }\n\n    return this.cachedProgram.id ? this.cachedProgram : undefined;\n  }\n\n  async putProgram(prog: RadikoProgramData): Promise<void> {\n    try {\n      await this.db.insert(prog);\n    } catch (error: any) {\n      if (error?.errorType !== 'uniqueViolated') {\n        this.logger.error('JP_Radio::DB insert error', error);\n      }\n    }\n  }\n\n  async clearOldProgram(): Promise<void> {\n    try {\n      await this.db.remove({ tt: { $lt: this.getCurrentTime() } }, { multi: true });\n    } catch (error) {\n      this.logger.error('JP_Radio::DB delete error', error);\n    }\n  }\n\n  async updatePrograms(): Promise<void> {\n    const currentDate = this.getCurrentDate();\n    const parser = new XMLParser({\n      attributeNamePrefix: '@',\n      ignoreAttributes: false,\n      allowBooleanAttributes: true,\n    });\n\n    const areaIDs = Array.from({ length: 47 }, (_, i) => `JP${i + 1}`);\n    const limit = pLimit(5);\n\n    const tasks = areaIDs.map((areaID) =>\n      limit(async () => {\n        const url = utilFormat(PROG_URL, currentDate, areaID);\n        try {\n          const response = await got(url);\n          const xmlData: RadikoXMLData = parser.parse(response.body);\n          const stations = xmlData?.radiko?.stations?.station ?? [];\n\n          for (const stationData of stations) {\n            const stationId = stationData['@id'];\n            const progRaw = stationData.progs?.prog;\n            if (!progRaw) continue;\n\n            const progs = Array.isArray(progRaw) ? progRaw : [progRaw];\n\n            for (const prog of progs) {\n              const program: RadikoProgramData = {\n                station: stationId,\n                id: stationId + prog['@id'],\n                ft: prog['@ft'],\n                tt: prog['@to'],\n                title: prog['title'],\n                pfm: prog['pfm'] ?? '',\n              };\n              await this.putProgram(program);\n            }\n          }\n        } catch (error) {\n          this.logger.error(`JP_Radio::Failed to update program for ${areaID}`, error);\n        }\n      })\n    );\n\n    await Promise.all(tasks);\n  }\n\n  async dbClose(): Promise<void> {\n    this.logger.info('JP_Radio::DB compacting');\n    await this.db.persistence.compactDatafile();\n  }\n\n  async allData(): Promise<string> {\n    const data = await this.db.find({});\n    return JSON.stringify(data, null, 2);\n  }\n\n  private initDBIndexes(): void {\n    this.db.ensureIndex({ fieldName: 'id', unique: true });\n    this.db.ensureIndex({ fieldName: 'station' });\n    this.db.ensureIndex({ fieldName: 'ft' });\n    this.db.ensureIndex({ fieldName: 'tt' });\n  }\n\n  private getCurrentTime(): string {\n    return format(new Date(), 'yyyyMMddHHmm');\n  }\n\n  private getCurrentDate(): string {\n    return format(new Date(), 'yyyyMMdd');\n  }\n}\n\nfunction isRadikoProgramData(data: any): data is RadikoProgramData {\n  return (\n    typeof data?.station === 'string' &&\n    typeof data?.id === 'string' &&\n    typeof data?.ft === 'string' &&\n    typeof data?.tt === 'string' &&\n    typeof data?.title === 'string' &&\n    typeof data?.pfm === 'string'\n  );\n}\n"]}