{"version":3,"file":"radiko.js","sourceRoot":"","sources":["../../src/lib/radiko.ts"],"names":[],"mappings":"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","sourcesContent":["import 'date-utils';\r\nimport { format } from 'util';\r\nimport got, { OptionsOfJSONResponseBody, Options, Response } from 'got';\r\nimport { spawn, ChildProcess } from 'child_process';\r\nimport * as tough from 'tough-cookie';\r\nimport { CookieJar } from 'tough-cookie';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport pLimit from 'p-limit';\r\n\r\nimport type { StationInfo, RegionData } from './models/StationModel';\r\nimport type { LoginAccount, LoginState } from './models/AuthModel';\r\nimport {\r\n  LOGIN_URL, CHECK_URL, AUTH1_URL, AUTH2_URL,\r\n  CHANNEL_AREA_URL, CHANNEL_FULL_URL, PLAY_URL,\r\n  AUTH_KEY, MAX_RETRY_COUNT, PROG_DAILY_URL\r\n} from './consts/radikoUrls';\r\n\r\nconst xmlParser = new XMLParser({\r\n  attributeNamePrefix: '@',\r\n  ignoreAttributes: false,\r\n  removeNSPrefix: true,\r\n  allowBooleanAttributes: true,\r\n});\r\n\r\nexport default class Radiko {\r\n  private token: string | null = null;\r\n  private areaID: string | null = null;\r\n  private cookieJar: CookieJar = new tough.CookieJar();\r\n  private loginState: LoginState | null = null;\r\n\r\n  public stations: Map<string, StationInfo> = new Map();\r\n  public stationData: RegionData[] = [];\r\n  public areaData: Map<string, { areaName: string; stations: string[] }> = new Map();\r\n\r\n  constructor(\r\n    private port: number,\r\n    private logger: Console,\r\n    private acct: LoginAccount\r\n  ) {}\r\n\r\n  async init(acct: LoginAccount | null = null, forceGetStations = false): Promise<void> {\r\n    if (acct) {\r\n      this.logger.info('JP_Radio::Attempting login');\r\n      const loginOK = await this.checkLogin() ?? await this.login(acct).then(jar => {\r\n      this.cookieJar = jar;\r\n      return this.checkLogin();\r\n    });\r\n      this.loginState = loginOK;\r\n    }\r\n\r\n    if (forceGetStations || !this.areaID) {\r\n      const [token, areaID] = await this.getToken();\r\n      this.token = token;\r\n      this.areaID = areaID;\r\n      await this.getStations();\r\n    }\r\n  }\r\n\r\n  private async login(acct: LoginAccount): Promise<CookieJar> {\r\n    const jar = new tough.CookieJar();\r\n    try {\r\n      await got.post(LOGIN_URL, {\r\n        cookieJar: jar,\r\n        form: { mail: acct.mail, pass: acct.pass },\r\n      });\r\n      return jar;\r\n    } catch (err: any) {\r\n      if (err.statusCode === 302) return jar;\r\n      this.logger.error('JP_Radio::Login failed', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  private async checkLogin(): Promise<LoginState | null> {\r\n    if (!this.cookieJar) {\r\n      this.logger.info('JP_Radio::premium account not set');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const options: OptionsOfJSONResponseBody = {\r\n        cookieJar: this.cookieJar,\r\n        method: 'GET',\r\n        responseType: 'json'\r\n      };\r\n\r\n      const response: Response<any> = await got(CHECK_URL, options);\r\n      const body = response.body as LoginState;\r\n\r\n      this.logger.info(`JP_Radio::Login status: ${body.member_type.type}`);\r\n      return body;\r\n\r\n    } catch (err: any) {\r\n      const statusCode = err?.response?.statusCode;\r\n\r\n      if (statusCode === 400) {\r\n        this.logger.info('JP_Radio::premium not logged in (HTTP 400)');\r\n        return null;\r\n      }\r\n\r\n      this.logger.error(`JP_Radio::premium account login check error: ${err.message}`, err);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async getToken(): Promise<[string, string]> {\r\n    const auth1Headers = await this.auth1();\r\n    const [partialKey, token] = this.getPartialKey(auth1Headers);\r\n    const result = await this.auth2(token, partialKey);\r\n    const [areaID] = result.trim().split(',');\r\n    return [token, areaID];\r\n  }\r\n\r\n  private async auth1(): Promise<Record<string, string>> {\r\n    const res = await got.get(AUTH1_URL, {\r\n      cookieJar: this.cookieJar,\r\n      headers: {\r\n        'X-Radiko-App': 'pc_html5',\r\n        'X-Radiko-App-Version': '0.0.1',\r\n        'X-Radiko-User': 'dummy_user',\r\n        'X-Radiko-Device': 'pc',\r\n      },\r\n    });\r\n    return res.headers as Record<string, string>;\r\n  }\r\n\r\n  private getPartialKey(headers: Record<string, string>): [string, string] {\r\n    const token = headers['x-radiko-authtoken'];\r\n    const offset = parseInt(headers['x-radiko-keyoffset'], 10);\r\n    const length = parseInt(headers['x-radiko-keylength'], 10);\r\n    const partialKey = Buffer.from(AUTH_KEY.slice(offset, offset + length)).toString('base64');\r\n    return [partialKey, token];\r\n  }\r\n\r\n  private async auth2(token: string, partialKey: string): Promise<string> {\r\n    const res = await got.get(AUTH2_URL, {\r\n      cookieJar: this.cookieJar,\r\n      headers: {\r\n        'X-Radiko-AuthToken': token,\r\n        'X-Radiko-Partialkey': partialKey,\r\n        'X-Radiko-User': 'dummy_user',\r\n        'X-Radiko-Device': 'pc',\r\n      },\r\n    });\r\n    return res.body;\r\n  }\r\n\r\n  private async getStations(): Promise<void> {\r\n    this.stations = new Map();\r\n    this.areaData = new Map();\r\n\r\n    // 1. フル局データを取得・パース\r\n    const fullRes = await got(CHANNEL_FULL_URL);\r\n    const fullParsed = xmlParser.parse(fullRes.body);\r\n\r\n    const regionData: RegionData[] = fullParsed.region.stations.map((region: any) => ({\r\n      region_name: region['@region_name'],\r\n      region_id: region['@region_id'],\r\n      ascii_name: region['@ascii_name'],\r\n      stations: region.station.map((s: any) => ({\r\n        id: s.id,\r\n        name: s.name,\r\n        ascii_name: s.ascii_name,\r\n        areafree: s.areafree,\r\n        timefree: s.timefree,\r\n        banner: s.banner,\r\n        area_id: s.area_id,\r\n      })),\r\n    }));\r\n\r\n    // 2. 並列数制限付きで47エリア分の取得を並列化\r\n    const limit = pLimit(5);\r\n    const areaIDs = Array.from({ length: 47 }, (_, i) => `JP${i + 1}`);\r\n\r\n    await Promise.all(\r\n      areaIDs.map((areaID) =>\r\n        limit(async () => {\r\n          const res = await got(format(CHANNEL_AREA_URL, areaID));\r\n          const parsed = xmlParser.parse(res.body);\r\n          const stations = parsed.stations.station.map((s: any) => s.id);\r\n          this.areaData.set(areaID, {\r\n            areaName: parsed.stations['@area_name'],\r\n            stations,\r\n          });\r\n        })\r\n      )\r\n    );\r\n\r\n    const areaData = this.areaData;\r\n    const currentAreaID = this.areaID ?? '';\r\n    const allowedStations = areaData.get(currentAreaID)?.stations.map(String) ?? [];\r\n\r\n    // 3. regionData をもとに stations を構成\r\n    for (const region of regionData) {\r\n      for (const station of region.stations) {\r\n        const id = station.id;\r\n        const areaName = areaData.get(station.area_id)?.areaName?.replace(' JAPAN', '') ?? '';\r\n\r\n        if (this.loginState || allowedStations.includes(id)) {\r\n          this.stations.set(id, {\r\n            RegionName: region.region_name,\r\n            BannerURL: station.banner,\r\n            AreaID: station.area_id,\r\n            AreaName: areaName,\r\n            Name: station.name,\r\n            AsciiName: station.ascii_name,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    this.stationData = regionData;\r\n  }\r\n\r\n  async getStationAsciiName(stationID: string): Promise<string> {\r\n    return this.stations?.get(stationID)?.AsciiName ?? '';\r\n  }\r\n\r\n  async play(station: string): Promise<ChildProcess | null> {\r\n    if (!this.stations?.has(station)) {\r\n      this.logger.warn(`JP_Radio::Station not found: ${station}`);\r\n      return null;\r\n    }\r\n\r\n    let m3u8: string | null = null;\r\n    for (let i = 0; i < MAX_RETRY_COUNT; i++) {\r\n      if (!this.token) [this.token, this.areaID] = await this.getToken();\r\n      m3u8 = await this.genTempChunkM3u8URL(format(PLAY_URL, station), this.token);\r\n      if (m3u8) break;\r\n      this.logger.info('JP_Radio::Retrying stream fetch with new token');\r\n      [this.token, this.areaID] = await this.getToken();\r\n    }\r\n\r\n    if (!m3u8) {\r\n      this.logger.error('JP_Radio::Failed to get playlist URL');\r\n      return null;\r\n    }\r\n\r\n    const args = ['-y', '-headers', `X-Radiko-Authtoken:${this.token}`, '-i', m3u8, '-acodec', 'copy', '-f', 'adts', '-loglevel', 'error', 'pipe:1'];\r\n\r\n    return spawn('ffmpeg', args, { stdio: ['ignore', 'pipe', 'ignore', 'ipc'], detached: true });\r\n  }\r\n\r\n  private async genTempChunkM3u8URL(url: string, token: string): Promise<string | null> {\r\n    try {\r\n      const res = await got(url, {\r\n        headers: {\r\n          'X-Radiko-AuthToken': token,\r\n          'X-Radiko-App': 'pc_html5',\r\n          'X-Radiko-App-Version': '0.0.1',\r\n          'X-Radiko-User': 'dummy_user',\r\n          'X-Radiko-Device': 'pc',\r\n        },\r\n      });\r\n\r\n      return res.body.split('\\n').find(line => line.startsWith('http') && line.endsWith('.m3u8')) ?? null;\r\n    } catch (err) {\r\n      this.logger.error('JP_Radio::genTempChunkM3u8URL error', err);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getProgramDaily(station: string, date: string): Promise<any> {\r\n    const res = await got(format(PROG_DAILY_URL, station, date));\r\n    return xmlParser.parse(res.body);\r\n  }\r\n}\r\n"]}