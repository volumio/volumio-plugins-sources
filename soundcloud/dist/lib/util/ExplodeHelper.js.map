{"version":3,"file":"ExplodeHelper.js","sourceRoot":"","sources":["../../../src/lib/util/ExplodeHelper.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6EAAsC;AAGtC,+FAAuE;AAEvE,MAAqB,aAAa;IAEhC,MAAM,CAAC,oCAAoC,CAAC,IAAuB;QACjE,MAAM,GAAG,GAAG,uBAAA,IAAI,sCAAa,MAAjB,IAAI,EAAc,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,WAA+B,CAAC;QACpC,IAAI,UAAU,GAAuB,IAAI,CAAC,KAAK,IAAI,2BAAE,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QAC/F,QAAQ,IAAI,CAAC,aAAa,EAAE;YAC1B,KAAK,SAAS;gBACZ,WAAW,GAAG,2BAAE,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;gBAC5D,UAAU,GAAG,SAAS,CAAC;gBACvB,MAAM;YACR,KAAK,SAAS;gBACZ,WAAW,GAAG,2BAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;gBAC7D,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE;oBACvB,WAAW,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACzC;gBACD,MAAM;YACR;gBACE,WAAW,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,SAAS,CAAC;SAClD;QAED,MAAM,MAAM,GAAc;YACxB,OAAO,EAAE,YAAY;YACrB,GAAG;YACH,QAAQ,EAAE,IAAI,CAAC,SAAS,IAAI,SAAS;YACrC,MAAM,EAAE,WAAW;YACnB,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;CAqBF;AAxDD,gCAwDC;qFAfqB,IAAuB;IACzC,IAAI,IAAI,CAAC,EAAE,KAAK,SAAS,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,SAAS,GAAc;QAC3B,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE;KAC5B,CAAC;IACF,IAAI,IAAI,CAAC,MAAM,EAAE;QACf,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;KAChC;IACD,MAAM,GAAG,GAAG,cAAc,oBAAU,CAAC,2BAA2B,CAAC,SAAS,CAAC,EAAE,CAAC;IAC9E,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,+BAA+B,GAAG,EAAE,CAAC,CAAC;IAC1D,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import sc from '../SoundCloudContext';\nimport { ExplodedTrackInfo, QueueItem } from '../controller/browse/view-handlers/ExplodableViewHandler';\nimport { TrackView } from '../controller/browse/view-handlers/TrackViewHandler';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\n\nexport default class ExplodeHelper {\n\n  static createQueueItemFromExplodedTrackInfo(data: ExplodedTrackInfo): QueueItem | null {\n    const uri = this.#getTrackUri(data);\n    if (!data.title || !uri) {\n      return null;\n    }\n    let artistLabel: string | undefined;\n    let albumLabel: string | undefined = data.album || sc.getI18n('SOUNDCLOUD_TRACK_PARSER_ALBUM');\n    switch (data.playableState) {\n      case 'blocked':\n        artistLabel = sc.getI18n('SOUNDCLOUD_TRACK_PARSER_BLOCKED');\n        albumLabel = undefined;\n        break;\n      case 'snipped':\n        artistLabel = sc.getI18n('SOUNDCLOUD_TRACK_EXPLODE_SNIPPED');\n        if (data.user?.username) {\n          artistLabel += ` ${data.user.username}`;\n        }\n        break;\n      default:\n        artistLabel = data.user?.username || undefined;\n    }\n\n    const result: QueueItem = {\n      service: 'soundcloud',\n      uri,\n      albumart: data.thumbnail || undefined,\n      artist: artistLabel,\n      album: albumLabel,\n      name: data.title,\n      title: data.title\n    };\n\n    return result;\n  }\n\n  /**\n   * Track uri:\n   * soundcloud/track@trackId={trackId}\n   */\n  static #getTrackUri(data: ExplodedTrackInfo) {\n    if (data.id === undefined) {\n      return null;\n    }\n    const trackView: TrackView = {\n      name: 'track',\n      trackId: data.id.toString()\n    };\n    if (data.origin) {\n      trackView.origin = data.origin;\n    }\n    const uri = `soundcloud/${ViewHelper.constructUriSegmentFromView(trackView)}`;\n    sc.getLogger().info(`[soundcloud] getTrackUri(): ${uri}`);\n    return uri;\n  }\n}\n"]}