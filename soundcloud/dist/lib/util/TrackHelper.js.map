{"version":3,"file":"TrackHelper.js","sourceRoot":"","sources":["../../../src/lib/util/TrackHelper.ts"],"names":[],"mappings":";;;;;AAAA,6EAAsC;AAGtC,MAAqB,WAAW;IAE9B,MAAM,CAAC,WAAW,CAAC,MAAqB,EAAE,WAAqD;QAC7F,MAAM,KAAK,GAAG,2BAAE,CAAC,QAAQ,EAAE,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;YACtC,MAAM,GAAG,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;YACjC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,uBAAuB,CAAC,KAAkB;QAC/C;;;;;;;WAOG;QACH,IAAI,2BAAE,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE;YACxC,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,yCAAyC,KAAK,CAAC,EAAE,MAAM,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YAC1F,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;SACzD;QAED,IAAI,cAAc,GAAG,IAAI,CAAC;QAC1B,MAAM,SAAS,GAAG;YAChB,EAAE,QAAQ,EAAE,aAAa,EAAE,QAAQ,EAAE,YAAY,EAAE;YACnD,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,0BAA0B,EAAE;YACzD,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC,mEAAmE;SAChH,CAAC;QACF,OAAO,cAAc,KAAK,IAAI,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtD,MAAM,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;YAC5B,IAAI,CAAC,EAAE;gBACL,MAAM,CAAC,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,CAC/B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;gBACjE,IAAI,CAAC,EAAE;oBACL,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC;iBACxB;aACF;SACF;QACD,OAAO,cAAc,CAAC;IACxB,CAAC;CACF;AA3CD,8BA2CC","sourcesContent":["import sc from '../SoundCloudContext';\nimport TrackEntity from '../entities/TrackEntity';\n\nexport default class TrackHelper {\n\n  static cacheTracks(tracks: TrackEntity[], cacheKeyGen: (keyData: Record<string, any>) => string) {\n    const cache = sc.getCache();\n    tracks.forEach((track) => {\n      const keyData = { trackId: track.id };\n      const key = cacheKeyGen(keyData);\n      cache.put(key, track);\n    });\n  }\n\n  static getPreferredTranscoding(track: TrackEntity) {\n    /**\n     * // soundcloud-testing\n     * I do not know whether the transcodings returned for a SoundCloud Go+\n     * account would include high-quality ('hq') ones and if so, their protocols\n     * and mimeTypes - not to mention the format of the actual streaming URLs\n     * obtained from these transcodings. First step would be to dump all\n     * transcodings to log so I can inspect them...\n     */\n    if (sc.getConfigValue('logTranscodings')) {\n      sc.getLogger().info(`[soundcloud-testing] Transcodings for ${track.id} - ${track.title}`);\n      sc.getLogger().info(JSON.stringify(track.transcodings));\n    }\n\n    let transcodingUrl = null;\n    const preferred = [\n      { protocol: 'progressive', mimeType: 'audio/mpeg' },\n      { protocol: 'hls', mimeType: 'audio/ogg; codecs=\"opus\"' },\n      { protocol: 'hls', mimeType: 'audio/mpeg' } // This one will probably not play well, but leaving it here anyway\n    ];\n    while (transcodingUrl === null && preferred.length > 0) {\n      const p = preferred.shift();\n      if (p) {\n        const s = track.transcodings.find(\n          (t) => t.protocol === p.protocol && t.mimeType === p.mimeType);\n        if (s) {\n          transcodingUrl = s.url;\n        }\n      }\n    }\n    return transcodingUrl;\n  }\n}\n"]}