{"version":3,"file":"SelectionModel.js","sourceRoot":"","sources":["../../../src/lib/model/SelectionModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6EAAsC;AACtC,4DAAyD;AAEzD,sDAA8B;AAO9B,MAAqB,cAAe,SAAQ,mBAAS;IAArD;;;IAqCA,CAAC;IAnCC,aAAa,CAAC,OAA0C;QACtD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YAClB,MAAM,MAAM,GAAqC;gBAC/C,KAAK,EAAE,EAAE;gBACT,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,CAAC;aAClB,CAAC;YACF,OAAO,MAAM,CAAC;SACf;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,cAAc,EAAE,EAAE;YAClB,eAAe,EAAE,uBAAA,IAAI,4EAA2B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC3D,uBAAuB,EAAE,uBAAA,IAAI,+EAA8B,CAAC,IAAI,CAAC,IAAI,CAAC;YACtE,eAAe,EAAE,uBAAA,IAAI,kFAAiC,CAAC,IAAI,CAAC,IAAI,CAAC;SAClE,CAAC,CAAC;IACL,CAAC;CAmBF;AArCD,iCAqCC;;IAhBG,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAEpC,oDAAoD;IACpD,OAAO,2BAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC3B,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EACvD,GAAG,EAAE,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAC/B,CAAC;AACJ,CAAC,uGAE6B,MAA6B;IACzD,OAAO,MAAM,CAAC,KAAK,CAAC;AACtB,CAAC,6GAEgC,IAAe;IAC9C,OAAO,gBAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import sc from '../SoundCloudContext';\nimport BaseModel, { LoopFetchResult } from './BaseModel';\nimport { Selection, Collection } from 'soundcloud-fetch';\nimport Mapper from './Mapper';\nimport SelectionEntity from '../entities/SelectionEntity';\n\nexport interface SelectionModelGetSelectionsParams {\n  mixed?: boolean;\n}\n\nexport default class SelectionModel extends BaseModel {\n\n  getSelections(options: SelectionModelGetSelectionsParams) {\n    if (!options.mixed) {\n      const result: LoopFetchResult<SelectionEntity> = {\n        items: [],\n        nextPageToken: null,\n        nextPageOffset: 0\n      };\n      return result;\n    }\n\n    return this.loopFetch({\n      callbackParams: {},\n      getFetchPromise: this.#getSelectionsFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getSelectionsFromFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedSelectionToEntity.bind(this)\n    });\n  }\n\n  #getSelectionsFetchPromise() {\n    const api = this.getSoundCloudAPI();\n\n    // Only mixed selections supported (without options)\n    return sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('selections', { mixed: true }),\n      () => api.getMixedSelections()\n    );\n  }\n\n  #getSelectionsFromFetchResult(result: Collection<Selection>) {\n    return result.items;\n  }\n\n  #convertFetchedSelectionToEntity(item: Selection): Promise<SelectionEntity> {\n    return Mapper.mapSelection(item);\n  }\n}\n"]}