{"version":3,"file":"HistoryModel.js","sourceRoot":"","sources":["../../../src/lib/model/HistoryModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,4DAAkF;AAClF,uDAAsG;AACtG,sDAA8B;AAI9B,sEAA8C;AAa9C,MAAqB,YAAa,SAAQ,mBAAS;IAAnD;;;IAqDA,CAAC;IAnDC,cAAc,CAAC,MAA6C;QAC1D,MAAM,QAAQ,GAAG,CAAA,IAAI,CAAC,2CAA4D,CAAA,CAAC;QACnF,MAAM,gBAAgB,GAAG,CAAA,IAAI,CAAC,yCAA0D,CAAA,CAAC;QAEzF,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,cAAc,EAAE,EAAE,GAAG,MAAM,EAAE;YAC7B,eAAe,EAAE,uBAAA,IAAI,yEAA4B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5D,uBAAuB,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,+BAA+B,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5D,eAAe,EAAE,uBAAA,IAAI,oFAAuC,CAAC,IAAI,CAAC,IAAI,CAAC;YACvE,KAAK,EAAE,uBAAA,IAAI,2EAA8B,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;CAoCF;AArDD,+BAqDC;oFAlCC,KAAK,mDAA6B,MAAkD;IAClF,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAEpC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mCAAmC,CAAkB,MAAM,CAAC,CAAC;IACrG,IAAI,oBAAoB,EAAE;QACxB,OAAO,oBAAoB,CAAC;KAC7B;IAED,MAAM,WAAW,GAAG;QAClB,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,KAAK,EAAE,4BAAS,CAAC,eAAe;KACjC,CAAC;IACF,OAAO,GAAG,CAAC,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AAC5C,CAAC,wDAED,KAAK,8DAAwC,IAAqB;IAChE,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;IAC9B,IAAI,WAAW,YAAY,wBAAK,EAAE;QAChC,OAAO,gBAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KACrC;SACI,IAAI,WAAW,YAAY,2BAAQ,IAAI,WAAW,YAAY,iCAAc,EAAE;QACjF,OAAO,gBAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;KACxC;SACI,IAAI,WAAW,YAAY,wBAAK,EAAE;QACrC,OAAO,gBAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;KACrC;IACD,OAAO,IAAI,CAAC;AACd,CAAC,mGAE6B,MAAmE;IAC/F,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAkB,CAAC;IACrF,qBAAW,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAC9E,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import BaseModel, { LoopFetchCallbackParams, LoopFetchResult } from './BaseModel';\nimport { Playlist, Constants, SystemPlaylist, PlayHistoryItem, Album, Track } from 'soundcloud-fetch';\nimport Mapper from './Mapper';\nimport TrackEntity from '../entities/TrackEntity';\nimport PlaylistEntity from '../entities/PlaylistEntity';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport TrackHelper from '../util/TrackHelper';\n\nexport interface HistoryModelGetPlayHistoryItemsParams {\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n  type: 'set' | 'track';\n}\n\ninterface GetPlayHistoryItemsLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  type: 'set' | 'track';\n}\n\nexport default class HistoryModel extends BaseModel {\n\n  getPlayHistory(params: HistoryModelGetPlayHistoryItemsParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<PlayHistoryItem>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<PlayHistoryItem>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getPlayHistoryFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedPlayHistoryItemToEntity.bind(this),\n      onEnd: this.#onGetPlayHistoryLoopFetchEnd.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getPlayHistoryFetchPromise(params: GetPlayHistoryItemsLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<PlayHistoryItem>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams = {\n      type: params.type,\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    return api.me.getPlayHistory(queryParams);\n  }\n\n  async #convertFetchedPlayHistoryItemToEntity(item: PlayHistoryItem): Promise<AlbumEntity | PlaylistEntity | TrackEntity | null> {\n    const wrappedItem = item.item;\n    if (wrappedItem instanceof Album) {\n      return Mapper.mapAlbum(wrappedItem);\n    }\n    else if (wrappedItem instanceof Playlist || wrappedItem instanceof SystemPlaylist) {\n      return Mapper.mapPlaylist(wrappedItem);\n    }\n    else if (wrappedItem instanceof Track) {\n      return Mapper.mapTrack(wrappedItem);\n    }\n    return null;\n  }\n\n  #onGetPlayHistoryLoopFetchEnd(result: LoopFetchResult<AlbumEntity | PlaylistEntity | TrackEntity>) {\n    const tracks = result.items.filter((item) => item.type === 'track') as TrackEntity[];\n    TrackHelper.cacheTracks(tracks, this.getCacheKeyForFetch.bind(this, 'track'));\n    return result;\n  }\n}\n"]}