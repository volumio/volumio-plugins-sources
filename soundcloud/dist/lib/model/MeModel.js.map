{"version":3,"file":"MeModel.js","sourceRoot":"","sources":["../../../src/lib/model/MeModel.ts"],"names":[],"mappings":"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","sourcesContent":["import sc from '../SoundCloudContext';\nimport BaseModel, { LoopFetchCallbackParams, LoopFetchResult } from './BaseModel';\nimport { Playlist, Constants, SystemPlaylist, Album, LibraryItem, Like, Track } from 'soundcloud-fetch';\nimport Mapper from './Mapper';\nimport PlaylistEntity from '../entities/PlaylistEntity';\nimport AlbumEntity from '../entities/AlbumEntity';\nimport TrackEntity from '../entities/TrackEntity';\nimport { TrackOrigin } from '../controller/browse/view-handlers/TrackViewHandler';\n\nexport interface MeModelGetLikesParams {\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n  type: 'track' | 'playlistAndAlbum';\n}\n\ninterface GetLikesLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  type: 'track' | 'playlistAndAlbum';\n}\n\nexport interface MeModelGetLibraryItemsParams {\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n  type: 'album' | 'playlist' | 'station';\n  filter: 'liked' | 'created' | 'all'; // Only for 'album' and 'playlist' types\n}\n\ninterface GetLibraryItemsLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  type: 'album' | 'playlist' | 'station';\n  filter: 'liked' | 'created' | 'all'; // Only for 'album' and 'playlist' types\n}\n\nexport default class MeModel extends BaseModel {\n\n  getLikes(params: MeModelGetLikesParams & {type: 'playlistAndAlbum'}): Promise<LoopFetchResult<AlbumEntity | PlaylistEntity>>;\n  getLikes(params: MeModelGetLikesParams & {type: 'track'}): Promise<LoopFetchResult<TrackEntity>>;\n  getLikes(params: MeModelGetLikesParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<Like>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<Like>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getLikesFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedLikeToEntity.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getLikesFetchPromise(params: GetLikesLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<Like>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams = {\n      limit: Constants.QUERY_MAX_LIMIT,\n      type: params.type\n    };\n    return sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('likes', queryParams),\n      () => api.me.getLikes(queryParams)\n    );\n  }\n\n  async #convertFetchedLikeToEntity(item: Like): Promise<AlbumEntity | PlaylistEntity | TrackEntity | null> {\n    const wrappedItem = item.item;\n    if (wrappedItem instanceof Album) {\n      return Mapper.mapAlbum(wrappedItem);\n    }\n    else if (wrappedItem instanceof Playlist) {\n      return Mapper.mapPlaylist(wrappedItem);\n    }\n    else if (wrappedItem instanceof Track) {\n      return Mapper.mapTrack(wrappedItem);\n    }\n    return null;\n  }\n\n  getLibraryItems(params: MeModelGetLibraryItemsParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<LibraryItem>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<LibraryItem>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getLibraryItemsFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      filterFetchedItem: this.#filterFetchedLibraryItem.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedLibraryItemToEntity.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getLibraryItemsFetchPromise(params: GetLibraryItemsLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<LibraryItem>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams = {\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    return sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('libraryItems', queryParams),\n      () => api.me.getLibraryItems(queryParams)\n    );\n  }\n\n  #filterFetchedLibraryItem(item: LibraryItem, params: GetLibraryItemsLoopFetchCallbackParams) {\n    switch (params.type) {\n      case 'album':\n        const isCreatedAlbum = item.itemType === 'Album';\n        const isLikedAlbum = item.itemType === 'AlbumLike';\n        if (params.filter === 'created') {\n          return isCreatedAlbum;\n        }\n        else if (params.filter === 'liked') {\n          return isLikedAlbum;\n        }\n        return isCreatedAlbum || isLikedAlbum;\n\n      case 'playlist':\n        const isCreatedPlaylist = item.itemType === 'Playlist';\n        const isLikedPlaylist = item.itemType === 'PlaylistLike' ||\n          (item.itemType === 'SystemPlaylistLike' && !this.#isArtistStation(item));\n        if (params.filter === 'created') {\n          return isCreatedPlaylist;\n        }\n        else if (params.filter === 'liked') {\n          return isLikedPlaylist;\n        }\n        return isCreatedPlaylist || isLikedPlaylist;\n\n      case 'station':\n        return this.#isArtistStation(item);\n    }\n  }\n\n  #isArtistStation(item: LibraryItem) {\n    return item.item instanceof SystemPlaylist && item.item.playlistType === 'artistStation';\n  }\n\n  async #convertFetchedLibraryItemToEntity(item: LibraryItem): Promise<AlbumEntity | PlaylistEntity | null> {\n    return Mapper.mapLibraryItem(item);\n  }\n\n  async getMyProfile() {\n    if (!this.hasAccessToken()) {\n      return null;\n    }\n    const info = await sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('myProfile', {}),\n      () => this.getSoundCloudAPI().me.getProfile()\n    );\n\n    if (info) {\n      return Mapper.mapUser(info);\n    }\n\n    return null;\n  }\n\n  async addToPlayHistory(track: TrackEntity, origin?: TrackOrigin) {\n    if (!this.hasAccessToken() || !track.urn) {\n      return;\n    }\n    const api = this.getSoundCloudAPI();\n    try {\n      let setOrUrn: Album | Playlist | string | null = null;\n      if (origin?.type === 'album') {\n        setOrUrn = new Album({ id: origin.albumId }, api);\n      }\n      else if (origin?.type === 'playlist') {\n        setOrUrn = new Playlist({ id: origin.playlistId }, api);\n      }\n      else if (origin?.type === 'system-playlist') {\n        setOrUrn = origin.urn;\n      }\n      if (setOrUrn) {\n        try {\n          await api.me.addToPlayHistory(track.urn, setOrUrn);\n        }\n        catch (error) {\n          sc.getLogger().error(\n            sc.getErrorMessage(\n              'Failed to add to play history - will retry without track origin:',\n              error, true));\n\n          await this.addToPlayHistory(track);\n        }\n      }\n      else {\n        await api.me.addToPlayHistory(track.urn);\n      }\n    }\n    catch (error) {\n      sc.getLogger().error(sc.getErrorMessage('Failed to add to play history:', error, true));\n    }\n  }\n}\n"]}