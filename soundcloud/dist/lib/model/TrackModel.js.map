{"version":3,"file":"TrackModel.js","sourceRoot":"","sources":["../../../src/lib/model/TrackModel.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;AAEb,uDAAoD;AACpD,4DAAkF;AAClF,6EAAsC;AAEtC,sDAA8B;AAC9B,sEAA8C;AAiB9C,MAAqB,UAAW,SAAQ,mBAAS;IAAjD;;;IA8FA,CAAC;IA5FC,SAAS,CAAC,MAAiC;QACzC,MAAM,QAAQ,GAAG,CAAA,IAAI,CAAC,2CAAkD,CAAA,CAAC;QACzE,MAAM,gBAAgB,GAAG,CAAA,IAAI,CAAC,yCAAgD,CAAA,CAAC;QAE/E,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,cAAc,EAAE,EAAE,GAAG,MAAM,EAAE;YAC7B,eAAe,EAAE,uBAAA,IAAI,gEAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;YACvD,uBAAuB,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,+BAA+B,EAAE,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5D,eAAe,EAAE,uBAAA,IAAI,sEAA6B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC7D,KAAK,EAAE,uBAAA,IAAI,kEAAyB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC/C,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;IA0DD,QAAQ,CAAC,OAAe;QACtB,wFAAwF;QACxF,OAAO,2BAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC3B,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,CAAC,EAC9C,GAAG,EAAE,CAAC,uBAAA,IAAI,qDAAY,MAAhB,IAAI,EAAa,OAAO,CAAC,CAChC,CAAC;IACJ,CAAC;IAUD,eAAe,CAAC,cAAsB;QACpC,OAAO,IAAI,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;IACjE,CAAC;CACF;AA9FD,6BA8FC;2EA3EC,KAAK,4CAAwB,MAAwC;IACnE,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAEpC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mCAAmC,CAAQ,MAAM,CAAC,CAAC;IAC3F,IAAI,oBAAoB,EAAE;QACxB,OAAO,oBAAoB,CAAC;KAC7B;IAED,MAAM,WAAW,GAAwB;QACvC,KAAK,EAAE,4BAAS,CAAC,eAAe;KACjC,CAAC;IACF,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC;QAC3B,MAAM,cAAc,GAAG;YACrB,MAAM,EAAE,CAAC;YACT,GAAG,WAAW;SACf,CAAC;QACF,OAAO,2BAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC3B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,EAClD,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,EAAC,GAAG,WAAW,EAAE,IAAI,EAAE,OAAO,EAAC,CAAC,CACrD,CAAC;KACH;SACI,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;QACpC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,MAAM,cAAc,GAAG;YACrB,MAAM;YACN,GAAG,WAAW;SACf,CAAC;QACF,OAAO,2BAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC3B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,EAClD,GAAG,EAAE,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAC/C,CAAC;KACH;SACI,IAAI,MAAM,CAAC,WAAW,EAAE;QAC3B,MAAM,cAAc,GAAG;YACrB,WAAW,EAAE,IAAI;YACjB,GAAG,WAAW;SACf,CAAC;QACF,OAAO,2BAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAC3B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC,EAClD,GAAG,EAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAC5C,CAAC;KACH;IACD,MAAM,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACxD,CAAC,6FAE4B,IAAW;IACtC,OAAO,gBAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC,qFAEwB,MAAoC;IAC3D,qBAAW,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IACpF,OAAO,MAAM,CAAC;AAChB,CAAC,2BAUD,KAAK,iCAAa,OAAe;IAC/B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAClE,IAAI,SAAS,EAAE;QACb,OAAO,gBAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;KACnC;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["'use strict';\n\nimport { Constants, Track } from 'soundcloud-fetch';\nimport BaseModel, { LoopFetchCallbackParams, LoopFetchResult } from './BaseModel';\nimport sc from '../SoundCloudContext';\nimport TrackEntity from '../entities/TrackEntity';\nimport Mapper from './Mapper';\nimport TrackHelper from '../util/TrackHelper';\n\nexport interface TrackModelGetTracksParams {\n  search?: string;\n  userId?: number;\n  topFeatured?: boolean;\n  pageToken?: string;\n  pageOffset?: number;\n  limit?: number;\n}\n\ninterface GetTracksLoopFetchCallbackParams extends LoopFetchCallbackParams {\n  search?: string;\n  userId?: number;\n  topFeatured?: boolean;\n}\n\nexport default class TrackModel extends BaseModel {\n\n  getTracks(params: TrackModelGetTracksParams) {\n    const getItems = this.commonGetCollectionItemsFromLoopFetchResult<Track>;\n    const getNextPageToken = this.commonGetNextPageTokenFromLoopFetchResult<Track>;\n\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getTracksFetchPromise.bind(this),\n      getItemsFromFetchResult: getItems.bind(this),\n      getNextPageTokenFromFetchResult: getNextPageToken.bind(this),\n      convertToEntity: this.#convertFetchedTrackToEntity.bind(this),\n      onEnd: this.#onGetTracksLoopFetchEnd.bind(this),\n      pageToken: params.pageToken,\n      pageOffset: params.pageOffset,\n      limit: params.limit\n    });\n  }\n\n  async #getTracksFetchPromise(params: GetTracksLoopFetchCallbackParams) {\n    const api = this.getSoundCloudAPI();\n\n    const continuationContents = await this.commonGetLoopFetchResultByPageToken<Track>(params);\n    if (continuationContents) {\n      return continuationContents;\n    }\n\n    const queryParams: Record<string, any> = {\n      limit: Constants.QUERY_MAX_LIMIT\n    };\n    if (params.search) {\n      const q = params.search;\n      queryParams.type = 'track';\n      const cacheKeyParams = {\n        search: q,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('tracks', cacheKeyParams),\n        () => api.search(q, {...queryParams, type: 'track'})\n      );\n    }\n    else if (params.userId !== undefined) {\n      const userId = params.userId;\n      const cacheKeyParams = {\n        userId,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('tracks', cacheKeyParams),\n        () => api.getTracksByUser(userId, queryParams)\n      );\n    }\n    else if (params.topFeatured) {\n      const cacheKeyParams = {\n        topFeatured: true,\n        ...queryParams\n      };\n      return sc.getCache().getOrSet(\n        this.getCacheKeyForFetch('tracks', cacheKeyParams),\n        () => api.getTopFeaturedTracks(queryParams)\n      );\n    }\n    throw Error('Missing or invalid criteria for tracks');\n  }\n\n  #convertFetchedTrackToEntity(data: Track) {\n    return Mapper.mapTrack(data);\n  }\n\n  #onGetTracksLoopFetchEnd(result: LoopFetchResult<TrackEntity>) {\n    TrackHelper.cacheTracks(result.items, this.getCacheKeyForFetch.bind(this, 'track'));\n    return result;\n  }\n\n  getTrack(trackId: number) {\n    // Unlike other resources, tracks are mapped to TrackEntity objects before being cached.\n    return sc.getCache().getOrSet(\n      this.getCacheKeyForFetch('track', { trackId }),\n      () => this.#doGetTrack(trackId)\n    );\n  }\n\n  async #doGetTrack(trackId: number) {\n    const trackData = await this.getSoundCloudAPI().getTrack(trackId);\n    if (trackData) {\n      return Mapper.mapTrack(trackData);\n    }\n    return null;\n  }\n\n  getStreamingUrl(transcodingUrl: string) {\n    return this.getSoundCloudAPI().getStreamingUrl(transcodingUrl);\n  }\n}\n"]}