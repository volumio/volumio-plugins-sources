{"version":3,"file":"PlayController.js","sourceRoot":"","sources":["../../../../src/lib/controller/play/PlayController.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport libQ from 'kew';\n\nimport sc from '../../SoundCloudContext';\nimport Model, { ModelType } from '../../model';\nimport { kewToJSPromise } from '../../util/Misc';\nimport TrackHelper from '../../util/TrackHelper';\nimport { QueueItem } from '../browse/view-handlers/ExplodableViewHandler';\nimport ViewHelper from '../browse/view-handlers/ViewHelper';\nimport { PlaylistView } from '../browse/view-handlers/PlaylistViewHandler';\nimport { AlbumView } from '../browse/view-handlers/AlbumViewHandler';\nimport { UserView } from '../browse/view-handlers/UserViewHandler';\nimport { TrackView } from '../browse/view-handlers/TrackViewHandler';\n\nexport default class PlayController {\n\n  #mpdPlugin: any;\n\n  constructor() {\n    this.#mpdPlugin = sc.getMpdPlugin();\n  }\n\n  /**\n   * Track uri:\n   * soundcloud/track@trackId=...\n   */\n  async clearAddPlayTrack(track: QueueItem) {\n    sc.getLogger().info(`[soundcloud] clearAddPlayTrack: ${track.uri}`);\n\n    const trackView = ViewHelper.getViewsFromUri(track.uri).pop() as TrackView | undefined;\n    if (!trackView || trackView.name !== 'track' || !trackView.trackId) {\n      throw Error(`Invalid track uri: ${track.uri}`);\n    }\n\n    const { trackId, origin } = trackView;\n    const model = Model.getInstance(ModelType.Track);\n\n    const trackData = await model.getTrack(Number(trackId));\n    if (!trackData) {\n      throw Error(`Failed to fetch track: ${track.uri}`);\n    }\n\n    if (trackData.playableState === 'blocked') {\n      sc.toast('warning', sc.getI18n('SOUNDCLOUD_SKIP_BLOCKED_TRACK', track.title));\n      sc.getStateMachine().next();\n      return;\n    }\n    else if (trackData.playableState === 'snipped' && sc.getConfigValue('skipPreviewTracks')) {\n      sc.toast('warning', sc.getI18n('SOUNDCLOUD_SKIP_PREVIEW_TRACK', track.title));\n      sc.getStateMachine().next();\n      return;\n    }\n\n    const transcodingUrl = TrackHelper.getPreferredTranscoding(trackData);\n    if (!transcodingUrl) {\n      throw Error('No transcoding found');\n    }\n\n    const streamingUrl = await model.getStreamingUrl(transcodingUrl);\n    if (!streamingUrl) {\n      throw Error('No stream found');\n    }\n    if (streamingUrl.includes('.128.mp3')) { // 128 kbps mp3\n      track.samplerate = '128 kbps';\n    }\n    else if (streamingUrl.includes('.64.opus')) { // 64 kbps opus\n      track.samplerate = '64 kbps';\n    }\n\n    const safeUri = streamingUrl.replace(/\"/g, '\\\\\"');\n    await this.#doPlay(safeUri, track);\n\n    if (sc.getConfigValue('addPlayedToHistory')) {\n      await Model.getInstance(ModelType.Me).addToPlayHistory(trackData, origin);\n    }\n  }\n\n  #doPlay(streamUrl: string, track: QueueItem) {\n    const mpdPlugin = this.#mpdPlugin;\n\n    return kewToJSPromise(mpdPlugin.sendMpdCommand('stop', [])\n      .then(() => {\n        return mpdPlugin.sendMpdCommand('clear', []);\n      })\n      .then(() => {\n        return mpdPlugin.sendMpdCommand(`addid \"${streamUrl}\"`, []);\n      })\n      .then((addIdResp: { Id: string }) => this.#mpdAddTags(addIdResp, track))\n      .then(() => {\n        sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n        return mpdPlugin.sendMpdCommand('play', []);\n      }));\n  }\n\n  // Returns kew promise!\n  #mpdAddTags(mpdAddIdResponse: { Id: string }, track: QueueItem) {\n    const songId = mpdAddIdResponse?.Id;\n    if (songId !== undefined) {\n      const cmds = [];\n      cmds.push({\n        command: 'addtagid',\n        parameters: [ songId, 'title', this.#stripNewLine(track.title) ]\n      });\n      if (track.album) {\n        cmds.push({\n          command: 'addtagid',\n          parameters: [ songId, 'album', this.#stripNewLine(track.album) ]\n        });\n      }\n      if (track.artist) {\n        cmds.push({\n          command: 'addtagid',\n          parameters: [ songId, 'artist', this.#stripNewLine(track.artist) ]\n        });\n      }\n\n      return this.#mpdPlugin.sendMpdCommandArray(cmds);\n    }\n    return libQ.resolve();\n  }\n\n  // Returns kew promise!\n  stop() {\n    sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.stop();\n  }\n\n  // Returns kew promise!\n  pause() {\n    sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.pause();\n  }\n\n  // Returns kew promise!\n  resume() {\n    sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.resume();\n  }\n\n  // Returns kew promise!\n  seek(position: number) {\n    sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.seek(position);\n  }\n\n  // Returns kew promise!\n  next() {\n    sc.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.next();\n  }\n\n  // Returns kew promise!\n  previous() {\n    sc.getStateMachine().setConsumeUpdateService(undefined);\n    return sc.getStateMachine().previous();\n  }\n\n  #stripNewLine(str: string) {\n    return str.replace(/(\\r\\n|\\n|\\r)/gm, '');\n  }\n\n  async getGotoUri(type: 'album' | 'artist', uri: QueueItem['uri']): Promise<string | null> {\n    const trackView = ViewHelper.getViewsFromUri(uri).pop() as TrackView | undefined;\n    if (trackView && trackView.name === 'track' && trackView.trackId && (type === 'album' || type === 'artist')) {\n      if (type === 'album' && trackView.origin) {\n        const origin = trackView.origin;\n        if (origin.type === 'album') {\n          const albumView: AlbumView = {\n            name: 'albums',\n            albumId: origin.albumId.toString()\n          };\n          return `soundcloud/${ViewHelper.constructUriSegmentFromView(albumView)}`;\n        }\n        else if (origin.type === 'playlist' || origin.type === 'system-playlist') {\n          const playlistView: PlaylistView = {\n            name: 'playlists',\n            playlistId: origin.playlistId.toString()\n          };\n          if (origin.type === 'system-playlist') {\n            playlistView.type = 'system';\n          }\n          return `soundcloud/${ViewHelper.constructUriSegmentFromView(playlistView)}`;\n        }\n      }\n      const track = await Model.getInstance(ModelType.Track).getTrack(Number(trackView.trackId));\n      if (track && track.user?.id !== undefined) {\n        const userView: UserView = {\n          name: 'users',\n          userId: track.user.id.toString()\n        };\n        return `soundcloud/${ViewHelper.constructUriSegmentFromView(userView)}`;\n      }\n\n    }\n    return 'soundcloud';\n  }\n}\n"]}