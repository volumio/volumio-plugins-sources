{"version":3,"file":"ViewHandlerFactory.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ViewHandlerFactory.ts"],"names":[],"mappings":";;;;;AAAA,0EAAkD;AAElD,8EAAsD;AACtD,8EAAsD;AACtD,gFAAwD;AACxD,wEAAgD;AAChD,kFAA0D;AAC1D,0EAAkD;AAClD,wEAAgD;AAEhD,8DAAsC;AAKtC,MAAM,kBAAkB,GAA2C;IACjE,MAAM,EAAE,yBAAe;IACvB,YAAY,EAAE,8BAAoB;IAClC,OAAO,EAAE,yBAAe;IACxB,QAAQ,EAAE,0BAAgB;IAC1B,WAAW,EAAE,6BAAmB;IAChC,QAAQ,EAAE,0BAAgB;IAC1B,OAAO,EAAE,0BAAgB;IACzB,SAAS,EAAE,4BAAkB;IAC7B,SAAS,EAAE,4BAAkB;CAC9B,CAAC;AAEF,MAAqB,kBAAkB;IAErC,MAAM,CAAC,UAAU,CAAiB,GAAW;QAC3C,MAAM,KAAK,GAAG,oBAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,aAAa,GAAG,KAAK,CAAC;QAE5B,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;SAChD;QAED,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;CACF;AAbD,qCAaC","sourcesContent":["import AlbumViewHandler from './AlbumViewHandler';\nimport BaseViewHandler from './BaseViewHandler';\nimport HistoryViewHandler from './HistoryViewHandler';\nimport LibraryViewHandler from './LibraryViewHandler';\nimport PlaylistViewHandler from './PlaylistViewHandler';\nimport RootViewHandler from './RootViewHandler';\nimport SelectionViewHandler from './SelectionViewHandler';\nimport TrackViewHandler from './TrackViewHandler';\nimport UserViewHandler from './UserViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\n\ntype HandlerClass<V extends View, T extends BaseViewHandler<V>> =\n  new (uri: string, currentView: V, previousViews: View[]) => T;\n\nconst VIEW_NAME_TO_CLASS: Record<string, HandlerClass<any, any>> = {\n  'root': RootViewHandler,\n  'selections': SelectionViewHandler,\n  'users': UserViewHandler,\n  'albums': AlbumViewHandler,\n  'playlists': PlaylistViewHandler,\n  'tracks': TrackViewHandler,\n  'track': TrackViewHandler,\n  'history': HistoryViewHandler,\n  'library': LibraryViewHandler\n};\n\nexport default class ViewHandlerFactory {\n\n  static getHandler<V extends View>(uri: string): BaseViewHandler<V> {\n    const views = ViewHelper.getViewsFromUri(uri);\n    const currentView = views.pop();\n    const previousViews = views;\n\n    if (!currentView) {\n      throw Error('Invalid URI: no parseable view.');\n    }\n\n    return new VIEW_NAME_TO_CLASS[currentView.name](uri, currentView, previousViews);\n  }\n}\n"]}