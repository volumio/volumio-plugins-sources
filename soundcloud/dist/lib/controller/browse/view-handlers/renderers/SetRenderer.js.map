{"version":3,"file":"SetRenderer.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/SetRenderer.ts"],"names":[],"mappings":";;;;;AAAA,sFAA+C;AAE/C,kEAAgF;AAEhF,MAA8B,WAAiC,SAAQ,sBAAe;IAEpF,gBAAgB,CAAC,IAAO,EAAE,QAAQ,GAAG,KAAK;QACxC,IAAI,IAAI,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YAC9E,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAqB;YAC/B,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ;YAC3B,KAAK,EAAE,2BAAE,CAAC,OAAO,CAAC,kCAAkC,CAAC;YACrD,QAAQ,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACpD,GAAG,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;SAC/B,CAAC;QAEF,IAAI,QAAQ,EAAE;YACZ,IAAI,SAAS,EAAE,KAAK,CAAC;YACrB,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC9C,SAAS,GAAG,UAAU,CAAC;gBACvB,KAAK,GAAG,GAAG,CAAC;aACb;iBACI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACtD,SAAS,GAAG,SAAS,CAAC;gBACtB,KAAK,GAAG,CAAC,CAAC;aACX;iBACI;gBACH,SAAS,GAAG,IAAI,CAAC;aAClB;YACD,IAAI,SAAS,EAAE;gBACb,MAAM,CAAC,KAAK,GAAG,gBAAgB,SAAS,sCAAsC,KAAK,WAAW,MAAM,CAAC,KAAK,EAAE,CAAC;aAC9G;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,cAAc,CAAC,IAAO;QACpB,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,GAAG;YACf,SAAS,EAAE,YAAY;YACvB,MAAM,EAAE,OAAO;YACf,OAAO,EAAE,IAAI,CAAC,KAAK;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ;YAC7B,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,KAAK,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI;YAChF,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ;YAC/B,UAAU,EAAE,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,iBAAiB,EAAE;SACvD,CAAC;IACJ,CAAC;CAIF;AApDD,8BAoDC","sourcesContent":["import sc from '../../../../SoundCloudContext';\nimport SetEntity from '../../../../entities/SetEntity';\nimport BaseRenderer, { RenderedHeader, RenderedListItem } from './BaseRenderer';\n\nexport default abstract class SetRenderer<T extends SetEntity> extends BaseRenderer<T> {\n\n  renderToListItem(data: T, showIcon = false): RenderedListItem | null {\n    if (data.id === undefined || data.id === null || data.id === '' || !data.title) {\n      return null;\n    }\n    const result: RenderedListItem = {\n      service: 'soundcloud',\n      type: 'folder',\n      title: data.title,\n      artist: data.user?.username,\n      album: sc.getI18n('SOUNDCLOUD_PLAYLIST_PARSER_ALBUM'),\n      albumart: data.thumbnail || this.getSoundCloudIcon(),\n      uri: this.getListItemUri(data)\n    };\n\n    if (showIcon) {\n      let iconClass, scale;\n      if (data.isLiked !== undefined && data.isLiked) {\n        iconClass = 'fa-heart';\n        scale = 0.9;\n      }\n      else if (data.isPublic !== undefined && !data.isPublic) {\n        iconClass = 'fa-lock';\n        scale = 1;\n      }\n      else {\n        iconClass = null;\n      }\n      if (iconClass) {\n        result.title = `<i class='fa ${iconClass}' style='margin-right: 3px; scale: ${scale};'></i> ${result.title}`;\n      }\n    }\n\n    return result;\n  }\n\n  renderToHeader(data: T): RenderedHeader | null {\n    return {\n      'uri': this.uri,\n      'service': 'soundcloud',\n      'type': 'album',\n      'title': data.title,\n      'artist': data.user?.username,\n      'year': data.user?.fullName !== data.user?.username ? data.user?.fullName : null,\n      'duration': data.user?.location,\n      'albumart': data.thumbnail || this.getSoundCloudIcon()\n    };\n  }\n\n  protected abstract getListItemUri(data: T): string;\n  protected abstract getListItemAlbum(data: T): string;\n}\n"]}