{"version":3,"file":"SelectionViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/SelectionViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,mFAA4C;AAC5C,0CAA2C;AAC3C,wEAAgD;AAGhD,2CAA2C;AAQ3C,MAAqB,oBAAqB,SAAQ,yBAA8B;IAE9E,KAAK,CAAC,MAAM;QACV,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QAClD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;YACxE,KAAK,EAAE,IAAI;SACZ,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC;QACrE,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,KAAK,CAAC,2BAA2B,CAAC,CAAC;SAC1C;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,QAAQ,CAAC,CAAC;QACzD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/C,MAAM,KAAK,GAAG,2BAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAChD,MAAM,UAAU,GAAG,MAAM,GAAG,KAAK,CAAC;QAClC,MAAM,KAAK,GAAG,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,IAAI,EAAE,CAAC;QAC/D,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;YAClE,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,QAAQ,EAAE;gBACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACvB;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QACP,IAAI,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE;YACvC,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YACpE,IAAI,WAAW,EAAE;gBACf,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,CAAC;aACzD;SACF;QACD,MAAM,IAAI,GAAiB;YACzB,KAAK,EAAE,SAAS,EAAE,KAAK,IAAI,EAAE;YAC7B,kBAAkB,EAAE,CAAE,MAAM,EAAE,MAAM,CAAE;YACtC,KAAK,EAAE,SAAS;SACjB,CAAC;QAEF,OAAO;YACL,UAAU,EAAE;gBACV,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;gBAClB,KAAK,EAAE,CAAE,IAAI,CAAE;aAChB;SACF,CAAC;IACJ,CAAC;CACF;AA1CD,uCA0CC","sourcesContent":["import sc from '../../../SoundCloudContext';\nimport { ModelType } from '../../../model';\nimport BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport { RendererType } from './renderers';\nimport { RenderedListItem } from './renderers/BaseRenderer';\n\nexport interface SelectionView extends View {\n  name: 'selections';\n  selectionId?: string;\n}\n\nexport default class SelectionViewHandler extends BaseViewHandler<SelectionView> {\n\n  async browse(): Promise<RenderedPage> {\n    const { selectionId, pageRef } = this.currentView;\n    const selections = await this.getModel(ModelType.Selection).getSelections({\n      mixed: true\n    });\n    const selection = selections.items.find((s) => s.id === selectionId);\n    if (!selection) {\n      throw Error('Failed to fetch selection');\n    }\n    const renderer = this.getRenderer(RendererType.Playlist);\n    const offset = Number(pageRef?.pageToken) || 0;\n    const limit = sc.getConfigValue('itemsPerPage');\n    const nextOffset = offset + limit;\n    const slice = selection?.items.slice(offset, nextOffset) || [];\n    const listItems = slice.reduce<RenderedListItem[]>((result, item) => {\n      const rendered = renderer.renderToListItem(item);\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n    if (nextOffset < selection.items.length) {\n      const nextPageRef = this.constructPageRef(nextOffset.toString(), 0);\n      if (nextPageRef) {\n        listItems.push(this.constructNextPageItem(nextPageRef));\n      }\n    }\n    const list: RenderedList = {\n      title: selection?.title || '',\n      availableListViews: [ 'list', 'grid' ],\n      items: listItems\n    };\n\n    return {\n      navigation: {\n        prev: { uri: '/' },\n        lists: [ list ]\n      }\n    };\n  }\n}\n"]}