{"version":3,"file":"AlbumViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/AlbumViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mFAA4C;AAE5C,0CAA2C;AAG3C,sEAAwF;AAExF,2CAA2C;AAQ3C,MAAqB,gBAAiB,SAAQ,wBAA8C;IAA5F;;;IA6DA,CAAC;IA3DW,gBAAgB;QACxB,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAES,MAAM,CAAC,EAAU;QACzB,OAAO,uBAAA,IAAI,+DAAU,MAAd,IAAI,EAAW,EAAE,CAAC,CAAC;IAC5B,CAAC;IAES,OAAO,CAAC,WAAwC;QACxD,OAAO,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC;IAES,gBAAgB;QACxB,OAAO,2BAAE,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;IACpD,CAAC;IAES,cAAc;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAES,iBAAiB;QACzB,OAAO,2BAAE,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;IACnD,CAAC;IAES,cAAc,CAAC,GAAgB;QACvC,IAAI,GAAG,CAAC,EAAE,EAAE;YACV,OAAO;gBACL,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,GAAG,CAAC,EAAE;aAChB,CAAC;SACH;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CA2BF;AA7DD,mCA6DC;0EAzBC,KAAK,qCAAW,OAAe;IAC7B,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;IACrC,MAAM,SAAS,GAAG,OAAO,EAAE,SAAS,CAAC;IACrC,MAAM,aAAa,GAAG,2BAAE,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAC;IAEjE,MAAM,WAAW,GAA6B,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IACnE,IAAI,MAAM,CAAC,SAAS,CAAC,EAAE;QACrB,WAAW,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;KAC9C;IACD,IAAI,CAAC,aAAa,EAAE;QAClB,WAAW,CAAC,WAAW,GAAG,2BAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;KAC7D;IAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAElF,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC;KACtC;IAED,OAAO;QACL,GAAG,EAAE,KAAK;QACV,YAAY,EAAE,WAAW,CAAC,YAAY;QACtC,WAAW,EAAE,WAAW,CAAC,WAAW;KACrC,CAAC;AACJ,CAAC","sourcesContent":["import sc from '../../../SoundCloudContext';\nimport AlbumEntity from '../../../entities/AlbumEntity';\nimport { ModelType } from '../../../model';\nimport { AlbumModelGetAlbumParams } from '../../../model/AlbumModel';\nimport { LoopFetchResult } from '../../../model/BaseModel';\nimport SetViewHandler, { SetView, SetViewHandlerGetSetsParams } from './SetViewHandler';\nimport { TrackOrigin } from './TrackViewHandler';\nimport { RendererType } from './renderers';\nimport BaseRenderer from './renderers/BaseRenderer';\n\nexport interface AlbumView extends SetView {\n  name: 'albums';\n  albumId?: string;\n}\n\nexport default class AlbumViewHandler extends SetViewHandler<AlbumView, number, AlbumEntity> {\n\n  protected getSetIdFromView(): number | null | undefined {\n    return Number(this.currentView.albumId);\n  }\n\n  protected getSet(id: number): Promise<{ set: AlbumEntity; tracksOffset?: number; tracksLimit?: number; }> {\n    return this.#getAlbum(id);\n  }\n\n  protected getSets(modelParams: SetViewHandlerGetSetsParams): Promise<LoopFetchResult<AlbumEntity>> {\n    return this.getModel(ModelType.Album).getAlbums(modelParams);\n  }\n\n  protected getSetsListTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_LIST_TITLE_ALBUMS');\n  }\n\n  protected getSetRenderer(): BaseRenderer<AlbumEntity, AlbumEntity> {\n    return this.getRenderer(RendererType.Album);\n  }\n\n  protected getVisitLinkTitle(): string {\n    return sc.getI18n('SOUNDCLOUD_VISIT_LINK_ALBUM');\n  }\n\n  protected getTrackOrigin(set: AlbumEntity): TrackOrigin | null {\n    if (set.id) {\n      return {\n        type: 'album',\n        albumId: set.id\n      };\n    }\n    return null;\n  }\n\n  async #getAlbum(albumId: number) {\n    const { pageRef } = this.currentView;\n    const pageToken = pageRef?.pageToken;\n    const loadAllTracks = sc.getConfigValue('loadFullPlaylistAlbum');\n\n    const modelParams: AlbumModelGetAlbumParams = { loadTracks: true };\n    if (Number(pageToken)) {\n      modelParams.tracksOffset = Number(pageToken);\n    }\n    if (!loadAllTracks) {\n      modelParams.tracksLimit = sc.getConfigValue('itemsPerPage');\n    }\n\n    const album = await this.getModel(ModelType.Album).getAlbum(albumId, modelParams);\n\n    if (!album) {\n      throw Error('Failed to fetch album');\n    }\n\n    return {\n      set: album,\n      tracksOffset: modelParams.tracksOffset,\n      tracksLimit: modelParams.tracksLimit\n    };\n  }\n}\n"]}