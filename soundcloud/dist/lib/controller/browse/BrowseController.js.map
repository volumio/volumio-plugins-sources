{"version":3,"file":"BrowseController.js","sourceRoot":"","sources":["../../../../src/lib/controller/browse/BrowseController.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,gFAAyC;AAKzC,4FAAoE;AAEpE,MAAqB,gBAAgB;IAArC;;IAsDA,CAAC;IApDC;;;;;;;;;;OAUG;IACH,KAAK,CAAC,SAAS,CAAC,GAAW;QACzB,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,2BAA2B,GAAG,EAAE,CAAC,CAAC;QAEtD,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QACtC,IAAI;YACF,OAAO,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;SAC/B;QACD,OAAO,KAAU,EAAE;YACjB,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,2BAAE,CAAC,eAAe,CAAC,+BAA+B,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YACvF;;;eAGG;YACH,2BAAE,CAAC,KAAK,CAAC,OAAO,EAAE,2BAAE,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;YACxD,MAAM,KAAK,CAAC;SACb;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,UAAU,CAAC,GAAW;QAC1B,2BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;QAEvD,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QACtC,IAAI;YACF,OAAO,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;SAChC;QACD,OAAO,KAAU,EAAE;YACjB,2BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,2BAAE,CAAC,eAAe,CAAC,gCAAgC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;YACxF,MAAM,KAAK,CAAC;SACb;IACH,CAAC;CAKF;AAtDD,mCAsDC;kHAH6B,GAAW;IACrC,OAAO,4BAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5C,CAAC","sourcesContent":["import sc from '../../SoundCloudContext';\nimport BaseViewHandler from './view-handlers/BaseViewHandler';\nimport { QueueItem } from './view-handlers/ExplodableViewHandler';\nimport View from './view-handlers/View';\nimport { RenderedPage } from './view-handlers/ViewHandler';\nimport ViewHandlerFactory from './view-handlers/ViewHandlerFactory';\n\nexport default class BrowseController {\n\n  /*\n   * `uri` follows a hierarchical view structure, starting with 'soundcloud'.\n   * - If nothing follows 'soundcloud', the view would be 'root' (show root items)\n   *\n   * After 'soundcloud', the uri consists of segments representing the following views:\n   * - selections[@selectionId=...][@pageRef=...][@prevPageRefs=...]\n   * - users[@userId=...|@search=...][@title=...][@pageRef=...][@prevPageRefs=...]\n   * - playlists[@playlistId=...[@type=...]|@userId=...|@search=...][@title=...][@pageRef=...][@prevPageRefs=...]\n   * - albums[@albumId=...|@userId=...|@search=...][@title=...][@pageRef=...][@prevPageRefs=...]\n   * - tracks[@userId=...|@search=...|@topFeatured=1][@title=...][@pageRef=...][@prevPageRefs=...]\n   */\n  async browseUri(uri: string): Promise<RenderedPage> {\n    sc.getLogger().info(`[soundcloud] browseUri: ${uri}`);\n\n    const handler = this.#getHandler(uri);\n    try {\n      return await handler.browse();\n    }\n    catch (error: any) {\n      sc.getLogger().error(sc.getErrorMessage('[soundcloud] browseUri error:', error, true));\n      /**\n       * Toast error message despite chance it might not show up because Volumio\n       * pushes its generic 'No Results' toast which might overlay this one.\n       */\n      sc.toast('error', sc.getErrorMessage('', error, false));\n      throw error;\n    }\n  }\n\n  /**\n   * Explodable uris:\n   * - track[@trackId=...]\n   * - playlists[@playlistId=...]\n   * - albums[@albumId=...]\n   * - users[@userId=...]\n   */\n  async explodeUri(uri: string): Promise<QueueItem[]> {\n    sc.getLogger().info(`[soundcloud] explodeUri: ${uri}`);\n\n    const handler = this.#getHandler(uri);\n    try {\n      return await handler.explode();\n    }\n    catch (error: any) {\n      sc.getLogger().error(sc.getErrorMessage('[soundcloud] explodeUri error:', error, true));\n      throw error;\n    }\n  }\n\n  #getHandler<V extends View>(uri: string): BaseViewHandler<V> {\n    return ViewHandlerFactory.getHandler(uri);\n  }\n}\n"]}