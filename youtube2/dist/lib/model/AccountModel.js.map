{"version":3,"file":"AccountModel.js","sourceRoot":"","sources":["../../../src/lib/model/AccountModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,6DAAqD;AACrD,gDAAiD;AACjD,2CAAwC;AACxC,oFAA4D;AAC5D,kCAAuC;AACvC,6DAA6D;AAE7D,MAAqB,YAAa,SAAQ,qBAAS;IAAnD;;;IA6BA,CAAC;IA3BC,KAAK,CAAC,OAAO;QACX,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAChD,MAAM,OAAO,GAAG,MAAM,IAAA,0CAAqB,EAAC,SAAS,CAAC,CAAC;QACvD,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,6DAAgB,MAApB,IAAI,CAAkB,CAAC;YAC7C,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;YACnC,CAAC;QACH,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CAiBF;wEAfC,KAAK;IACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC3C,MAAM,KAAK,GAAG,IAAA,mBAAY,EAAC,IAAI,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E,IAAI,KAAK,EAAE,CAAC;QACV,MAAM,IAAI,GAAG,IAAI,0BAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,+BAAqB,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,uBAAY,CAAC,MAAM,CAAC,CAAC;QACzF,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7D,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,IAAI;gBAChB,QAAQ;aACT,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;kBA5BkB,YAAY","sourcesContent":["import { Misc as YTMisc } from 'volumio-youtubei.js';\nimport { EndpointType } from '../types/Endpoint';\nimport { BaseModel } from './BaseModel';\nimport InnertubeResultParser from './InnertubeResultParser';\nimport { findInObject } from '../util';\nimport { getAccountInitialInfo } from './AccountModelHelper';\n\nexport default class AccountModel extends BaseModel {\n\n  async getInfo() {\n    const { innertube } = await this.getInnertube();\n    const account = await getAccountInitialInfo(innertube);\n    if (account.isSignedIn) {\n      const channel = await this.#getChannelInfo();\n      if (channel) {\n        account.active.channel = channel;\n      }\n    }\n    return account;\n  }\n\n  async #getChannelInfo() {\n    const menu = await this.fetchAccountMenu();\n    const title = findInObject(menu, (key) => key === 'manageAccountTitle')[0];\n    if (title) {\n      const text = new YTMisc.Text(title);\n      const endpoint = InnertubeResultParser.parseEndpoint(text.endpoint, EndpointType.Browse);\n      if (text.text && endpoint?.payload.browseId.startsWith('UC')) {\n        return {\n          title: text.text,\n          endpoint\n        };\n      }\n    }\n    return null;\n  }\n}\n"]}