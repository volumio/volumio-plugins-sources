{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/model/index.ts"],"names":[],"mappings":";;;;;;AAAA,kEAA0C;AAC1C,gEAAwC;AACxC,oEAA4C;AAC5C,oEAA4C;AAC5C,4DAAoC;AACpC,gEAAwC;AACxC,8DAAsC;AAEtC,IAAY,SAQX;AARD,WAAY,SAAS;IACnB,gCAAmB,CAAA;IACnB,8BAAiB,CAAA;IACjB,kCAAqB,CAAA;IACrB,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;IACjB,4BAAe,CAAA;IACf,0BAAa,CAAA;AACf,CAAC,EARW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAQpB;AAWD,MAAM,mBAAmB,GAA2B;IAClD,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,sBAAY;IACjC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,qBAAW;IAC/B,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,qBAAW;IAC/B,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,oBAAU;IAC7B,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAS;CAC5B,CAAC;AAEF,MAAqB,KAAK;IAExB,MAAM,CAAC,WAAW,CAAsB,IAAO;QAC7C,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE;YAC7B,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;SACxC;QACD,MAAM,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;IACvD,CAAC;CACF;AARD,wBAQC","sourcesContent":["import AccountModel from './AccountModel';\nimport ConfigModel from './ConfigModel';\nimport EndpointModel from './EndpointModel';\nimport PlaylistModel from './PlaylistModel';\nimport RootModel from './RootModel';\nimport SearchModel from './SearchModel';\nimport VideoModel from './VideoModel';\n\nexport enum ModelType {\n  Account = 'Account',\n  Config = 'Config',\n  Endpoint = 'Endpoint',\n  Playlist = 'Playlist',\n  Search = 'Search',\n  Video = 'Video',\n  Root = 'Root'\n}\n\nexport type ModelOf<T extends ModelType> =\n  T extends ModelType.Account ? AccountModel :\n  T extends ModelType.Config ? ConfigModel :\n  T extends ModelType.Endpoint ? EndpointModel :\n  T extends ModelType.Playlist ? PlaylistModel :\n  T extends ModelType.Search ? SearchModel :\n  T extends ModelType.Video ? VideoModel :\n  T extends ModelType.Root ? RootModel : never;\n\nconst MODEL_TYPE_TO_CLASS: Record<ModelType, any> = {\n  [ModelType.Account]: AccountModel,\n  [ModelType.Config]: ConfigModel,\n  [ModelType.Endpoint]: EndpointModel,\n  [ModelType.Playlist]: PlaylistModel,\n  [ModelType.Search]: SearchModel,\n  [ModelType.Video]: VideoModel,\n  [ModelType.Root]: RootModel\n};\n\nexport default class Model {\n\n  static getInstance<T extends ModelType>(type: T): ModelOf<T> {\n    if (MODEL_TYPE_TO_CLASS[type]) {\n      return new MODEL_TYPE_TO_CLASS[type]();\n    }\n    throw Error(`Model not found for type ${ModelType}`);\n  }\n}\n"]}