{"version":3,"file":"RootViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/RootViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,+EAA2C;AAC3C,0CAA2C;AAC3C,qFAA6D;AAG7D,6CAAgD;AAEhD,wEAA8D;AAO9D,MAAqB,eAAgB,SAAQ,yBAAyB;IAE1D,kBAAkB;QAC1B,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,MAAM;QACV,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;QACpC,IAAI,MAAM,CAAC,UAAU,EAAE,KAAK,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClE,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,yBAAG,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;SAClE;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAES,KAAK,CAAC,WAAW;QACzB,MAAM,WAAW,GAAG,yBAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,QAAQ,GAAG,MAAM,SAAS,CAAC,WAAW,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAE5D,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,GAAG;gBACT,QAAQ,EAAE,EAA2B;aACvB,CAAC;SAClB;QACD,oDAAoD;aAC/C,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7D,QAAQ,CAAC,QAAQ,GAAG,EAAE,CAAC;SACxB;QAED,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,yBAAe,CAAC,WAAW,EAAE,CAAC;QACrD,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,KAAK,iBAAU,CAAC,QAAQ,EAAE;YACnD,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,OAAO,EAAE,CAAC;YAC7C,IAAI,OAAO,EAAE,OAAO,EAAE;gBACpB,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;oBACxB,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,cAAc;4BACpB,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK;4BAC5B,SAAS,EAAE,OAAO,CAAC,KAAK;4BACxB,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ;yBACP;qBAC9B;iBACF,CAAC,CAAC;aACJ;SACF;QAED,IAAI,WAAW,KAAK,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5D,mCAAmC;YACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/D,QAAQ,CAAC,QAAQ,GAAG;gBAClB;oBACE,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACvB,KAAK,EAAE,QAAQ;iBAChB;aACF,CAAC;SACH;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAES,qBAAqB;QAC7B,MAAM,WAAW,GAAG,yBAAG,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAC1D,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC,CAAC,CAAC,CAAE,MAAM,CAAE,CAAC;IACpE,CAAC;CACF;AAlED,kCAkEC","sourcesContent":["import yt2 from '../../../YouTube2Context';\nimport { ModelType } from '../../../model';\nimport InnertubeLoader from '../../../model/InnertubeLoader';\nimport { ContentItem, PageElement } from '../../../types';\nimport { PageContent } from '../../../types/Content';\nimport { AuthStatus } from '../../../util/Auth';\nimport { ExplodedTrackInfo } from './ExplodableViewHandler';\nimport FeedViewHandler, { FeedView } from './FeedViewHandler';\nimport { RenderedPage } from './ViewHandler';\n\nexport interface RootView extends FeedView {\n  name: 'root';\n}\n\nexport default class RootViewHandler extends FeedViewHandler<RootView> {\n\n  protected getTracksOnExplode(): Promise<ExplodedTrackInfo | ExplodedTrackInfo[]> {\n    throw Error('Operation not supported');\n  }\n\n  async browse(): Promise<RenderedPage> {\n    const result = await super.browse();\n    if (result.navigation?.lists && result.navigation.lists.length > 0) {\n      result.navigation.lists[0].title = yt2.getI18n('YOUTUBE2_TITLE');\n    }\n    return result;\n  }\n\n  protected async getContents(): Promise<PageContent | null> {\n    const contentType = yt2.getConfigValue('rootContentType');\n    const rootModel = this.getModel(ModelType.Root);\n    let contents = await rootModel.getContents({ contentType });\n\n    if (!contents) {\n      contents = {\n        sections: [] as PageElement.Section[]\n      } as PageContent;\n    }\n    // We should never come to this, but just in case...\n    else if (!contents.sections || contents.sections.length === 0) {\n      contents.sections = [];\n    }\n\n    const { auth } = await InnertubeLoader.getInstance();\n    if (auth.getStatus().status === AuthStatus.SignedIn) {\n      const accountModel = this.getModel(ModelType.Account);\n      const account = await accountModel.getInfo();\n      if (account?.channel) {\n        contents.sections.unshift({\n          type: 'section',\n          items: [\n            {\n              type: 'endpointLink',\n              title: account.channel.title,\n              thumbnail: account.photo,\n              endpoint: account.channel.endpoint\n            } as ContentItem.EndpointLink\n          ]\n        });\n      }\n    }\n\n    if (contentType === 'simple' && contents.sections.length > 1) {\n      // Place all items into one section\n      const allItems = this.findAllItemsInSection(contents.sections);\n      contents.sections = [\n        {\n          ...contents.sections[0],\n          items: allItems\n        }\n      ];\n    }\n\n    return contents;\n  }\n\n  protected getAvailableListViews(): ('list' | 'grid')[] {\n    const contentType = yt2.getConfigValue('rootContentType');\n    return contentType === 'simple' ? [ 'grid', 'list' ] : [ 'list' ];\n  }\n}\n"]}