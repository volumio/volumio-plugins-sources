{"version":3,"file":"OptionValueRenderer.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/OptionValueRenderer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,yDAA0D;AAE1D,+DAAuC;AACvC,kEAAgE;AAEhE,MAAM,cAAc,GAAG,CAAE,uBAAY,CAAC,MAAM;IAC1C,uBAAY,CAAC,MAAM;IACnB,uBAAY,CAAC,kBAAkB;IAC/B,uBAAY,CAAC,kBAAkB,CAAE,CAAC;AAMpC,MAAqB,mBAAoB,SAAQ,sBAAmD;IAApG;;;QAEE,+CAAiB;QACjB,+CAAiB;IA2DnB,CAAC;IAzDC,gBAAgB,CAAC,IAA2C,EAAE,IAAyC;QACrG,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,MAAM,OAAO,GAAG,uBAAA,IAAI,uEAAY,MAAhB,IAAI,CAAc,CAAC;QACnC,MAAM,OAAO,GAAG,uBAAA,IAAI,uEAAY,MAAhB,IAAI,CAAc,CAAC;QAEnC,IAAI,QAAgB,CAAC;QACrB,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACtE,IAAI,UAAgB,CAAC;YACrB,IAAI,IAAI,CAAC,cAAc,EAAE;gBACvB,UAAU,GAAG,oBAAU,CAAC,qBAAqB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACpE;iBACI;gBACH,UAAU,GAAG;oBACX,IAAI,EAAE,SAAS;iBAChB,CAAC;aACH;YACD,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAEpC,IAAI,IAAI,EAAE,cAAc,EAAE;gBACxB,KAAK,MAAM,CAAE,GAAG,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;oBAChE,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBACzB;aACF;YAED,QAAQ,GAAG,GAAG,OAAO,IAAI,oBAAU,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE,CAAC;SAC/E;aACI,IAAI,IAAI,CAAC,QAAQ,EAAE;YACtB,QAAQ,GAAG,OAAO,CAAC;SACpB;aACI;YACH,QAAQ,GAAG,OAAO,CAAC;SACpB;QAED,OAAO;YACL,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,IAAI,CAAC,IAAI;YAChB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI;YAC1C,GAAG,EAAE,QAAQ;SACd,CAAC;IACJ,CAAC;CAiBF;AA9DD,sCA8DC;;IAdG,IAAI,CAAC,uBAAA,IAAI,oCAAS,EAAE;QAClB,MAAM,YAAY,GAAG,CAAE,GAAG,IAAI,CAAC,aAAa,CAAE,CAAC;QAC/C,YAAY,CAAC,GAAG,EAAE,CAAC;QACnB,uBAAA,IAAI,gCAAY,oBAAU,CAAC,qBAAqB,CAAC,YAAY,CAAC,IAAI,UAAU,MAAA,CAAC;KAC9E;IACD,OAAO,uBAAA,IAAI,oCAAS,CAAC;AACvB,CAAC;IAGC,IAAI,CAAC,uBAAA,IAAI,oCAAS,EAAE;QAClB,uBAAA,IAAI,gCAAY,oBAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,MAAA,CAAC;KACnF;IACD,OAAO,uBAAA,IAAI,oCAAS,CAAC;AACvB,CAAC","sourcesContent":["import { PageElement } from '../../../../types';\nimport { EndpointType } from '../../../../types/Endpoint';\nimport View from '../View';\nimport ViewHelper from '../ViewHelper';\nimport BaseRenderer, { RenderedListItem } from './BaseRenderer';\n\nconst ENDPOINT_TYPES = [ EndpointType.Browse,\n  EndpointType.Search,\n  EndpointType.BrowseContinuation,\n  EndpointType.SearchContinuation ];\n\ninterface OptionValueRendererListItemOptions {\n  extraUriParams: Record<string, any>;\n}\n\nexport default class OptionValueRenderer extends BaseRenderer<PageElement.Option['optionValues'][0]> {\n\n  #baseUri: string;\n  #prevUri: string;\n\n  renderToListItem(data: PageElement.Option['optionValues'][0], opts?: OptionValueRendererListItemOptions): RenderedListItem | null {\n    const view = this.currentView;\n    const baseUri = this.#getBaseUri();\n    const prevUri = this.#getPrevUri();\n\n    let valueUri: string;\n    if (data.endpoint?.type && ENDPOINT_TYPES.includes(data.endpoint.type)) {\n      let targetView: View;\n      if (view.genericViewUri) {\n        targetView = ViewHelper.getViewFromUriSegment(view.genericViewUri);\n      }\n      else {\n        targetView = {\n          name: 'generic'\n        };\n      }\n      targetView.endpoint = data.endpoint;\n\n      if (opts?.extraUriParams) {\n        for (const [ key, value ] of Object.entries(opts.extraUriParams)) {\n          targetView[key] = value;\n        }\n      }\n\n      valueUri = `${baseUri}/${ViewHelper.constructUriSegmentFromView(targetView)}`;\n    }\n    else if (data.selected) {\n      valueUri = prevUri;\n    }\n    else {\n      valueUri = baseUri;\n    }\n\n    return {\n      service: 'youtube2',\n      type: 'item-no-menu',\n      title: data.text,\n      icon: data.selected ? 'fa fa-check' : 'fa',\n      uri: valueUri\n    };\n  }\n\n  #getBaseUri() {\n    if (!this.#baseUri) {\n      const baseUriViews = [ ...this.previousViews ];\n      baseUriViews.pop();\n      this.#baseUri = ViewHelper.constructUriFromViews(baseUriViews) || 'youtube2';\n    }\n    return this.#baseUri;\n  }\n\n  #getPrevUri() {\n    if (!this.#prevUri) {\n      this.#prevUri = ViewHelper.constructPrevUri(this.currentView, this.previousViews);\n    }\n    return this.#prevUri;\n  }\n}\n"]}