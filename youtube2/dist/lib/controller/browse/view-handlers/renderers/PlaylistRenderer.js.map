{"version":3,"file":"PlaylistRenderer.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/PlaylistRenderer.ts"],"names":[],"mappings":";;;;;AAGA,+DAAuC;AACvC,kEAAgF;AAEhF,MAAqB,gBAAiB,SAAQ,sBAA8D;IAE1G,gBAAgB,CAAC,IAA0B;QACzC,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE;YACrB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACjC;QACD,MAAM,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAErC,MAAM,SAAS,GAAQ;YACrB,KAAK,EAAE,IAAI,CAAC,QAAQ;SACrB,CAAC;QAEF,IAAI,IAAI,GAAuB,QAAQ,CAAC;QAExC,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC;SACxC;aACI;YACH,4FAA4F;YAC5F,uDAAuD;YACvD,IAAI,GAAG,OAAO,CAAC;SAChB;QAED,MAAM,UAAU,GAAiB;YAC/B,IAAI,EAAE,UAAU;YAChB,SAAS;SACV,CAAC;QAEF,OAAO;YACL,OAAO,EAAE,UAAU;YACnB,IAAI;YACJ,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,MAAM;YACN,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAU,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE;SACzE,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,IAAgC;QAC7C,MAAM,UAAU,GAAgB;YAC9B,IAAI,EAAE,SAAS;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;QACF,OAAO;YACL,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,UAAU;YAChB,GAAG,EAAE,YAAY,oBAAU,CAAC,2BAA2B,CAAC,UAAU,CAAC,EAAE;YACrE,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI;YACzB,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;YACrC,QAAQ,EAAE,IAAI,CAAC,SAAS;SACzB,CAAC;IACJ,CAAC;CACF;AAzDD,mCAyDC","sourcesContent":["import { ContentItem, PageElement } from '../../../../types';\nimport { GenericView } from '../GenericViewHandler';\nimport { PlaylistView } from '../PlaylistViewHandler';\nimport ViewHelper from '../ViewHelper';\nimport BaseRenderer, { RenderedHeader, RenderedListItem } from './BaseRenderer';\n\nexport default class PlaylistRenderer extends BaseRenderer<ContentItem.Playlist, PageElement.PlaylistHeader> {\n\n  renderToListItem(data: ContentItem.Playlist): RenderedListItem | null {\n    const subtitles: string[] = [];\n    if (data.author?.name) {\n      subtitles.push(data.author.name);\n    }\n    if (data.videoCount) {\n      subtitles.push(data.videoCount);\n    }\n    const artist = subtitles.join(' • ');\n\n    const endpoints: any = {\n      watch: data.endpoint\n    };\n\n    let type: 'folder' | 'album' = 'folder';\n\n    if (data.browseEndpoint) {\n      endpoints.browse = data.browseEndpoint;\n    }\n    else {\n      // `CompactStations` converted to playlists do not have browseEndpoints and are to be played\n      // Directly when clicked, i.e. they are not browseable.\n      type = 'album';\n    }\n\n    const targetView: PlaylistView = {\n      name: 'playlist',\n      endpoints\n    };\n\n    return {\n      service: 'youtube2',\n      type,\n      title: data.title,\n      albumart: data.thumbnail,\n      artist,\n      uri: `${this.uri}/${ViewHelper.constructUriSegmentFromView(targetView)}`\n    };\n  }\n\n  renderToHeader(data: PageElement.PlaylistHeader): RenderedHeader | null {\n    const targetView: GenericView = {\n      name: 'generic',\n      endpoint: data.endpoint\n    };\n    return {\n      service: 'youtube2',\n      type: 'playlist',\n      uri: `youtube2/${ViewHelper.constructUriSegmentFromView(targetView)}`,\n      title: data.title,\n      artist: data.author?.name,\n      duration: data.subtitles?.join(' • '),\n      albumart: data.thumbnail\n    };\n  }\n}\n"]}