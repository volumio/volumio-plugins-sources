{"version":3,"file":"ExplodeHelper.js","sourceRoot":"","sources":["../../../src/lib/util/ExplodeHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import yt2 from '../YouTube2Context';\nimport { ExplodedTrackInfo, QueueItem } from '../controller/browse/view-handlers/ExplodableViewHandler';\nimport { GenericView } from '../controller/browse/view-handlers/GenericViewHandler';\nimport { VideoView } from '../controller/browse/view-handlers/VideoViewHandler';\nimport ViewHelper from '../controller/browse/view-handlers/ViewHelper';\nimport Model, { ModelType } from '../model';\nimport { ContentItem } from '../types';\nimport { EndpointType } from '../types/Endpoint';\n\nexport default class ExplodeHelper {\n\n  // Creates a bundle that contains the data needed by explode() to\n  // Generate the final exploded item.\n  static getExplodedTrackInfoFromVideo(data: ContentItem.Video): ExplodedTrackInfo {\n    return {\n      title: data.title,\n      artist: data.author?.name || data.viewCount || '',\n      albumart: data.thumbnail || '',\n      endpoint: data.endpoint\n    };\n  }\n\n  static validateExplodeUri(uri: string) {\n    // Current view\n    const view = ViewHelper.getViewsFromUri(uri).pop();\n\n    if (!view) {\n      return false;\n    }\n\n    /**\n     * Pre v1.0: required param does not exist\n     * v1.0.x: required param is not an object (because it is not converted when\n     *           constructing View from URI)\n     */\n    switch (view.name) {\n      case 'video':\n        return view.explodeTrackData && typeof view.explodeTrackData === 'object';\n\n      case 'playlist':\n        return (view.endpoint && typeof view.endpoint === 'object') ||\n          (view.endpoints && typeof view.endpoints === 'object');\n\n      case 'generic':\n        return view.endpoint && typeof view.endpoint === 'object';\n\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Converts a legacy URI (pre v1.1) to one that current version can explode.\n   * @param {*} uri\n   * @returns Converted URI or `null` on failure\n   */\n  static async convertLegacyExplodeUri(uri: string) {\n    // Current view\n    const view = ViewHelper.getViewsFromUri(uri).pop();\n\n    if (!view) {\n      return null;\n    }\n\n    let targetView: VideoView | GenericView | null = null;\n\n    // Conversion from pre v1.0\n    if (view.name === 'video' && view.videoId) {\n      const model = Model.getInstance(ModelType.Video);\n      const playbackInfo = await model.getPlaybackInfo(view.videoId);\n      const videoInfo: any = { ...playbackInfo };\n\n      if (playbackInfo) {\n        videoInfo.endpoint = {\n          type: 'watch',\n          payload: {\n            videoId: view.videoId\n          }\n        };\n        if (view.fromPlaylistId) {\n          videoInfo.endpoint.playlistId = view.fromPlaylistId;\n        }\n\n        targetView = {\n          name: 'video',\n          explodeTrackData: this.getExplodedTrackInfoFromVideo(videoInfo)\n        };\n      }\n    }\n    else if (view.name === 'videos' && view.playlistId) {\n      targetView = {\n        name: 'generic',\n        endpoint: {\n          type: EndpointType.Watch,\n          payload: {\n            playlistId: view.playlistId\n          }\n        }\n      };\n    }\n    else if (view.name === 'playlists' && view.channelId) {\n      targetView = {\n        name: 'generic',\n        endpoint: {\n          type: EndpointType.Browse,\n          payload: {\n            browseId: view.channelId\n          }\n        }\n      };\n    }\n    // Conversion from v1.0.x\n    else if (view.name === 'video' && view.explodeTrackData && typeof view.explodeTrackData !== 'object') {\n      targetView = {\n        name: 'video',\n        explodeTrackData: JSON.parse(view.explodeTrackData)\n      };\n    }\n    else if (view.name === 'generic' && view.endpoint && typeof view.endpoint !== 'object') {\n      targetView = {\n        name: 'generic',\n        endpoint: JSON.parse(view.endpoint)\n      };\n    }\n\n    if (targetView) {\n      return ViewHelper.constructUriFromViews([ {name: 'root'}, targetView ]);\n    }\n\n    return null;\n  }\n\n  static createQueueItemFromExplodedTrackInfo(info: ExplodedTrackInfo): QueueItem {\n    return {\n      'service': 'youtube2',\n      'uri': this.#getUriFromExplodedTrackInfo(info),\n      'albumart': info.albumart,\n      'artist': info.artist,\n      'album': yt2.getI18n('YOUTUBE2_TITLE'),\n      'name': info.title,\n      'title': info.title\n    };\n  }\n\n  static #getUriFromExplodedTrackInfo(info: ExplodedTrackInfo) {\n    /**\n     * `explodeTrackData` - necessary because Volumio adds track uri in\n     * its own playlist / favorites / Last 100, and explodes them again when\n     * played.\n     */\n    const targetView: VideoView = {\n      name: 'video',\n      endpoint: info.endpoint,\n      explodeTrackData: info\n    };\n    return `youtube2/${ViewHelper.constructUriSegmentFromView(targetView)}`;\n  }\n}\n"]}