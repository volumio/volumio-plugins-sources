{"version":3,"file":"PlayerFinder.js","sourceRoot":"","sources":["../../src/lib/PlayerFinder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,kFAAwC;AACxC,kEAA4D;AAC5D,iEAA2E;AAC3E,oDAAkC;AAGlC,iCAAgD;AAChD,+BAAuC;AAEvC,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,yCAAmB,CAAA;IACnB,yCAAmB,CAAA;AACrB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAYD,MAAqB,YAAa,SAAQ,gBAAY;IAQpD;QACE,KAAK,EAAE,CAAC;;QARV,uCAA4B;QAC5B,6CAAwB;QACxB,sDAEE;QACF,qCAA2B;QAIzB,uBAAA,IAAI,wBAAW,kBAAkB,CAAC,OAAO,MAAA,CAAC;QAC1C,uBAAA,IAAI,8BAAiB,EAAE,MAAA,CAAC;QACxB,uBAAA,IAAI,uCAA0B,EAAE,MAAA,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAA4B,EAAE;QACxC,uBAAA,IAAI,sBAAS,IAAI,MAAA,CAAC;QAElB,yBAAyB;QACzB,uBAAe,CAAC,EAAE,CAAC,YAAY,EAAE,uBAAA,IAAI,qEAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,uBAAe,CAAC,EAAE,CAAC,MAAM,EAAE,uBAAA,IAAI,+DAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,uBAAe,CAAC,KAAK,EAAE,CAAC;QACxB,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;QACjE,uBAAA,IAAI,wBAAW,kBAAkB,CAAC,OAAO,MAAA,CAAC;QAC1C,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,IAAI;QACR,uBAAe,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACjD,uBAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC3C,uBAAe,CAAC,IAAI,EAAE,CAAC;QACvB,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAA,IAAI,2CAAuB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC3E,QAAQ,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAC5C,QAAQ,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAC1C,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC5B,uBAAA,IAAI,8BAAiB,EAAE,MAAA,CAAC;QACxB,uBAAA,IAAI,uCAA0B,EAAE,MAAA,CAAC;QACjC,uBAAA,IAAI,wBAAW,kBAAkB,CAAC,OAAO,MAAA,CAAC;IAC5C,CAAC;IAED,SAAS;QACP,OAAO,uBAAA,IAAI,4BAAQ,CAAC;IACtB,CAAC;CAsLF;AAlOD,+BAkOC;uPApLC,KAAK,2CAAqB,MAAc;IACtC,IAAI;QACF,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iDAAiD,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC;QACnG,MAAM,YAAY,GAAG,MAAM,uBAAA,IAAI,kEAAqB,MAAzB,IAAI,EAAsB,MAAM,CAAC,CAAC;QAC7D,IAAI,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,CAAC,YAAY,EAAE;YAC3D,wEAAwE;YACxE,mEAAmE;YACnE,qEAAqE;YACrE,2EAA2E;YAC3E,0BAA0B;YAC1B,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC,YAAY;iBAC5C,MAAM,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,KAAK,mBAAmB,CAAC;iBACpF,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;gBACrB,EAAE,EAAE,MAAM,CAAC,QAAQ;gBACnB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,MAAM;aACP,CAAC,CAAC,CAAC;YACN,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,yCAAyC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtH,OAAO,MAAM,CAAC;SACf;QACD,OAAO,EAAE,CAAC;KACX;IACD,OAAO,KAAK,EAAE;QACZ,8BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,8BAAE,CAAC,eAAe,CAAC,oDAAoD,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QACnI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,8BAAE,CAAC,eAAe,CAAC,8BAAE,CAAC,OAAO,CAAC,mCAAmC,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9H,MAAM,KAAK,CAAC;KACb;AACH,CAAC,yCAED,KAAK,+CAAyB,IAAyB;IACrD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;QACjB,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,4EAA4E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACxH,OAAO;KACR;IACD,MAAM,MAAM,GAAW;QACrB,EAAE,EAAE,IAAI,CAAC,EAAE;QACX,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,OAAO,EAAE,IAAI,CAAC,OAAO;KACtB,CAAC;IACF,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,uCAAuC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAErF,IAAI;QACF,uBAAA,IAAI,2CAAuB,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,uBAAA,IAAI,iFAAoC,MAAxC,IAAI,EAAqC,MAAM,CAAC,CAAC;QAChG,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,iEAAoB,MAAxB,IAAI,EAAqB,MAAM,CAAC,CAAC;QACvD,sGAAsG;QACtG,uEAAuE;QACvE,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,uBAAA,IAAI,gEAAmB,MAAvB,IAAI,EAAoB,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;QACtF,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,uBAAA,IAAI,kCAAc,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;YAClC,uBAAA,IAAI,4DAAe,MAAnB,IAAI,EAAgB,KAAK,EAAE,OAAO,CAAC,CAAC;SACrC;KACF;IACD,OAAO,KAAK,EAAE;QACZ,8BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,8BAAE,CAAC,eAAe,CAAC,wEAAwE,EAAE,KAAK,CAAC,CAAC,CAAC;KAC3H;AACH,CAAC,mCAED,KAAK,yCAAmB,MAA2B;IACjD,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,iCAAiC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC/E,MAAM,IAAI,GAAG,uBAAA,IAAI,kCAAc,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;IACnF,uBAAA,IAAI,8BAAiB,uBAAA,IAAI,kCAAc,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,MAAA,CAAC;IAC3F,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,uBAAA,IAAI,4DAAe,MAAnB,IAAI,EAAgB,IAAI,EAAE,MAAM,CAAC,CAAC;KACnC;IACD,MAAM,oBAAoB,GAAG,uBAAA,IAAI,2CAAuB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACpE,IAAI,oBAAoB,EAAE;QACxB,oBAAoB,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;QACxD,oBAAoB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACtD,OAAO,uBAAA,IAAI,2CAAuB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC9C,IAAI,oBAAoB,CAAC,WAAW,EAAE,EAAE;YACtC,MAAM,oBAAoB,CAAC,IAAI,EAAE,CAAC;SACnC;KACF;AACH,CAAC,iGAE4B,EAAU;IACrC,MAAM,UAAU,GAAG,uBAAA,IAAI,kCAAc,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC;IAC9E,IAAI,UAAU,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI,GAAG,uBAAA,IAAI,kCAAc,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACtD,uBAAA,IAAI,4DAAe,MAAnB,IAAI,EAAgB,IAAI,EAAE,MAAM,CAAC,CAAC;KACnC;AACH,CAAC,6EAEkB,QAAgB,EAAE,MAAc;IACjD,OAAO,uBAAA,IAAI,kCAAc,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;AACrH,CAAC,qCAED,KAAK,2CAAqB,MAAc,EAAE,IAAkB;IAC1D,MAAM,EAAC,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC;IAC9C,IAAI,YAAY,KAAK,QAAQ,IAAI,QAAQ,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9D,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC3E,MAAM,CAAC,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;QACnD,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,wDAAwD,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,eAAe,IAAI,GAAG,CAAC,CAAC;QAC7H,IAAI,IAAI,KAAK,SAAS,IAAI,CAAC,uBAAA,IAAI,gEAAmB,MAAvB,IAAI,EAAoB,QAAQ,EAAE,MAAM,CAAC,EAAE;YACpE,uBAAA,IAAI,0EAA6B,MAAjC,IAAI,EAA8B,QAAQ,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,MAAM,uBAAA,IAAI,iEAAoB,MAAxB,IAAI,EAAqB,MAAM,CAAC,CAAC;YACvD,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;YAC/D,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;gBACtB,uBAAA,IAAI,kCAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC/B,uBAAA,IAAI,4DAAe,MAAnB,IAAI,EAAgB,CAAE,KAAK,CAAE,EAAE,OAAO,CAAC,CAAC;aACzC;SACF;aACI,IAAI,IAAI,KAAK,YAAY,EAAE;YAC9B,uBAAA,IAAI,0EAA6B,MAAjC,IAAI,EAA8B,QAAQ,CAAC,CAAC;SAC7C;KACF;AACH,CAAC,qEAEc,OAAiB,EAAE,SAAiB;IACjD,MAAM,WAAW,GAAG,uBAAA,IAAI,0BAAM,CAAC,WAAW,CAAC;IAC3C,IAAI,CAAC,WAAW,EAAE;QAChB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC9B,OAAO;KACR;IACD,MAAM,UAAU,GAAoC,EAAE,CAAC;IACvD,IAAI,WAAW,CAAC,QAAQ,EAAE;QACxB,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC;QACjC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1E;IACD,IAAI,WAAW,CAAC,UAAU,EAAE;QAC1B,MAAM,EAAE,GAAG,WAAW,CAAC,UAAU,CAAC;QAClC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;YACjC,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;KAC5E;IACD,IAAI,WAAW,CAAC,QAAQ,EAAE;QACxB,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC;QACjC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1E;IACD,IAAI,QAAQ,GAAG,OAAO,CAAC;IACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAC1C,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3C;IAED,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QACvB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KAChC;AACH,CAAC,qDAGD,KAAK,2DAAqC,MAAc,EAAE,SAAS,GAAG,QAAQ;IAC5E,MAAM,aAAa,GAAG,IAAA,6BAAsB,EAAC,MAAM,EAAE,uBAAA,IAAI,0BAAM,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC1F,MAAM,oBAAoB,GAAG,IAAI,4CAAoB,CAAC;QACpD,MAAM,EAAE;YACN,GAAG,aAAa;SACjB;QACD,SAAS;KACV,CAAC,CAAC;IACH,oBAAoB,CAAC,EAAE,CAAC,cAAc,EAAE,uBAAA,IAAI,iEAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IACrF,oBAAoB,CAAC,EAAE,CAAC,YAAY,EAAE,uBAAA,IAAI,+DAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IACjF,IAAI;QACF,MAAM,oBAAoB,CAAC,KAAK,EAAE,CAAC;QACnC,8BAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;QACtE,OAAO,oBAAoB,CAAC;KAC7B;IACD,OAAO,KAAK,EAAE;QACZ,8BAAE,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,8BAAE,CAAC,eAAe,CAAC,6DAA6D,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5I,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,8BAAE,CAAC,eAAe,CAAC,8BAAE,CAAC,OAAO,CAAC,mCAAmC,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9H,MAAM,KAAK,CAAC;KACb;AACH,CAAC,sCAED,KAAK,4CAAsB,MAAc;IACvC,MAAM,aAAa,GAAG,IAAA,6BAAsB,EAAC,MAAM,EAAE,uBAAA,IAAI,0BAAM,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IAC1F,OAAO,IAAA,oBAAc,EAAC,aAAa,EAAE;QACnC,EAAE;QACF;YACE,cAAc;YACd,CAAC;YACD,GAAG;SACJ;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["import sm from './SqueezeliteMCContext';\nimport serverDiscovery, { ServerInfo } from 'lms-discovery';\nimport { Notification, NotificationListener } from 'lms-cli-notifications';\nimport EventEmitter from 'events';\nimport Player from './types/Player';\nimport Server, { ServerCredentials } from './types/Server';\nimport { getServerConnectParams } from './Util';\nimport { sendRpcRequest } from './RPC';\n\nexport enum PlayerFinderStatus {\n  Started = 'started',\n  Stopped = 'stopped'\n}\n\nexport interface PlayerFinderOptions {\n  serverCredentials?: ServerCredentials;\n  // Emit events only when player matches criteria\n  eventFilter?: {\n    playerIP?: string | string[],\n    playerName?: string | string[],\n    playerId?: string | string[]\n  };\n}\n\nexport default class PlayerFinder extends EventEmitter {\n  #status: PlayerFinderStatus;\n  #foundPlayers: Player[];\n  #notificationListeners: {\n    [serverIp: string]: NotificationListener;\n  };\n  #opts: PlayerFinderOptions;\n\n  constructor() {\n    super();\n    this.#status = PlayerFinderStatus.Stopped;\n    this.#foundPlayers = [];\n    this.#notificationListeners = {};\n  }\n\n  async start(opts: PlayerFinderOptions = {}) {\n    this.#opts = opts;\n\n    // Start server discovery\n    serverDiscovery.on('discovered', this.#handleServerDiscovered.bind(this));\n    serverDiscovery.on('lost', this.#handleServerLost.bind(this));\n    serverDiscovery.start();\n    sm.getLogger().info('[squeezelite_mc] Server discovery started');\n    this.#status = PlayerFinderStatus.Started;\n    sm.getLogger().info('[squeezelite_mc] Player finder started');\n  }\n\n  async stop() {\n    serverDiscovery.removeAllListeners('discovered');\n    serverDiscovery.removeAllListeners('lost');\n    serverDiscovery.stop();\n    const promises = Object.values(this.#notificationListeners).map((listener) => {\n      listener.removeAllListeners('notification');\n      listener.removeAllListeners('disconnect');\n      return listener.stop();\n    });\n    await Promise.all(promises);\n    this.#foundPlayers = [];\n    this.#notificationListeners = {};\n    this.#status = PlayerFinderStatus.Stopped;\n  }\n\n  getStatus() {\n    return this.#status;\n  }\n\n  async #getPlayersOnServer(server: Server): Promise<Player[]> {\n    try {\n      sm.getLogger().info(`[squeezelite_mc] Getting players connected to ${server.name} (${server.ip})`);\n      const serverStatus = await this.#requestServerStatus(server);\n      if (serverStatus.result && serverStatus.result.players_loop) {\n        // Filter out players with Id '00:00:00:00:00:00', because it could well\n        // Be due to Squeezelite starting before network is initialized. If\n        // This happens to multiple Squeezlite devices, this will mess up the\n        // Finder (server will also probably be messed up, but that's not something\n        // We can deal with here).\n        const result = serverStatus.result.players_loop\n          .filter((player: any) => player.connected && player.playerid !== '00:00:00:00:00:00')\n          .map((player: any) => ({\n            id: player.playerid,\n            uuid: player.uuid,\n            ip: player.ip.split(':')[0],\n            name: player.name,\n            server\n          }));\n        sm.getLogger().info(`[squeezelite_mc] Players connected to ${server.name} (${server.ip}): ${JSON.stringify(result)}`);\n        return result;\n      }\n      return [];\n    }\n    catch (error) {\n      sm.getLogger().error(sm.getErrorMessage(`[squeezelite_mc] Failed to get players on server ${server.name} (${server.ip}):`, error));\n      this.emit('error', sm.getErrorMessage(sm.getI18n('SQUEEZELITE_MC_ERR_SERVER_REQUEST', server.name, server.ip), error, false));\n      throw error;\n    }\n  }\n\n  async #handleServerDiscovered(data: ServerInfo | Server) {\n    if (!data.cliPort) {\n      sm.getLogger().warn(`[squeezelite_mc] Disregarding discovered server due to missing CLI port: ${JSON.stringify(data)}`);\n      return;\n    }\n    const server: Server = {\n      ip: data.ip,\n      name: data.name,\n      ver: data.ver,\n      uuid: data.uuid,\n      jsonPort: data.jsonPort,\n      cliPort: data.cliPort\n    };\n    sm.getLogger().info(`[squeezelite_mc] Server discovered: ${JSON.stringify(server)}`);\n\n    try {\n      this.#notificationListeners[server.ip] = await this.#createAndStartNotificationListener(server);\n      const players = await this.#getPlayersOnServer(server);\n      // During await #getPlayersOnServer(), notificationListener could have detected player connections and\n      // Added them to the list of found players. We need to filter them out.\n      const found = players.filter((player) => !this.#isPlayerConnected(player.id, server));\n      if (found.length > 0) {\n        this.#foundPlayers.push(...found);\n        this.#filterAndEmit(found, 'found');\n      }\n    }\n    catch (error) {\n      sm.getLogger().error(sm.getErrorMessage('[squeezelite_mc] An error occurred while processing discovered server:', error));\n    }\n  }\n\n  async #handleServerLost(server: ServerInfo | Server) {\n    sm.getLogger().info(`[squeezelite_mc] Server lost: ${JSON.stringify(server)}`);\n    const lost = this.#foundPlayers.filter((player) => player.server.ip === server.ip);\n    this.#foundPlayers = this.#foundPlayers.filter((player) => player.server.ip !== server.ip);\n    if (lost.length > 0) {\n      this.#filterAndEmit(lost, 'lost');\n    }\n    const notificationListener = this.#notificationListeners[server.ip];\n    if (notificationListener) {\n      notificationListener.removeAllListeners('notification');\n      notificationListener.removeAllListeners('disconnect');\n      delete this.#notificationListeners[server.ip];\n      if (notificationListener.isConnected()) {\n        await notificationListener.stop();\n      }\n    }\n  }\n\n  #removeAndEmitLostByPlayerId(id: string) {\n    const foundIndex = this.#foundPlayers.findIndex((player) => id === player.id);\n    if (foundIndex >= 0) {\n      const lost = this.#foundPlayers.splice(foundIndex, 1);\n      this.#filterAndEmit(lost, 'lost');\n    }\n  }\n\n  #isPlayerConnected(playerId: string, server: Server) {\n    return this.#foundPlayers.findIndex((player) => (player.id === playerId) && (player.server.ip === server.ip)) >= 0;\n  }\n\n  async #handleNotification(server: Server, data: Notification) {\n    const {notification, playerId, params} = data;\n    if (notification === 'client' && playerId && params.length > 0) {\n      const type = (params[0] === 'new' || params[0] === 'reconnect') ? 'connect' :\n        params[0] === 'disconnect' ? 'disconnect' : null;\n      sm.getLogger().info(`[squeezelite_mc] 'client' notification received from ${server.name} (${server.ip}); type is '${type}'`);\n      if (type === 'connect' && !this.#isPlayerConnected(playerId, server)) {\n        this.#removeAndEmitLostByPlayerId(playerId);\n        const players = await this.#getPlayersOnServer(server);\n        const found = players.find((player) => player.id === playerId);\n        if (found) {\n          found.server = server;\n          this.#foundPlayers.push(found);\n          this.#filterAndEmit([ found ], 'found');\n        }\n      }\n      else if (type === 'disconnect') {\n        this.#removeAndEmitLostByPlayerId(playerId);\n      }\n    }\n  }\n\n  #filterAndEmit(players: Player[], eventName: string) {\n    const eventFilter = this.#opts.eventFilter;\n    if (!eventFilter) {\n      this.emit(eventName, players);\n      return;\n    }\n    const predicates: ((player: Player) => boolean)[] = [];\n    if (eventFilter.playerIP) {\n      const pip = eventFilter.playerIP;\n      predicates.push(Array.isArray(pip) ?\n        (player) => pip.includes(player.ip) : (player) => (pip === player.ip));\n    }\n    if (eventFilter.playerName) {\n      const pn = eventFilter.playerName;\n      predicates.push(Array.isArray(pn) ?\n        (player) => pn.includes(player.name) : (player) => (pn === player.name));\n    }\n    if (eventFilter.playerId) {\n      const pid = eventFilter.playerId;\n      predicates.push(Array.isArray(pid) ?\n        (player) => pid.includes(player.id) : (player) => (pid === player.id));\n    }\n    let filtered = players;\n    for (let i = 0; i < predicates.length; i++) {\n      filtered = filtered.filter(predicates[i]);\n    }\n\n    if (filtered.length > 0) {\n      this.emit(eventName, filtered);\n    }\n  }\n\n\n  async #createAndStartNotificationListener(server: Server, subscribe = 'client') {\n    const connectParams = getServerConnectParams(server, this.#opts.serverCredentials, 'cli');\n    const notificationListener = new NotificationListener({\n      server: {\n        ...connectParams\n      },\n      subscribe\n    });\n    notificationListener.on('notification', this.#handleNotification.bind(this, server));\n    notificationListener.on('disconnect', this.#handleServerLost.bind(this, server));\n    try {\n      await notificationListener.start();\n      sm.getLogger().info('[squeezelite_mc] Notification listener started');\n      return notificationListener;\n    }\n    catch (error) {\n      sm.getLogger().error(sm.getErrorMessage(`[squeezelite_mc] Failed to start notification listener on ${server.name} (${server.ip}):`, error));\n      this.emit('error', sm.getErrorMessage(sm.getI18n('SQUEEZELITE_MC_ERR_SERVER_REQUEST', server.name, server.ip), error, false));\n      throw error;\n    }\n  }\n\n  async #requestServerStatus(server: Server) {\n    const connectParams = getServerConnectParams(server, this.#opts.serverCredentials, 'rpc');\n    return sendRpcRequest(connectParams, [\n      '',\n      [\n        'serverstatus',\n        0,\n        999\n      ]\n    ]);\n  }\n}\n"]}