{"version":3,"file":"CommandDispatcher.js","sourceRoot":"","sources":["../../src/lib/CommandDispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+BAAuC;AACvC,iCAAqE;AAIrE,MAAqB,iBAAiB;IAIpC,YAAY,MAAc,EAAE,iBAAoC;QAHhE,8CAAkB;QAClB,sDAAuC;QAGrC,uBAAA,IAAI,+BAAa,MAAM,CAAC,EAAE,MAAA,CAAC;QAC3B,uBAAA,IAAI,uCAAqB,IAAA,6BAAsB,EAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,KAAK,CAAC,MAAA,CAAC;IAC3F,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,MAAM,CAAE;SACX,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,SAAS;QACb,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,OAAO,CAAE;SACZ,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,MAAM,CAAE;SACX,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ;QACZ,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,QAAQ,EAAE,UAAU,CAAE;SACzB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,QAAQ,EAAE,UAAU,CAAE;SACzB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAAY;QACzB,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,MAAM,EAAE,IAAI,GAAG,IAAI,CAAE;SACxB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,KAAa;QAC5B,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,CAAE;SAChC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,UAAU,EAAE,SAAS,EAAE,KAAK,CAAE;SACjC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,KAAa;QAC5B,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAE;SAC7B,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAAgB,EAAE,KAAU;QACzC,OAAO,IAAA,oBAAc,EAAC,uBAAA,IAAI,2CAAkB,EAAE;YAC5C,uBAAA,IAAI,mCAAU;YACd,CAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,CAAE;SAClC,CAAC,CAAC;IACL,CAAC;CACF;AA9ED,oCA8EC","sourcesContent":["import { sendRpcRequest } from './RPC';\nimport { ServerConnectParams, getServerConnectParams } from './Util';\nimport Player from './types/Player';\nimport { ServerCredentials } from './types/Server';\n\nexport default class CommandDispatcher {\n  #playerId: string;\n  #rpcConnectParams: ServerConnectParams;\n\n  constructor(player: Player, serverCredentials: ServerCredentials) {\n    this.#playerId = player.id;\n    this.#rpcConnectParams = getServerConnectParams(player.server, serverCredentials, 'rpc');\n  }\n\n  async sendPlay() {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'play' ]\n    ]);\n  }\n\n  async sendPause() {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'pause' ]\n    ]);\n  }\n\n  async sendStop() {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'stop' ]\n    ]);\n  }\n\n  async sendNext() {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'button', 'jump_fwd' ]\n    ]);\n  }\n\n  async sendPrevious() {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'button', 'jump_rew' ]\n    ]);\n  }\n\n  async sendSeek(time: number) {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'time', time / 1000 ]\n    ]);\n  }\n\n  async sendRepeat(value: number) {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'playlist', 'repeat', value ]\n    ]);\n  }\n\n  async sendShuffle(value: number) {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'playlist', 'shuffle', value ]\n    ]);\n  }\n\n  async sendVolume(value: number) {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'mixer', 'volume', value ]\n    ]);\n  }\n\n  async sendPref(prefName: string, value: any) {\n    return sendRpcRequest(this.#rpcConnectParams, [\n      this.#playerId,\n      [ 'playerpref', prefName, value ]\n    ]);\n  }\n}\n"]}