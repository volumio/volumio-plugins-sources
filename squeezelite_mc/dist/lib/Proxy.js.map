{"version":3,"file":"Proxy.js","sourceRoot":"","sources":["../../src/lib/Proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import http, { Server as HttpServer } from 'http';\nimport express from 'express';\nimport sm from './SqueezeliteMCContext';\nimport { ServerCredentials } from './types/Server';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { encodeBase64 } from './Util';\nimport fetch, { HeadersInit } from 'node-fetch';\n\nexport enum ProxyStatus {\n  Stopped = 'stopped',\n  Started = 'started',\n  Starting = 'starting'\n}\n\nexport interface ProxyAddress {\n  address: string;\n  port?: number;\n}\n\nexport default class Proxy {\n  #serverCredentials: ServerCredentials;\n  #server: HttpServer | null;\n  #status: ProxyStatus;\n  #startPromise: Promise<void> | null;\n  #app: express.Application;\n\n  constructor(serverCredentials: ServerCredentials = {}) {\n    this.#serverCredentials = serverCredentials;\n    this.#server = null;\n    this.#status = ProxyStatus.Stopped;\n    this.#startPromise = null;\n    this.#app = express();\n\n    this.#app.use(express.urlencoded({ extended: false }));\n    this.#app.get('/', this.#handleRequest.bind(this));\n  }\n\n  start() {\n    if (this.getStatus() === ProxyStatus.Started) {\n      sm.getLogger().info('[squeezelite_mc] Proxy server already started');\n      return Promise.resolve();\n    }\n    else if (this.getStatus() === ProxyStatus.Starting && this.#startPromise) {\n      return this.#startPromise;\n    }\n\n    this.#status = ProxyStatus.Starting;\n    this.#startPromise = new Promise((resolve, reject) => {\n      sm.getLogger().info('[squeezelite_mc] Starting proxy server...');\n      const server = this.#server = http.createServer(this.#app);\n      server.on('error', (error) => {\n        if (this.getStatus() === ProxyStatus.Starting) {\n          sm.getLogger().error(sm.getErrorMessage('[squeezelite_mc] An error occurred while starting proxy server:', error));\n          server.close();\n          reject(error);\n        }\n        else {\n          sm.getLogger().error(sm.getErrorMessage('[squeezelite_mc] Proxy server error:', error));\n        }\n      });\n      server.once('close', () => {\n        this.#status = ProxyStatus.Stopped;\n        this.#server = null;\n        sm.getLogger().info('[squeezelite_mc] Proxy server stopped');\n      });\n\n      server.listen(0, () => {\n        this.#status = ProxyStatus.Started;\n        const address = this.getAddress();\n        if (!address) {\n          sm.getLogger().warn('[squeezelite_mc] Proxy server started but address is unknown');\n        }\n        else if (address.port) {\n          sm.getLogger().info(`[squeezelite_mc] Proxy server started on port ${address.port}`);\n        }\n        else {\n          sm.getLogger().info('[squeezelite_mc] Proxy server started on unknown port');\n        }\n        resolve();\n      });\n    });\n\n    return this.#startPromise;\n  }\n\n  stop() {\n    if (this.#server) {\n      this.#server.close();\n    }\n  }\n\n  getStatus() {\n    return this.#status;\n  }\n\n  getAddress(): ProxyAddress | null {\n    if (this.getStatus() === ProxyStatus.Started && this.#server) {\n      const addr = this.#server.address();\n      if (typeof addr === 'string') {\n        return {\n          address: addr\n        };\n      }\n      else if (addr?.address) {\n        return {\n          address: addr.address,\n          port: addr.port\n        };\n      }\n    }\n    return null;\n  }\n\n  setServerCredentials(serverCredentials: ServerCredentials = {}) {\n    this.#serverCredentials = serverCredentials;\n  }\n\n  async #handleRequest(req: express.Request, res: express.Response) {\n    const serverName = req.query.server_name;\n    const url = req.query.url;\n    const fallback = req.query.fallback;\n\n    /**\n     * Volumio's Manifest UI sometimes URI-encodes the already encoded `url`\n     * so it becomes malformed. We need to check whether this is the case.\n     * Fortunately, it seems a request with double-encoded `url` is preceded by\n     * one with the correct, untampered value.\n     */\n    if (typeof url !== 'string' || !this.#validateURL(url)) {\n      sm.getLogger().error(`[squeezelite_mc] Proxy: invalid URL (${url})`);\n      return res.status(400).end();\n    }\n\n    sm.getLogger().info(`[squeezelite_mc] Proxy request for ${serverName}, URL: ${url}`);\n    const streamPipeline = promisify(pipeline);\n    const headers: HeadersInit = {};\n    const credentials = serverName ? this.#serverCredentials[serverName.toString()] : null;\n    if (credentials) {\n      headers.Authorization = `Basic ${encodeBase64(`${credentials.username}:${credentials.password || ''}`)}`;\n    }\n    try {\n      const response = await fetch(url, { headers });\n      if (!response.ok) {\n        sm.getLogger().error(`[squeezelite_mc] Proxy received unexpected response: ${response.status} - ${response.statusText}`);\n        if (typeof fallback === 'string') {\n          res.redirect(fallback);\n        }\n      }\n      else if (!response.body) {\n        sm.getLogger().error('[squeezelite_mc] Proxy received empty response body');\n        if (typeof fallback === 'string') {\n          res.redirect(fallback);\n        }\n      }\n      else {\n        await streamPipeline(response.body, res);\n      }\n    }\n    catch (error) {\n      sm.getLogger().error(sm.getErrorMessage('[squeezelite_mc] Proxy server encountered the following error:', error));\n      if (typeof fallback === 'string') {\n        // It might be too late to redirect the response to fallback, so need to try-catch\n        try {\n          res.redirect(fallback);\n        }\n        catch (error) {\n          sm.getLogger().error(sm.getErrorMessage('[squeezelite_mc] Proxy server failed to redirect response to fallback url:', error, false));\n          res.end();\n        }\n      }\n    }\n  }\n\n  #validateURL(url: string) {\n    try {\n      const test = new URL(url);\n      return !!test;\n    }\n    catch (error) {\n      return false;\n    }\n  }\n}\n"]}